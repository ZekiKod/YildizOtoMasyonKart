import{_ as e}from"./tslib.es6-d65164b3.js";import{D as t,C as o,L as r}from"./baseChart-8423b7f5.js";import{C as s,X as i,a as n}from"./settings-e5eb3375.js";import{e as l}from"./custom-element-267f9a21.js";import"./dom-utils-bf33c859.js";import"./dom-4684d8d6.js";import"./_commonjsHelpers-41cdd1e7.js";import"./string-2448bf95.js";import"./browser-3fc721b7.js";import"./css-classes-1103f305.js";import"./disposable-d2c2d283.js";import"./devextreme-widget-wrapper-9c026d7d.js";import"./utils-b5b2c8a9.js";import"./single-slot-element-base-bbf951b4.js";import"./data-qa-utils-8be7c726.js";import"./const-90026e45.js";import"./dx-ui-element-b777832b.js";import"./lit-element-base-b20b52b2.js";import"./dx-license-e00a5bc7.js";import"./lit-element-462e7ad3.js";import"./logicaltreehelper-67db40f1.js";import"./layouthelper-67dd777a.js";import"./point-e4ec110e.js";import"./constants-7c047c0d.js";import"./property-4ec0b52d.js";import"./events-a8fe5872.js";import"./custom-events-helper-e7f279d3.js";import"./create-after-timeout-fn-executor-38b3d79d.js";import"./client-component-style-helper-195fa7c3.js";const c=`${s.commonAxisSettingsKey}.title.font.${s.colorKey}`,m=`${s.commonAxisSettingsKey}.${s.constantLineStyleKey}.${s.colorKey}`,a=`${s.commonAxisSettingsKey}.${s.colorKey}`,p=`${s.commonSeriesSettingsKey}.point.hoverStyle.${s.colorKey}`,d=`${s.commonSeriesSettingsKey}.valueErrorBar.${s.colorKey}`,g=`${s.commonAnnotationSettingsKey}.${s.colorKey}`,j=`${s.commonAnnotationSettingsKey}.font.${s.colorKey}`;let b=class extends t{constructor(){super(...arguments),this._pointClickArgs=null}getWidgetTypeName(){return o.xyChartName}getLegendItemType(){return r.series}createWidgetSettingsConverter(){return new i}getThemeDependentOptionsDict(){const e={[c]:n.axisTitleFontColor,[m]:n.constantLineColor,[a]:n.axisLineColor,[p]:n.seriesPointHoverColor,[d]:n.errorBarColor,[g]:n.annotationColor,[j]:n.annotationTextColor};return{...super.getThemeDependentOptionsDict(),...e}}configureSelectionController(e){void 0!==e.seriesSelectionMode&&this.selectionController.setSeriesSelectionMode(e.seriesSelectionMode),super.configureSelectionController(e)}getChartOnPointClickHandler(){return e=>{this._pointClickArgs=e}}getChartOnSeriesClickHandler(){return e=>{var t;const o=e.target,r=null===(t=this._pointClickArgs)||void 0===t?void 0:t.target;this.onSeriesClick(o.index,null==r?void 0:r.data,null==r?void 0:r.tag),this._pointClickArgs=null,this.selectionController.selectSeriesAndPoint(o,r)}}};b=e([l("dxbl-chart")],b);export{b as DxChart};
