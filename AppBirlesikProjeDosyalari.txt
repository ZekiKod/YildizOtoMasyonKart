--- Birleştirilmiş Proje Dosyaları ---
Kaynak Klasör: D:\Çalışmalar\YildizOtoMasyonKart
Dahil Edilen Dosya Türleri: CS, RAZOR, CSHTML, JS, TSX, CSS, XAFML, JSON, XML, PHP, İNC, HTML, SQL, PROPS
Hariç Tutulan Klasör Adları (içeren yollar): bin, obj, node_modules, .git, .vs, properties, wwwroot/lib, migrations, packages
Toplam Dosya Sayısı: 82
Oluşturma Tarihi: 24.06.2025 21:12:22
--------------------------------------

Birleştirilen Dosyalar (Sıralı):
1. .cr\personal\FavoritesList\List.xml
2. WebAccess\.cr\personal\FavoritesList\List.xml
3. WebAccess\WebAccess\.config\dotnet-tools.json
4. WebAccess\WebAccess\appsettings.Development.json
5. WebAccess\WebAccess\appsettings.json
6. WebAccess\WebAccess\Controllers\HomeController.cs
7. WebAccess\WebAccess\lastCardSetting.xml
8. WebAccess\WebAccess\Models\ErrorViewModel.cs
9. WebAccess\WebAccess\Program.cs
10. WebAccess\WebAccess\Servis\BackgroundServiceExample.cs
11. WebAccess\WebAccess\WebAccess_Lib\WebAccess_UserLib.cs
12. WebAccess\WebAccess\WebAccess_Lib\WebAccess.cs
13. WebAccess\WebAccess\WebAccess_Lib\WebAccessContext.cs
14. WebAccess\WebAccess\WebAccess_Lib\WebAccessRun.cs
15. WebAccess\WebAccess\XmlHelper.cs
16. YildizOtoMasyonKart.Blazor.Server\_Imports.razor
17. YildizOtoMasyonKart.Blazor.Server\.config\dotnet-tools.json
18. YildizOtoMasyonKart.Blazor.Server\App.razor
19. YildizOtoMasyonKart.Blazor.Server\appsettings.Development.json
20. YildizOtoMasyonKart.Blazor.Server\appsettings.json
21. YildizOtoMasyonKart.Blazor.Server\BlazorApplication.cs
22. YildizOtoMasyonKart.Blazor.Server\BlazorModule.cs
23. YildizOtoMasyonKart.Blazor.Server\Controllers\GirisCikislarViewController.cs
24. YildizOtoMasyonKart.Blazor.Server\Controllers\GirisCikislarViewController.Designer.cs
25. YildizOtoMasyonKart.Blazor.Server\Controllers\HomeController.cs
26. YildizOtoMasyonKart.Blazor.Server\Controllers\Kalanbakiyekontrol.cs
27. YildizOtoMasyonKart.Blazor.Server\Controllers\Kalanbakiyekontrol.Designer.cs
28. YildizOtoMasyonKart.Blazor.Server\Controllers\KasaViewController.cs
29. YildizOtoMasyonKart.Blazor.Server\Controllers\KasaViewController.Designer.cs
30. YildizOtoMasyonKart.Blazor.Server\Controllers\Port.cs
31. YildizOtoMasyonKart.Blazor.Server\Controllers\Port.Designer.cs
32. YildizOtoMasyonKart.Blazor.Server\Editors\BarcodeCamViewItem.cs
33. YildizOtoMasyonKart.Blazor.Server\Editors\ProductInvokeHelper.cs
34. YildizOtoMasyonKart.Blazor.Server\Model_tr.xafml
35. YildizOtoMasyonKart.Blazor.Server\Model.xafml
36. YildizOtoMasyonKart.Blazor.Server\Models\ErrorViewModel.cs
37. YildizOtoMasyonKart.Blazor.Server\Pages\_Host.cshtml
38. YildizOtoMasyonKart.Blazor.Server\Program.cs
39. YildizOtoMasyonKart.Blazor.Server\RazorComponents\BarcodeCamInterface.razor
40. YildizOtoMasyonKart.Blazor.Server\Services\BackgroundServiceExample.cs
41. YildizOtoMasyonKart.Blazor.Server\Services\CircuitHandlerProxy.cs
42. YildizOtoMasyonKart.Blazor.Server\Services\ProxyHubConnectionHandler.cs
43. YildizOtoMasyonKart.Blazor.Server\Startup.cs
44. YildizOtoMasyonKart.Blazor.Server\WebAccess_Lib\WebAccess_UserLib.cs
45. YildizOtoMasyonKart.Blazor.Server\WebAccess_Lib\WebAccess.cs
46. YildizOtoMasyonKart.Blazor.Server\WebAccess_Lib\WebAccessContext.cs
47. YildizOtoMasyonKart.Blazor.Server\WebAccess_Lib\WebAccessRun.cs
48. YildizOtoMasyonKart.Blazor.Server\wwwroot\css\site.css
49. YildizOtoMasyonKart.Blazor.Server\wwwroot\scripts.js
50. YildizOtoMasyonKart.Module\BusinessObjects\ApplicationUser.cs
51. YildizOtoMasyonKart.Module\BusinessObjects\ApplicationUserLoginInfo.cs
52. YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\Cihazlar.cs
53. YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\Cihazlar.Designer.cs
54. YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\GecisUcretleri.cs
55. YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\GecisUcretleri.Designer.cs
56. YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\GirisCikislar.cs
57. YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\GirisCikislar.Designer.cs
58. YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\indirimler.cs
59. YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\indirimler.Designer.cs
60. YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\Kapilar.cs
61. YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\Kapilar.Designer.cs
62. YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\KartBilgileri.cs
63. YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\KartBilgileri.Designer.cs
64. YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\KartGrubu.cs
65. YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\KartGrubu.Designer.cs
66. YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\KartOdeme.cs
67. YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\KartOdeme.Designer.cs
68. YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\Kasa.cs
69. YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\Kasa.Designer.cs
70. YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\KasaDetay.cs
71. YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\KasaDetay.Designer.cs
72. YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\SatilanUrunler.cs
73. YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\SatilanUrunler.Designer.cs
74. YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\UrunKategori.cs
75. YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\UrunKategori.Designer.cs
76. YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\Urunler.cs
77. YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\Urunler.Designer.cs
78. YildizOtoMasyonKart.Module\DatabaseUpdate\Updater.cs
79. YildizOtoMasyonKart.Module\Model.DesignedDiffs.Localization.tr.xafml
80. YildizOtoMasyonKart.Module\Model.DesignedDiffs.xafml
81. YildizOtoMasyonKart.Module\Module.cs
82. YildizOtoMasyonKart.Module\Welcome.html

--------------------------------------

--- XML Dosya Başlangıcı: .cr\personal\FavoritesList\List.xml ---

<?xml version="1.0" encoding="utf-8"?>
<Root Type="DevExpress.CodeRush.Foundation.CodePlaces.Options.FavoritesListContainer">
  <Options Language="Neutral">
    <Groups />
  </Options>
</Root>

--- XML Dosya Sonu: .cr\personal\FavoritesList\List.xml ---

==============================================

--- XML Dosya Başlangıcı: WebAccess\.cr\personal\FavoritesList\List.xml ---

<?xml version="1.0" encoding="utf-8"?>
<Root Type="DevExpress.CodeRush.Foundation.CodePlaces.Options.FavoritesListContainer">
  <Options Language="Neutral">
    <Groups />
  </Options>
</Root>

--- XML Dosya Sonu: WebAccess\.cr\personal\FavoritesList\List.xml ---

==============================================

--- JSON Dosya Başlangıcı: WebAccess\WebAccess\.config\dotnet-tools.json ---

{
  "version": 1,
  "isRoot": true,
  "tools": {
    "dotnet-ef": {
      "version": "8.0.7",
      "commands": [
        "dotnet-ef"
      ],
      "rollForward": false
    }
  }
}

--- JSON Dosya Sonu: WebAccess\WebAccess\.config\dotnet-tools.json ---

==============================================

--- JSON Dosya Başlangıcı: WebAccess\WebAccess\appsettings.Development.json ---

{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}


--- JSON Dosya Sonu: WebAccess\WebAccess\appsettings.Development.json ---

==============================================

--- JSON Dosya Başlangıcı: WebAccess\WebAccess\appsettings.json ---

{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}


--- JSON Dosya Sonu: WebAccess\WebAccess\appsettings.json ---

==============================================

--- CS Dosya Başlangıcı: WebAccess\WebAccess\Controllers\HomeController.cs ---

using Microsoft.AspNetCore.Mvc;
using System.Diagnostics;
using WebAccess.Models;

namespace WebAccess.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;

        public HomeController(ILogger<HomeController> logger)
        {
            _logger = logger;
        }

        public string Index()
        {
            ASPNetCore_WebAccess.WebAccessRun WebAccess_Run = new ASPNetCore_WebAccess.WebAccessRun(HttpContext);
            //Console.WriteLine(WebAccess_Run.WebAccess.GetResponse());
            return WebAccess_Run.WebAccess.GetResponse();
        }

        public IActionResult Privacy()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}

--- CS Dosya Sonu: WebAccess\WebAccess\Controllers\HomeController.cs ---

==============================================

--- XML Dosya Başlangıcı: WebAccess\WebAccess\lastCardSetting.xml ---

<Settings>
  <reader>02252478</reader>
  <kartno>1</kartno>
</Settings>

--- XML Dosya Sonu: WebAccess\WebAccess\lastCardSetting.xml ---

==============================================

--- CS Dosya Başlangıcı: WebAccess\WebAccess\Models\ErrorViewModel.cs ---

namespace WebAccess.Models
{
    public class ErrorViewModel
    {
        public string? RequestId { get; set; }

        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);
    }
}

--- CS Dosya Sonu: WebAccess\WebAccess\Models\ErrorViewModel.cs ---

==============================================

--- CS Dosya Başlangıcı: WebAccess\WebAccess\Program.cs ---

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllersWithViews();

// Kestrel sunucusunun ayarlar�
builder.WebHost.ConfigureKestrel(options =>
{
    options.Limits.MaxResponseBufferSize = null;

    // Belirli bir IP ve portta dinlemesi i�in ayar
    options.Listen(System.Net.IPAddress.Parse("192.168.1.54"), 5000); // IP adresi ve portu belirtiyoruz
});

var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
}
app.UseStaticFiles();

app.UseRouting();

app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

app.Run();


--- CS Dosya Sonu: WebAccess\WebAccess\Program.cs ---

==============================================

--- CS Dosya Başlangıcı: WebAccess\WebAccess\Servis\BackgroundServiceExample.cs ---

namespace WebAccess.Servis
{
    public class BackgroundServiceExample
    {
    }
}


--- CS Dosya Sonu: WebAccess\WebAccess\Servis\BackgroundServiceExample.cs ---

==============================================

--- CS Dosya Başlangıcı: WebAccess\WebAccess\WebAccess_Lib\WebAccess_UserLib.cs ---

/*
 * Author: İstanbul Yazılım Elektronik Sanayi
 */

using System;
using System.Collections.Specialized;
using System.Text;
using static ASPNetCore_WebAccess.UserLib;

namespace ASPNetCore_WebAccess
{
    public class UserLib
    {
        public const int NO_ID = -1;
        public const int MAX_READER_CAPACITY = 16;
        public const int ZAMAN_KODU_PARCA_SAYISI = 5; // Bir zaman kodunun kaç parçadan oluştuğunu bildirir.
        public const byte PGM_KART_SAYISI = 5;      // PGM(Paylaşımlı Geçiş Modu) modu için kullanıcının grubunda maksimum kaç kişi olabileceğini bildirir.

        public enum AntiPassbackStatus
        {
            Outside = 0, // Dışarıda
            Inside = 1, // İçeride
            None = 2 // Bilinmiyor
        }

        public class UserRelays
        {
            public UserRelays()
            {
                ARelays = new bool[MAX_READER_CAPACITY];
            }

            public bool this[int RelayNum]
            {
                get { return ARelays[RelayNum - 1]; }
                set { ARelays[RelayNum - 1] = value; }
            }

            public Int32 Count()
            {
                return ARelays.Length;
            }

            private bool[] ARelays;
        }

        public class UserPGMInfo
        {
            public UserPGMInfo()
            {
                UserList = new UInt64[PGM_KART_SAYISI];
                Clear();
            }

            public UInt64 this[int Index]
            {
                get { return UserList[Index]; }
                set { UserList[Index] = value; }
            }

            public void Clear()
            {
                AAccessCapacity = 0;

                for (int i = 0; i < PGM_KART_SAYISI; i++)
                    UserList[i] = 0;
            }

            public UInt32 AccessCapacity
            {
                get { return AAccessCapacity; }
                set { AAccessCapacity = value; }
            }

            public Int32 UserCapacity()
            {
                return UserList.Length;
            }

            private UInt32 AAccessCapacity;
            public UInt64[] UserList;
        }

        public class UserHourPeriod
        {
            public UserHourPeriod()
            {
                FBeginTime = new DateTime(1, 1, 1, 0, 0, 0, 0);
                FEndTime = new DateTime(1, 1, 1, 0, 0, 0, 0);
                FAccessLimit = 0;
            }

            public DateTime BeginTime
            {
                get { return FBeginTime; }
                set { FBeginTime = value; }
            }

            public DateTime EndTime
            {
                get { return FEndTime; }
                set { FEndTime = value; }
            }

            public UInt32 AccessLimit
            {
                get { return FAccessLimit; }
                set { FAccessLimit = value; }
            }

            public void SetValue(DateTime Begin_Time, DateTime End_Time, UInt32 Access_Limit)
            {
                FBeginTime = Begin_Time;
                FEndTime = End_Time;
                FAccessLimit = Access_Limit;
            }

            public override string ToString()
            {
                return (FBeginTime.ToString("HH:mm") + "~" + FEndTime.ToString("HH:mm") + " Access Limit: " + FAccessLimit.ToString());
            }

            private DateTime FBeginTime;
            private DateTime FEndTime;
            private UInt32 FAccessLimit;
        }

        public class UserTimeZones
        {
            public UserTimeZones()
            {
                FHourPeriods = new List<UserHourPeriod>();

                for (int i = 0; i < ZAMAN_KODU_PARCA_SAYISI; i++)
                    FHourPeriods.Add(new UserHourPeriod());
            }

            public UserHourPeriod this[Int32 Index]
            {
                get { return FHourPeriods[Index]; }
            }

            public UserHourPeriod Period1
            {
                get { return FHourPeriods[0]; }
            }

            public UserHourPeriod Period2
            {
                get { return FHourPeriods[1]; }
            }

            public UserHourPeriod Period3
            {
                get { return FHourPeriods[2]; }
            }

            public UserHourPeriod Period4
            {
                get { return FHourPeriods[3]; }
            }

            public UserHourPeriod Period5
            {
                get { return FHourPeriods[4]; }
            }

            public Int32 Count()
            {
                return FHourPeriods.Count;
            }

            public override string ToString()
            {
                string RetVal = "";

                for (int i = 0; i < ZAMAN_KODU_PARCA_SAYISI; i++)
                {
                    RetVal += FHourPeriods[i].ToString();
                    if (i < 4)
                        RetVal += ", ";
                }

                return RetVal;
            }

            private List<UserHourPeriod> FHourPeriods;
        }

        public class UserReader
        {
            public class DailyAccessNumber
            {
                public Int32 AccessLimit;
                public Int32 AccessCount;
            }

            public class AccessDays
            {
                public bool Monday = true; // Pazartesi. false= Geçiş Yasak, true= Geçebilir.
                public bool Tuesday = true; // Salı
                public bool Wednesday = true; // Çarşamba
                public bool Thursday = true; // Perşembe
                public bool Friday = true; // Cuma
                public bool Saturday = true; // Cumartesi
                public bool Sunday = true; // Pazar
                public bool Holidays = true; // Yıl içindeki tatil günleri gibi zamanlar özel günlerdir.

                override public string ToString()
                {
                    string RetVal = "";

                    if (Monday)
                        RetVal += ", Pazartesi";

                    if (Tuesday)
                        RetVal += ", Salı";

                    if (Wednesday)
                        RetVal += ", Çarsamba";

                    if (Thursday)
                        RetVal += ", Perşembe";

                    if (Friday)
                        RetVal += ", Cuma";

                    if (Saturday)
                        RetVal += ", Cumartesi";

                    if (Sunday)
                        RetVal += ", Pazar";

                    if (Holidays)
                        RetVal += ", Özel Günler";

                    if (RetVal != "")
                        RetVal = RetVal.Substring(2);

                    return RetVal;
                }
            }

            public enum ReaderDirection { None = 0, InPoint = 1, OutPoint = 2, FreeOutPoint = 3 }; // Okuyucunun yönü. 0= Yönsüz, 1= Giriş Kapısı, 2= Çıkış Kapısı, 3= Serbest Çıkış Kapısı.

            // İki adam kuralı kullanım şekli.
            public enum TwoManRuleUseType
            {
                DependentOnReader = 0, // Reader ayarlarına bağlı. Reader.Settings.Two_Man_Rule == true ise klasik iki adam kuralı uygulanır. false ise devre dışı kalır.
                TwoManRule = 1, // Klasik iki adam kuralını uygular. Kişi kartını okuttuktan sonra bir süre yetkili bir başka kişinin kart okutması beklenir. Okutursa röleyi çekip her ikisi içinde geçti log`u kaydeder.
                DependentOnOne = 2  // Birine bağımlı iki adam kuralını uygular. Kişi kartını okuttuktan sonra bir süre PGM kişilerinden birinin kart okutması beklenir. Okutursa röleyi çekip her ikisi içinde geçti log`u kaydeder. (Öğrenciler ve ziyaretçiler gibi. Öğrenciye veli kartları, ziyaretçiye ise görevli kartları PGM listesine eklenebilir)
            };

            public class UserReaderStatus
            {
                public UserReaderStatus()
                {
                    Reader_Direction = ReaderDirection.None; // Okuyucunun yönü. 0= Yönsüz, 1= Giriş Kapısı, 2= Çıkış Kapısı.
                    Anti_Passback_Status = AntiPassbackStatus.None; // Kullanıcının bu kapıdaki içeride/dışarıda durumu.
                    Disable = true; // Erişim Durumu. 0= Erişime açık, 1= Erişime kapalı.
                    Admin = false;  // Kapıya Erişim Şekli. 0= Normal, 1= Admin
                    Credit = false; // Kullanıcı için bu kapıda kontör kullanımını aktif eder. 0= Kontörsüz, 1= AKontörlü kullanım.
                    ParentGroup_Inside = false; // Kullanıcı parent gruptan giriş yapmış ise değeri true olur. Çıkış yaparsa değeri false olur.
                    Two_Man_Rule_Use_Type = TwoManRuleUseType.DependentOnReader;  // İki adam kuralını uygulama şekli.
                }

                public bool Enabled
                {
                    get { return !Disable; }
                    set { Disable = !value; }
                }

                public ReaderDirection Reader_Direction;        // Okuyucunun yönü. 0= Yönsüz, 1= Giriş Kapısı, 2= Çıkış Kapısı.
                public AntiPassbackStatus Anti_Passback_Status; // Kullanıcının bu kapıdaki içeride/dışarıda durumu.
                public bool Disable;                            // Erişim Durumu. 0= Erişime açık, 1= Erişime kapalı.
                public bool Admin;                              // Kapıya Erişim Şekli. 0= Normal, 1= Admin
                public bool Credit;                             // Kullanıcı için bu kapıda kontör kullanımını aktif eder. 0= Kontörsüz, 1= AKontörlü kullanım.
                public bool ParentGroup_Inside;                 // Kullanıcı parent gruptan giriş yapmış ise değeri true olur. Çıkış yaparsa değeri false olur.
                public TwoManRuleUseType Two_Man_Rule_Use_Type; // İki adam kuralını uygulama şekli. 
            }

            public class UserLifetime
            {
                public UserLifetime()
                {
                    BeginTime = new DateTime(1, 1, 1, 0, 0, 0);
                    EndTime = new DateTime(1, 1, 1, 0, 0, 0);
                    AccessLimit = 0;
                    AccessCount = 0;
                }

                // Okuyucu kullanım süresi bilgileri.
                public DateTime BeginTime; // Başlama zamanı.
                public DateTime EndTime; // Bitiş zamanı.
                public Int32 AccessLimit; // Kullanım süresi içindeki geçiş hakkı.
                public Int32 AccessCount; // Kullanım süresi içindeki geçiş sayısı.
            }

            public UserReader()
            {
                // Her gün için geçiş hakkı.
                Daily_Access_Number = new DailyAccessNumber
                {
                    AccessLimit = 0,
                    AccessCount = 0
                };

                // Okuyucunun kullandığı access grubu id.
                Access_Group = NO_ID;

                // Kullanıcının haftanın hangi günlerinde kapıdan geçebileceğini bildirir.
                Access_Days = new AccessDays();
                Access_Days.Monday = true; // Pazartesi. False= Geçiş Yasak, True= Geçebilir.
                Access_Days.Tuesday = true;
                Access_Days.Wednesday = true;
                Access_Days.Thursday = true;
                Access_Days.Friday = true;
                Access_Days.Saturday = true;
                Access_Days.Sunday = true;
                Access_Days.Holidays = true; // Yıl içindeki tatil günleri gibi zamanlar özel günlerdir.


                // Geçiş yaptıktan sonra buradaki süre kadar geçemez. Buradaki değer dakika olarak saklanır.
                Time_Limit = 0;

                // Okuyucudan en son yapılan geçiş zamanının saniye olarak değeri.
                Last_Access_Time = new DateTime(1, 1, 1, 0, 0, 0);

                Status = new UserReaderStatus();
                Lifetime = new UserLifetime();
                Relays = new UserRelays();
                Time_Zones = new UserTimeZones();
            }

            public DailyAccessNumber Daily_Access_Number;   // Günlük geçiş hakkı.
            public Int32 Access_Group;                      // Okuyucunun kullandığı access grubu id. Cihazın access grupları tablosundaki bir kayıta işaret eder.
            public AccessDays Access_Days;                  // Kullanıcının haftanın hangi günlerinde kapıdan geçebileceğini bildirir.
            public UInt32 Time_Limit;                       // Geçiş yaptıktan sonra buradaki süre kadar geçemez. Buradaki değer dakika olarak saklanır.
            public DateTime Last_Access_Time;               // Okuyucudan en son yapılan geçiş zamanının saniye olarak değeri.
            public UserReaderStatus Status;                 // Kullanıcının kapıyı nasıl kullanacağını belirtir.
            public UserLifetime Lifetime;                   // Okuyucu kullanım süresi bilgisi.
            public UserRelays Relays;                       // Okuyucudan geçiş yapılırken tetiklenecek röleler.
            public UserTimeZones Time_Zones;                // Okuyucuyu kullanım saatleri.
        }

        public class UserReaders
        {
            public UserReaders()
            {
                AReaders = new UserReader[MAX_READER_CAPACITY];
                for (int i = 0; i < MAX_READER_CAPACITY; i++)
                    AReaders[i] = new UserReader();
            }

            public UserReader this[int Index]
            {
                get { return AReaders[Index]; }
                set { AReaders[Index] = value; }
            }

            public UserReader Reader1
            {
                get { return AReaders[0]; }
                set { AReaders[0] = value; }
            }

            public UserReader Reader2
            {
                get { return AReaders[1]; }
                set { AReaders[1] = value; }
            }

            public UserReader Reader3
            {
                get { return AReaders[2]; }
                set { AReaders[2] = value; }
            }

            public UserReader Reader4
            {
                get { return AReaders[3]; }
                set { AReaders[3] = value; }
            }

            public UserReader Reader5
            {
                get { return AReaders[4]; }
                set { AReaders[4] = value; }
            }

            public UserReader Reader6
            {
                get { return AReaders[5]; }
                set { AReaders[5] = value; }
            }

            public UserReader Reader7
            {
                get { return AReaders[6]; }
                set { AReaders[6] = value; }
            }

            public UserReader Reader8
            {
                get { return AReaders[7]; }
                set { AReaders[7] = value; }
            }

            public UserReader Reader9
            {
                get { return AReaders[8]; }
                set { AReaders[8] = value; }
            }

            public UserReader Reader10
            {
                get { return AReaders[9]; }
                set { AReaders[9] = value; }
            }

            public UserReader Reader11
            {
                get { return AReaders[10]; }
                set { AReaders[10] = value; }
            }

            public UserReader Reader12
            {
                get { return AReaders[11]; }
                set { AReaders[11] = value; }
            }

            public UserReader Reader13
            {
                get { return AReaders[12]; }
                set { AReaders[12] = value; }
            }

            public UserReader Reader14
            {
                get { return AReaders[13]; }
                set { AReaders[13] = value; }
            }

            public UserReader Reader15
            {
                get { return AReaders[14]; }
                set { AReaders[14] = value; }
            }

            public UserReader Reader16
            {
                get { return AReaders[15]; }
                set { AReaders[15] = value; }
            }

            public Int32 Count()
            {
                return MAX_READER_CAPACITY;
            }

            private UserReader[] AReaders;
        }

        public class AccessInfo
        {
            public bool Forbidden;

            public AccessInfo()
            {
                Forbidden = false;
            }
        }

        public class Protect
        {
            public Protect()
            {
                Anti_Passback_Status = false;
                Credit = false;
                Daily_Access_Count = false;
                LifeTime_Access_Count = false;
                Last_Access_Time = false;
                // TimePeriod_Access_Info = false;
            }

            public bool Anti_Passback_Status;   // Anti_Passback durum bilgisini koru.
            public bool Credit;                 // Kontörü koru.
            public bool Daily_Access_Count;     // Günlük geçiş sayısını koru.
            public bool LifeTime_Access_Count;  // Okuyucuyu kullanma süresi içindeki geçiş sayısını koru.
            public bool Last_Access_Time;       // Son erişim zamanını koru.
            // public bool TimePeriod_Access_Info; // Zaman kodu geçiş bilgisini koru.
        }

        public class User
        {
            public User()
            {
                Protected = new Protect();
                Kart_Bilgisi = 0;
                Sicil_No = 0;
                ARelays = new UserRelays();
                Gecis_Durumu = new AccessInfo();
                Sifre = 0;
                Kontor = UserLib.User.NO_CREDIT_USAGE;
                Access_Grubu = NO_ID;
                APGMInfo = new UserPGMInfo();
                AReaders = new UserReaders();
                Kullanici_Adi = "";
            }

            public Int16 NoCreditUsage
            {
                get { return NO_CREDIT_USAGE; }
            }

            public UInt64 Card_Info // Kart no.
            {
                get { return Kart_Bilgisi; }

                set
                {
                    if (value > 0) // Kart id geçerli ise
                        Kart_Bilgisi = value;
                }
            }

            public string User_Name // Kullanıcı adı.
            {
                get { return Kullanici_Adi; }
                set { Kullanici_Adi = value; }
            }

            public AccessInfo Access_Info
            {
                get { return Gecis_Durumu; }
                set { Gecis_Durumu = value; }
            }

            public UInt64 Password // Kullanıcı şifresi.
            {
                get { return Sifre; }
                set { Sifre = value; }
            }

            public Int32 Credit // Kontör miktarı.
            {
                get { return Kontor; }
                set { Kontor = value; }
            }

            public Int32 Access_Group // Access gruplarına ait id`ler.
            {
                get { return Access_Grubu; }
                set { Access_Grubu = value; }
            }

            public Int64 Registration_Number
            {
                get { return Sicil_No; }
                set { Sicil_No = value; }
            }

            public UserRelays Relays
            {
                get { return ARelays; }
            }

            public UserPGMInfo PGM_Info
            {
                get { return APGMInfo; }
            }

            public UserReaders Readers
            {
                get { return AReaders; }
            }

            public string AntiPassbackStatusToString()
            {
                string RetVal = "";

                for (int i = 0; i < Readers.Count(); i++)
                {
                    RetVal += ", Reader" + (i + 1).ToString() + " (" + Readers[i].Status.Anti_Passback_Status.ToString() + ")";
                }

                if (RetVal.Length > 1)
                    RetVal = RetVal.Substring(2);

                return RetVal;
            }

            private void DeleteSeperator(ref string S)
            {
                S = S.Trim();
                if (S[S.Length - 1] == ',')
                    S = S.Substring(0, S.Length - 1);
            }

            private void BeginClass(ref string S, string Class_Name)
            {
                S += "\"" + Class_Name + "\":{";
            }

            private void EndClass(ref string S, string Seperator = ",")
            {
                DeleteSeperator(ref S);
                S += "}" + Seperator;
            }

            private void BeginArray(ref string S, string Array_Name)
            {
                S += "\"" + Array_Name + "\":[";
            }

            private void EndArray(ref string S, string Seperator = ",")
            {
                DeleteSeperator(ref S);
                S += "]" + Seperator;
            }

            private void AddString(ref string S, string Str)
            {
                S += "\"" + Str + "\"";
            }

            private void AddKey(ref string S, string Name, string Value, string Seperator = ",")
            {
                S += "\"" + Name + "\":\"" + Value + "\"" + Seperator;

                /*
                if (Name.Length > 0)
                    S += "\"" + Name + "\":";

                if (Value.Length > 0)
                    S += "\"" + Value + "\"";

                S += Seperator;
                */
            }

            public void AddKey(ref string S, string Name, bool Value, string Seperator = ",")
            {
                AddKey(ref S, Name, (Value ? "true" : "false"), Seperator);
            }

            public string ToJSON(Int32 Reader_Count = MAX_READER_CAPACITY)
            {
                string RetVal = "";
                bool B;

                if (Reader_Count > Readers.Count())
                    Reader_Count = Readers.Count();

                BeginClass(ref RetVal, "User");
                AddKey(ref RetVal, "Card_Id", Card_Info.ToString());
                AddKey(ref RetVal, "User_Name", User_Name);
                AddKey(ref RetVal, "Registration_Number", Registration_Number.ToString());
                AddKey(ref RetVal, "Password", Password.ToString());

                if (Access_Group > NO_ID)
                    AddKey(ref RetVal, "Access_Group", Access_Group.ToString());

                if (Credit > NO_CREDIT_USAGE)
                    AddKey(ref RetVal, "Credit", Credit.ToString());
                // else AddKey(ref RetVal, "Credit", "none");


                /* Access_Info */
                BeginClass(ref RetVal, "Access_Info");
                AddKey(ref RetVal, "Forbidden", Access_Info.Forbidden, "");
                EndClass(ref RetVal);   // } Access_Info


                /* Relays */
                B = false;
                for (int RNo = 1; RNo < Relays.Count(); RNo++)
                {
                    if (Relays[RNo])
                    {
                        B = true;
                        break;
                    }
                }
                if (B) // Tetiklenecek röle varsa
                {
                    BeginClass(ref RetVal, "Relays");
                    for (int RNo = 1; RNo <= Relays.Count(); RNo++)
                    {
                        if (Relays[RNo])
                            AddKey(ref RetVal, "Relay" + RNo.ToString(), Relays[RNo].ToString());
                    }
                    EndClass(ref RetVal);   // } Relays
                }


                /* PGM_Info */
                B = false;
                for (int i = 0; i < PGM_Info.UserCapacity(); i++)
                {
                    if (PGM_Info.UserList[i] > 0 && PGM_Info.UserList[i] < WebAccess.Empty_Card) // Geçerli bir kart ise
                    {
                        B = true;
                        break;
                    }
                }
                if (B) // Geçerli kart varsa
                {
                    BeginClass(ref RetVal, "PGM_Info");
                    AddKey(ref RetVal, "AccessCapacity", PGM_Info.AccessCapacity.ToString());
                    BeginArray(ref RetVal, "UserList");
                    for (int i = 0; i < PGM_Info.UserCapacity(); i++)
                    {
                        if (PGM_Info.UserList[i] > 0 && PGM_Info.UserList[i] < WebAccess.Empty_Card) // Geçerli bir kart ise
                            RetVal += PGM_Info.UserList[i].ToString() + ",";
                    }
                    EndArray(ref RetVal);   // ] UserList
                    EndClass(ref RetVal);   // } PGM_Info
                }


                /* Readers */
                B = false;
                for (int RNo = 0; RNo < Reader_Count; RNo++)
                {
                    if (Readers[RNo].Status.Disable == false) // Okuyucu etkin ise
                    {
                        B = true;
                        break;
                    }
                }
                if (B) // Geçerli okuyucu varsa
                {
                    BeginClass(ref RetVal, "Readers");
                    for (int RNo = 0; RNo < Reader_Count; RNo++)
                    {
                        BeginClass(ref RetVal, "Reader" + (RNo + 1).ToString());

                        if (Readers[RNo].Status.Disable == false) // Okuyucu etkin ise
                        {
                            /* Status */
                            BeginClass(ref RetVal, "Status");
                            AddKey(ref RetVal, "Disable", "false");
                            AddKey(ref RetVal, "ReaderDirection", Readers[RNo].Status.Reader_Direction.ToString());
                            AddKey(ref RetVal, "Admin", Readers[RNo].Status.Admin);
                            AddKey(ref RetVal, "ParentGroup_Inside", Readers[RNo].Status.ParentGroup_Inside);
                            AddKey(ref RetVal, "Two_Man_Rule_Use_Type", Readers[RNo].Status.Two_Man_Rule_Use_Type.ToString());

                            if (Protected.Anti_Passback_Status == false) //  Anti_Passback durum bilgisi korunmuyorsa.
                                AddKey(ref RetVal, "AntiPassbackStatus", Readers[RNo].Status.Anti_Passback_Status.ToString());

                            if (Protected.Credit == false) //  Kontör bilgisi korunmuyorsa.
                                AddKey(ref RetVal, "Credit", Readers[RNo].Status.Credit);

                            EndClass(ref RetVal);


                            /* Time_Zones */
                            B = false;
                            for (int i = 0; i < Readers[RNo].Time_Zones.Count(); i++)
                            {
                                if (Readers[RNo].Time_Zones[i].BeginTime != Readers[RNo].Time_Zones[i].EndTime) // Geçerli bir zaman ise
                                {
                                    B = true;
                                    break;
                                }
                            }
                            if (B) // Geçerli zaman varsa
                            {
                                BeginArray(ref RetVal, "Time_Zones");
                                for (int i = 0; i < Readers[RNo].Time_Zones.Count(); i++)
                                {
                                    if (Readers[RNo].Time_Zones[i].BeginTime != Readers[RNo].Time_Zones[i].EndTime) // Geçerli bir zaman ise
                                    {
                                        AddString(ref RetVal,
                                                  Readers[RNo].Time_Zones[i].BeginTime.Hour.ToString() + ":" + Readers[RNo].Time_Zones[i].BeginTime.Minute.ToString() + "~" +
                                                  Readers[RNo].Time_Zones[i].EndTime.Hour.ToString() + ":" + Readers[RNo].Time_Zones[i].EndTime.Minute.ToString() + "-" +
                                                  Readers[RNo].Time_Zones[i].AccessLimit.ToString());

                                        RetVal += ",";
                                    }
                                }
                                EndArray(ref RetVal);   // ] Time_Zones
                            }

                            /* Access_Group */
                            if (Readers[RNo].Access_Group > NO_ID)
                                AddKey(ref RetVal, "Access_Group", Readers[RNo].Access_Group.ToString());

                            /* Time_Limit */
                            if (Readers[RNo].Time_Limit > 0)
                                AddKey(ref RetVal, "Time_Limit", Readers[RNo].Time_Limit.ToString());

                            /* Last_Access_Time */
                            if (Protected.Last_Access_Time == false) // Son erişim zamanını korunmuyorsa.
                                AddKey(ref RetVal, "Last_Access_Time",
                                       Readers[RNo].Last_Access_Time.Year.ToString() + "-" +
                                       Readers[RNo].Last_Access_Time.Month.ToString() + "-" +
                                       Readers[RNo].Last_Access_Time.Day.ToString() + " " +
                                       Readers[RNo].Last_Access_Time.Hour.ToString() + ":" +
                                       Readers[RNo].Last_Access_Time.Minute.ToString() + ":" +
                                       Readers[RNo].Last_Access_Time.Second.ToString()
                                    );

                            /* Lifetime */
                            if (Readers[RNo].Lifetime.BeginTime != Readers[RNo].Lifetime.EndTime)
                            {
                                BeginClass(ref RetVal, "Lifetime");

                                AddKey(ref RetVal, "BeginTime",
                                       Readers[RNo].Lifetime.BeginTime.Year.ToString() + "-" +
                                       Readers[RNo].Lifetime.BeginTime.Month.ToString() + "-" +
                                       Readers[RNo].Lifetime.BeginTime.Day.ToString() + " " +
                                       Readers[RNo].Lifetime.BeginTime.Hour.ToString() + ":" +
                                       Readers[RNo].Lifetime.BeginTime.Minute.ToString() + ":00"
                                    );

                                AddKey(ref RetVal, "EndTime",
                                       Readers[RNo].Lifetime.EndTime.Year.ToString() + "-" +
                                       Readers[RNo].Lifetime.EndTime.Month.ToString() + "-" +
                                       Readers[RNo].Lifetime.EndTime.Day.ToString() + " " +
                                       Readers[RNo].Lifetime.EndTime.Hour.ToString() + ":" +
                                       Readers[RNo].Lifetime.EndTime.Minute.ToString() + ":00"
                                    );

                                AddKey(ref RetVal, "AccessLimit", Readers[RNo].Lifetime.AccessLimit.ToString());

                                if (Protected.LifeTime_Access_Count == false) // Okuyucuyu kullanma süresi içindeki geçiş sayısı korunmuyorsa.
                                    AddKey(ref RetVal, "AccessCount", Readers[RNo].Lifetime.AccessCount.ToString());

                                EndClass(ref RetVal);
                            }


                            /* Daily_Access_Number */
                            if (Readers[RNo].Daily_Access_Number.AccessLimit > 0)
                            {
                                BeginClass(ref RetVal, "Daily_Access_Number");
                                AddKey(ref RetVal, "AccessLimit", Readers[RNo].Daily_Access_Number.AccessLimit.ToString());

                                if (Protected.Daily_Access_Count == false) // Günlük geçiş sayısı korunmuyorsa.
                                    AddKey(ref RetVal, "AccessCount", Readers[RNo].Daily_Access_Number.AccessCount.ToString());

                                EndClass(ref RetVal);
                            }


                            /* Access_Days */
                            if (!Readers[RNo].Access_Days.Monday || !Readers[RNo].Access_Days.Tuesday || !Readers[RNo].Access_Days.Wednesday || !Readers[RNo].Access_Days.Thursday ||
                                !Readers[RNo].Access_Days.Friday || !Readers[RNo].Access_Days.Saturday || !Readers[RNo].Access_Days.Sunday)
                            {
                                BeginClass(ref RetVal, "Access_Days");

                                if (!Readers[RNo].Access_Days.Monday)
                                    AddKey(ref RetVal, "Monday", "false");

                                if (!Readers[RNo].Access_Days.Tuesday)
                                    AddKey(ref RetVal, "Tuesday", "false");

                                if (!Readers[RNo].Access_Days.Wednesday)
                                    AddKey(ref RetVal, "Wednesday", "false");

                                if (!Readers[RNo].Access_Days.Thursday)
                                    AddKey(ref RetVal, "Thursday", "false");

                                if (!Readers[RNo].Access_Days.Friday)
                                    AddKey(ref RetVal, "Friday", "false");

                                if (!Readers[RNo].Access_Days.Saturday)
                                    AddKey(ref RetVal, "Saturday", "false");

                                if (!Readers[RNo].Access_Days.Sunday)
                                    AddKey(ref RetVal, "Sunday", "false");

                                EndClass(ref RetVal);
                            }


                            /* Relays */
                            B = false;
                            for (int RL_No = 1; RL_No <= Readers[RNo].Relays.Count(); RL_No++)
                            {
                                if (Readers[RNo].Relays[RL_No]) // Röle tetiklenecekse
                                {
                                    B = true;
                                    break;
                                }
                            }
                            if (B) // Tetiklenecek röle varsa
                            {
                                BeginClass(ref RetVal, "Relays");

                                for (int RL_No = 1; RL_No <= Readers[RNo].Relays.Count(); RL_No++)
                                    if (Readers[RNo].Relays[RL_No])
                                        AddKey(ref RetVal, "Relay" + RL_No.ToString(), "true");

                                EndClass(ref RetVal);
                            }
                        }
                        else // Okuyucu devre dışı.
                        {
                            BeginClass(ref RetVal, "Status");
                            AddKey(ref RetVal, "Disable", "true");
                            EndClass(ref RetVal);
                        }

                        EndClass(ref RetVal);   // } Reader
                    }
                    EndClass(ref RetVal);   // } Readers
                }

                EndClass(ref RetVal);  // } User

                return RetVal;
            }


            public const Int16 NO_CREDIT_USAGE = -1;
            public Protect Protected;

            private UInt64 Kart_Bilgisi;
            private Int64 Sicil_No;
            private UserRelays ARelays;
            private AccessInfo Gecis_Durumu;
            private UInt64 Sifre;
            private Int32 Kontor;
            private Int32 Access_Grubu;
            private UserPGMInfo APGMInfo;
            private UserReaders AReaders;
            private string Kullanici_Adi;
        }
    }
}

--- CS Dosya Sonu: WebAccess\WebAccess\WebAccess_Lib\WebAccess_UserLib.cs ---

==============================================

--- CS Dosya Başlangıcı: WebAccess\WebAccess\WebAccess_Lib\WebAccess.cs ---

/*
 * Author: İstanbul Yazılım Elektronik Sanayi
 */

// #define USE_CRYPTO_DLL

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Web;
using System.Runtime.InteropServices;
using System.Collections;
using Microsoft.AspNetCore.Mvc.Rendering;
using System.Reflection;
using System.Diagnostics.Metrics;
using System.Numerics;
using System.Drawing;
using System.Text.Unicode;
using System.Text;

namespace ASPNetCore_WebAccess
{
    /* WebAccess yönetici sınıfı. */
    public class WebAccess
    {
        private string Response_Buffer = "";

        public WebAccess(string Password, bool Crypto_Enabled, HttpContext Context)
        {
            byte[]? Buf = ToBytes(Password);

#if USE_CRYPTO_DLL
            UInt64 P64 = 0;
            UInt64 Tmp = 0;

            Get_Password(Password, "", out P64, out Tmp);
            this.Password = P64; // Önceden cihaza verilmiş olan şifre.
            this.Crypto_Enable = Crypto_Enabled; // Bu alan true ise cihaza gönderilecek olan veriler şifrelenir.
#endif

            this.Context = new ASPCoreContext(Context);
            Params = new HttpParams();

            /* Cihazdan gelen verileri al. */

            // URL`deki "&" ile bir birinden ayrılmış olan kullanıcı parametrelerini al.
            Split_Params(null, false, Crypto_Enabled, true, false);


            if (this.Context.HttpMethod.ToUpper() == "POST") // POST Metoduyla işlem yapılıyorsa
            {
                if (this.Context.ParamExists("b_urlencoded")) // POST metodu ile kriptolu www_form_urlencoded işlemi yapılıyor ise
                {
                    byte[]? cb = new byte[0];
                    cb = ToBytes(this.Context.Param("b_urlencoded"));
                    Split_Params(cb, true, Crypto_Enabled, false, true);  // cb kriptolu olsa bile üst satırda kriptosu çözülmüş olduğundan kripto parametresini False geçiyoruz.
                }
                else
                if (this.Context.ParamExists("Session_Id")) // POST metodu ile kriptosuz www_form_urlencoded işlemi yapılıyor ise
                {
                    Split_Params(null, false, Crypto_Enabled, false, true); // URL`deki "&" ile bir birinden ayrılmış olan cihaz parametrelerini al.
                }
                else // Form-Data kullanılıyor.
                {
                    if (this.Context.ParamExists("b")) // Tüm parametreler tek bir form-data parametresi içinde gönderilmiş ise
                    {
                        byte[]? cb = new byte[0];
                        cb = ToBytes(Get_Form_Value(this.Context.Param("b")));
                        Split_Params(cb, true, false, false, true);  // cb kriptolu olsa bile üst satırda kriptosu çözülmüş olduğundan kripto parametresini False geçiyoruz.
                    }
                    else // Her parametre kendi ismiyle gönderilmiş.
                    if (this.Context.ParamExists("SA")) // Tüm parametreler tek bir form-data parametresi içinde gönderilmiş ise
                    {
                        Params.Session_Id = Convert.ToUInt64(Get_Form_Value(this.Context.Param("SA")));                           // Session_Id - Oturum id`si. Sunucu ile başlatılan her işlemde bir oturum id`si bulunur.
                        Params.Message_Type = (HttpMessageType)Convert.ToUInt32(Get_Form_Value(this.Context.Param("MT")));        // Message_Type - Mesaj türü. Sunucuya gönderilen her pakitn bir mesaj türü vardır.
                        Params.Completed_Type = (HttpCompletedType)Convert.ToUInt32(Get_Form_Value(this.Context.Param("CT")));    // Completed_Type - Completed komutunda kullanılır. Tamamlanan işlemin türünü bildirir.
                        Params.Process_Id = Convert.ToUInt64(Get_Form_Value(this.Context.Param("PI")));                           // Process_Id - Sunucu tarafından oluşturulan bir kod`dur. Completed mesajı ile yapılan işlemin durumu bildirilirken tekrar sunucuya gönderilir.
                        Params.SoftVer = Convert.ToUInt64(Get_Form_Value(this.Context.Param("SV")));                              // Cihazdaki yazılımın versiyonu.
                        Params.Multi_User = (Params.SoftVer > 1083);                                                              // Bu alan true ise cihaza toplu şekilde kullanıcı gönderilebilir.
                        Params.Device_Id = Convert.ToUInt32(Get_Form_Value(this.Context.Param("DI")));                            // Device_Id - Cihaz id`si. Sunucunun hangi cihaz ile çalıştığını anlaması için cihaz id gönderilir.
                        Params.Reader_Num = Convert.ToInt32(Get_Form_Value(this.Context.Param("RN")));                            // Reader_Num - İşlem yapılan okuyucu nosu.
                        Params.Wiegand_Num = Convert.ToInt32(Get_Form_Value(this.Context.Param("WN")));                           // İşlem yapılan okuyucunun, işlem yapılan wiegand nosu.
                        Params.Reader_Count = Convert.ToInt32(Get_Form_Value(this.Context.Param("RC")));                          // Reader_Count - Cihazın okuyucu portu sayısı.
                        Params.Card_Id = Convert.ToUInt64(Get_Form_Value(this.Context.Param("CI")));                              // Card_Id - Okutulan kartın bilgisi.
                        Params.Password = Convert.ToInt64(Get_Form_Value(this.Context.Param("PW")));                              // Password - Kullanıcının girmiş olduğu şifre.
                        Params.Registration_Number = Convert.ToInt64(Get_Form_Value(this.Context.Param("RG")));                   // Registration_Number - İşlem yapan kullanıcının kayıt/sicil nosu.
                        Params.Written_User_Count = Convert.ToUInt64(Get_Form_Value(this.Context.Param("WU")));                   // Written_User_Count - "User" komutu ile cihaza yazılan kullanıcı sayısı.
                        Params.Written_User_Forbidden_Count = Convert.ToUInt64(Get_Form_Value(this.Context.Param("FR")));         // Written_User_Forbidden_Count - "User_Forbidden" komutu ile cihaza yazılan kullanıcı sayısı.
                        Params.Written_User_Unforbidden_Count = Convert.ToUInt64(Get_Form_Value(this.Context.Param("UF")));       // Written_User_Unforbidden_Count - "User_Unforbidden" komutu ile cihaza yazılan kullanıcı sayısı.
                        Params.User_Count = Convert.ToUInt64(Get_Form_Value(this.Context.Param("UC")));                           // User_Count - Cihazdaki kullanıcı sayısı.
                        Params.Log_Count = Convert.ToUInt64(Get_Form_Value(this.Context.Param("LC")));                            // Log_Count - Cihazdaki log sayısı.
                        Params.Log_Event = (LogEvent)Convert.ToUInt32(Get_Form_Value(this.Context.Param("LE")));                  // Log_Event - Log türü.
                        Params.Log_Time = Convert_To_LogTime(Get_Form_Value(this.Context.Param("LT")));                           // Log_Time - İşlem zamanı.
                        Params.Tag_Type = (RFTagType)Convert.ToInt32(Get_Form_Value(this.Context.Param("TT")));                   // Tag_Type - Okutulan kartın türü. DESFire veya Mifare klasik..vb.
                        Params.Data = HttpUtility.UrlDecodeToBytes(Get_Form_Value(this.Context.Param("DT")));                     // Data - Gelen veri.
                        Params.Data_Count = Params.Data != null ? Params.Data.Length : 0;                                         // Data_Count - Data parametresi ile gelen verinin uzunluğu.
                        // Params.Data = ToBytes(HttpUtility.UrlDecode(Get_Form_Value(this.Context.Param("DT"))));                // Data - Gelen veri.
                        // Params.Data_Count = Convert.ToInt32(Get_Form_Value(this.Context.Param("DC")));                         // Data_Count - Data parametresi ile gelen verinin uzunluğu.


                        // Cihazın kullandığı ekran modeli.
                        Params.Screen.Model = (ScreenModel)Convert.ToUInt32(Get_Form_Value(this.Context.Param("SM")));            // Screen_Model - Cihazın kullandığı ekran modeli.
                        Params.Screen.Width = Convert.ToUInt32(Get_Form_Value(this.Context.Param("SW")));                         // Screen_Width - Ekran genişliği.
                        Params.Screen.Height = Convert.ToUInt32(Get_Form_Value(this.Context.Param("SH")));                        // Screen_Height - Ekran yüksekliği.

                        // Grup erişim bölgeleri.
                        Params.Access_Zones.Decode(Get_Form_Value(this.Context.Param("GA")));                                     // Group_Access_Zones

                        // Sensörlerin şu an ki sinyal verileri.
                        Params.Sensors.Unpack(Convert.ToUInt64(Get_Form_Value(this.Context.Param("SN"))), Params.Reader_Count);   // Sensors              - Sensörlerdeki sinyaller.
                    }
                }
            }
            else // GET metoduyla işlem yapılıyor.
            {
                if (this.Context.ParamExists("b")) // GET metodu ile kriptolu işlem yapılıyorsa
                {
                    // URL`deki "b" parametresi ile gelen kriptolu veriyi açarak "&" ile bir birinden ayrılmış olan cihaz parametrelerini al.
                    string s = this.Context.Param("b");

                    if (s != null)
                    {
                        byte[]? cb = new byte[0];
                        cb = ToBytes(s);

                        Split_Params(cb, true, Crypto_Enabled, false, true);
                    }
                }
                else // GET metodu ile kriptosuz işlem yapılıyor.
                if (this.Context.ParamExists("Session_Id")) // GET metodu ile kriptosuz işlem yapılıyorsa
                {
                    // URL`deki "&" ile bir birinden ayrılmış olan cihaz parametrelerini al.
                    Split_Params(null, false, Crypto_Enabled, false, true); // URL`deki "&" ile bir birinden ayrılmış olan cihaz parametrelerini al.
                }
            }


            /* TEST AMAÇLI KULLANIM
            Web_Context.Response_Write("Session_Id: "); Web_Context.Response_Write(Params.Session_Id.ToString());
            Web_Context.Response_Write(", Device_Id: "); Web_Context.Response_Write(Params.Device_Id.ToString());

            for (int i = 0; i < Params.User_Params.Count; i++)
            {
                Web_Context.Response_Write(Params.User_Params.GetKey(i));
                Web_Context.Response_Write(": ");
                Web_Context.Response_Write(Params.User_Params.Value(i));
                Web_Context.Response_Write(", ");
            }


            Web_Context.Response_Write(Params.Session_Id.ToString() + "   -   Sensörlerdeki Sinyaller<br>");
            Web_Context.Response_Write("--------------------------------------------------------------<br>");
            Web_Context.Response_Write("<br>");
            Web_Context.Response_Write("--------------------<br>");
            Web_Context.Response_Write("Lokal Sensörler<br>");
            Web_Context.Response_Write("--------------------<br>");
            Web_Context.Response_Write("  -> EmergencyExit     = " + Params.Sensors.EmergencyExit.ToString() + "<br>");
            Web_Context.Response_Write("  -> Fire              = " + Params.Sensors.Fire.ToString() + "<br>");
            Web_Context.Response_Write("  -> Alarm             = " + Params.Sensors.Alarm.ToString() + "<br>");
            Web_Context.Response_Write("  -> TamperSwitch      = " + Params.Sensors.TamperSwitch.ToString() + "<br>");
            Web_Context.Response_Write("  -> ExtraSensor1      = " + Params.Sensors.ExtraSensor1.ToString() + "<br>");
            Web_Context.Response_Write("  -> ExtraSensor2      = " + Params.Sensors.ExtraSensor2.ToString() + "<br>");
            Web_Context.Response_Write("<br>");
            Web_Context.Response_Write("--------------------<br>");
            Web_Context.Response_Write("Okuyucu Sensörleri<br>");
            Web_Context.Response_Write("--------------------<br>");

            for (int RNo = 0; RNo < Params.Reader_Count; RNo++)
            {
                Web_Context.Response_Write("  -> Reader" + (RNo + 1).ToString() + "  (Sensor1: " + Params.Sensors[RNo].Sensor1.ToString() + ", Sensör2: " + Params.Sensors[RNo].Sensor2.ToString() + ", Exit: " + Params.Sensors[RNo].Exit.ToString() + ")<br>");
            }

            Web_Context.Response_Write("<br>");
            // */
        }

        private string Get_Form_Value(string Value)
        {
#if USE_CRYPTO_DLL
            if (this.Crypto_Enable)
            {
                byte[]? cb = new byte[0];
                // cb = ToBytes(ToHex(ToBytes(Value)));  --> Eskisi gibi hex olarak göndermek istenirse buradaki kod açılmalı.
                cb = ToBytes(Value);
                Decrypto(Password, ref cb);
                return ToString(cb);
            }
            else
#endif
                return Value;
        }

        private void Split_Params(byte[]? cb, bool Do_Split, bool Crypto_Enabled, bool Get_User_Params, bool Get_Device_Params)
        {
            HttpParameters Req_Params = new HttpParameters();

            if (Do_Split)
            {
                Int32 i;
                string pn, pv;
                string[] q;
                string[] pa;

#if USE_CRYPTO_DLL
                if (Crypto_Enabled)
                    Decrypto(Password, ref cb);
#endif

                Req_Params.Clear();
                q = ToString(cb).Split('&');
                for (i = 0; i < q.Length; i++)
                {
                    pv = "";
                    pa = q[i].Split('=');
                    if (pa.Length > 0)
                    {
                        pn = pa[0];

                        if (pa.Length > 1)
                            pv = pa[1];

                        if (pn.Trim().Length > 0)
                            Req_Params.Add(pn, pv);
                    }
                }
            }
            else
                Req_Params.Assign(this.Context.Params());

            // Kullanıcı parametrelerini al.
            if (Get_User_Params)
            {
                string PrmName;

                List<string> PrmList = this.Context.Context.Request.Query.Keys.ToList();

                for (int i = 0; i < PrmList.Count; i++)
                {
                    PrmName = PrmList[i];
                    if (PrmName != null)
                        if (Params.User_Params.IndexOfName(PrmName) < 0) // Sıradaki parametre kullanıcı listesine daha önce eklenmemiş ise
                            if (Params.User_Params.Is_Device_Param(PrmName) == false) // Sıradaki parametre kullanıcı parametresi ise
                                Params.User_Params.Add(PrmName, this.Context.Param(PrmName)); // Ekle.
                }
            }

            // Cihaz parametrelerini al.
            if (Get_Device_Params) // Kullanıcı parametreleri dışındaki cihaz parametreleri de alınacak ise
            {
                Params.Session_Id = Convert.ToUInt64(Req_Params["Session_Id"]);                                     // Oturum id`si. Sunucu ile başlatılan her işlemde bir oturum id`si bulunur.
                Params.Message_Type = (HttpMessageType)Convert.ToUInt32(Req_Params["Message_Type"]);                // Mesaj türü. Sunucuya gönderilen her pakitn bir mesaj türü vardır.
                Params.Completed_Type = (HttpCompletedType)Convert.ToUInt32(Req_Params["Completed_Type"]);          // Completed komutunda kullanılır. Tamamlanan işlemin türünü bildirir.
                Params.Process_Id = Convert.ToUInt64(Req_Params["Process_Id"]);                                     // Sunucu tarafından oluşturulan bir kod`dur. Completed mesajı ile yapılan işlemin durumu bildirilirken tekrar sunucuya gönderilir.
                Params.SoftVer = Convert.ToUInt64(Req_Params["SoftVer"]);                                           // Cihazdaki yazılımın versiyonu.
                Params.Multi_User = (Params.SoftVer > 1083);                                                        // Bu alan true ise cihaza toplu şekilde kullanıcı gönderilebilir.
                Params.Device_Id = Convert.ToUInt32(Req_Params["Device_Id"]);                                       // Cihaz id`si. Sunucunun hangi cihaz ile çalıştığını anlaması için cihaz id gönderilir.
                Params.Reader_Num = Convert.ToInt32(Req_Params["Reader_Num"]);                                      // İşlem yapılan okuyucu nosu.
                Params.Wiegand_Num = Convert.ToInt32(Req_Params["Wiegand_Num"]);                                    // İşlem yapılan okuyucunun, işlem yapılan wiegand nosu.
                Params.Reader_Count = Convert.ToInt32(Req_Params["Reader_Count"]);                                  // Cihazın okuyucu portu sayısı.

                // Cihazın kullandığı ekran modeli.
                Params.Screen.Model = (ScreenModel)Convert.ToUInt32(Req_Params["Screen_Model"]);                    // Cihazın kullandığı ekran modeli.
                Params.Screen.Width = Convert.ToUInt32(Req_Params["Screen_Width"]);                                 // Ekran genişliği.
                Params.Screen.Height = Convert.ToUInt32(Req_Params["Screen_Height"]);                               // Ekran yüksekliği.

                Params.Card_Id = Convert.ToUInt64(Req_Params["Card_Id"]);                                           // Okutulan kartın bilgisi.
                Params.Password = Convert.ToInt64(Req_Params["Password"]);                                          // Kullanıcının girmiş olduğu şifre.
                Params.Registration_Number = Convert.ToInt64(Req_Params["Registration_Number"]);                    // İşlem yapan kullanıcının kayıt/sicil nosu.
                Params.Written_User_Count = Convert.ToUInt64(Req_Params["Written_User_Count"]);                     // "User" komutu ile cihaza yazılan kullanıcı sayısı.
                Params.Written_User_Forbidden_Count = Convert.ToUInt64(Req_Params["Written_User_Forbidden"]);       // "User_Forbidden" komutu ile cihaza yazılan kullanıcı sayısı.
                Params.Written_User_Unforbidden_Count = Convert.ToUInt64(Req_Params["Written_User_Unforbidden"]);   // "User_Unforbidden" komutu ile cihaza yazılan kullanıcı sayısı.
                Params.User_Count = Convert.ToUInt64(Req_Params["User_Count"]);                                     // Cihazdaki kullanıcı sayısı.
                Params.Log_Count = Convert.ToUInt64(Req_Params["Log_Count"]);                                       // Cihazdaki log sayısı.
                Params.Log_Event = (LogEvent)Convert.ToUInt32(Req_Params["Log_Event"]);                             // Log türü.
                Params.Log_Time = Convert_To_LogTime(Req_Params["Log_Time"]);                                       // İşlem zamanı.
                Params.Tag_Type = (RFTagType)Convert.ToInt32(Req_Params["Tag_Type"]);                               // Okutulan kartın türü. DESFire veya Mifare klasik..vb.
                Params.Data = HttpUtility.UrlDecodeToBytes(Req_Params["Data"]);                                     // Gelen veri.
                Params.Data_Count = Params.Data != null ? Params.Data.Length : 0;                                   // Data parametresi ile gelen verinin uzunluğu.
                // Params.Data = ToBytes(HttpUtility.UrlDecode(Req_Params["Data"]));                                // Gelen veri.
                // Params.Data_Count = Convert.ToInt32(Req_Params["Data_Count"]);                                   // Data parametresi ile gelen verinin uzunluğu.

                /*
                byte[]? B = ToBytes(Req_Params["Data"]);
                if (B != null)
                    Console.WriteLine("-> Data: " + Encoding.UTF8.GetString(B));
                // */

                // Grup erişim bölgeleri.
                Params.Access_Zones.Decode(Req_Params["Group_Access_Zones"]);

                // Sensörlerin şu an ki sinyal verileri.
                Params.Sensors.Unpack(Convert.ToUInt64(Req_Params["Sensors"]), Params.Reader_Count);
            }
        }

        public string GetResponse()
        {
            // Yanıt verisini ayarlayıp döndürür.
            if (Is_Session_Valid(Params.Session_Id)) // Session id geçerli ise
            {
                // Gelen mesajın oturum id`si olduğu gibi döndürülür. <Session_Id> komutunun kullanılması zorunludur.

                Response_Buffer = Response_Buffer.Trim();
                if (Response_Buffer.Length > 0)
                {
                    if (Response_Buffer[0] != '{')
                        Response_Buffer = "{" + Response_Buffer;

                    if (Response_Buffer[Response_Buffer.Length - 1] != '}')
                    {
                        if (Response_Buffer[Response_Buffer.Length - 1] == ',')
                            Response_Buffer = Response_Buffer.Substring(0, Response_Buffer.Length - 1);

                        Response_Buffer += "}";
                    }
                }

                string RetVal = "<Session_Id>" + Params.Session_Id.ToString() + "</>" + Response_Buffer;

#if USE_CRYPTO_DLL
                if (Crypto_Enable == true)
                {
                    byte[] Dst_Buffer = new byte[0];
                    WebAccess.Crypto(Password, ToBytes(RetVal), ref Dst_Buffer);
                    return ToHex(Dst_Buffer);
                }
                else
#endif
                {
                    return RetVal;
                }
            }
            else
                return "";
        }

        public void Send(string Value)
        {
            Value = Value.Trim();
            Response_Buffer = Response_Buffer.Trim();
            if (Response_Buffer.Length > 0)
                if (Value.Length > 0 && Value[0] != ',')
                {
                    char S = Response_Buffer[Response_Buffer.Length - 1];
                    if (S != '>' && S != '{' && S != ',')
                        Response_Buffer += ',';
                }

            Response_Buffer += Value;
        }
        
        public void SendCommand(string Key, string Value)
        {
            Response_Buffer = Response_Buffer.Trim();
            if (Response_Buffer.Length > 0)
                if (Response_Buffer[Response_Buffer.Length - 1] != ',')
                    Response_Buffer += ',';

            Response_Buffer += '"' + Key.Trim() + '"' + ':' + '"' + Value + '"';
        }
        
        public void SendCommand(string Key, UInt64 Value)
        {
            SendCommand(Key, Value.ToString());
        }

        public void SendCommand(string Key, Int64 Value)
        {
            SendCommand(Key, Value.ToString());
        }

        public void SendCommand(string Key, UInt32 Value)
        {
            SendCommand(Key, Value.ToString());
        }

        public void SendCommand(string Key, Int32 Value)
        {
            SendCommand(Key, Value.ToString());
        }

        public void SendCommand(string Key, bool Value)
        {
            SendCommand(Key, (Value ? "true" : "false"));
        }

        public void SendCommand(string Key, DateTime Value)
        {
            //                                                       YYYY-MM-DD HR:MN:SC
            // Cihaz zamanı formatı şu şekilde  ->  "Device_Time" : "2023-04-02 14:34:56"
            string Device_Time = Value.Year.ToString() + '-' + Value.Month.ToString() + '-' + Value.Day.ToString() + ' ' +
                                 Value.Hour.ToString() + ':' + Value.Minute.ToString() + ':' + Value.Second.ToString();

            SendCommand(Key, Device_Time);
        }

        public void SendArray(string Key, string Value)
        {
            Response_Buffer = Response_Buffer.Trim();
            if (Response_Buffer.Length > 0)
                if (Response_Buffer[Response_Buffer.Length - 1] != ',')
                    Response_Buffer += ',';

            Response_Buffer += '"' + Key.Trim() + '"' + ':' + '[' + Value + ']';
        }

        public void Send_Process_Id(UInt64 Process_Id)
        {
            SendCommand("Process_Id", Process_Id);
        }

        public void Send_I_Am_Here_Duration(UInt32 Duration)
        {
            SendCommand("I_Am_Here_Duration", Duration.ToString());
        }

        public void Send_Device_Time(DateTime Value)
        {
            //                                                       YYYY-MM-DD HR:MN:SC
            // Cihaz zamanı formatı şu şekilde  ->  "Device_Time" : "2023-04-02 14:34:56"
            string Device_Time = Value.Year.ToString() + '-' + Value.Month.ToString() + '-' + Value.Day.ToString() + ' ' +
                                 Value.Hour.ToString() + ':' + Value.Minute.ToString() + ':' + Value.Second.ToString();

            SendCommand("Device_Time", Device_Time);
        }

        public void Session_Id_Mode(WebSessionIdMode Session_Id_Mode)
        {
            switch (Session_Id_Mode)
            {
                case WebSessionIdMode.Random:
                    SendCommand("Session_Id_Mode", "Random");
                    break;

                // case WebSessionIdMode.DeviceId:
                default:
                    SendCommand("Session_Id_Mode", "DeviceId");
                    break;
            }
        }

        public void Check_Session_Id(bool Check)
        {
            SendCommand("Check_Session_Id", Check);
        }

        public void Send_Clear_Screen(Int32 Background_Color = -1)
        {
            // Ekranı temizler.
            SendCommand("Clear_Screen", ToHexColor((UInt32)Background_Color));
        }

        public void Send_Draw_Icon(IconType Icon_Type, Int32 X, Int32 Y, UInt32 Duration, Int32 Background_Color = -1)
        {
            // TFT ekranlı cihazlarda ekrana ikon çizer.

            string Value = '"' + Icon_Type.ToString() + "\"," + X.ToString() + ',' + Y.ToString() + ',' + Duration.ToString() + ",\"" + (Background_Color < 0 ? "0x1000000" : ToHexColor((UInt32)Background_Color)) + '"';
            SendArray("Draw_Icon", Value);
        }

        public void Send_Draw_Text(Int32 X, Int32 Y, string Text, UInt32 Duration, UInt32 Font_Size = 1, Int32 Font_Color = 0, Int32 Background_Color = -1, 
                                 TextAlignment Alignment = TextAlignment.Left, TextEncoding Text_Encoding = TextEncoding.UTF8)
        {
            // TFT ekranlı cihazlarda ekrana ikon çizer.

            string Value = X.ToString() + ',' + Y.ToString() + ",\"" + Text + "\"," + Duration.ToString() + ',' + Font_Size.ToString() + ",\"" +  Alignment.ToString() + "\",\"" +
                           ToHexColor((UInt32)Font_Color) + "\",\"" + (Background_Color < 0 ? "0x1000000" : ToHexColor((UInt32)Background_Color)) + "\",\"" + Text_Encoding.ToString() + '"';

            SendArray("Draw_Text", Value);
        }

        public enum DESFireKeyType
        {
            T_DES = 0,  // 56-bit DES (single DES, DES)
            T_2K3DES = 1,  // 112-bit 3DES (2 key triple DES, 2K3DES)
            T_3K3DES = 2,  // 168-bit 3DES (3 key triple DES, 3K3DES)
            T_AES = 3  // AES-128
        };

        public enum FileDataType
        {
            String = 0,
            Base64 = 1,
            Hex = 2
        };

        public void Send_DESFire_Set_Key(byte Key_No, DESFireKeyType Key_Type, byte Key_Version, string Key_Data)
        {
            string KT_Str;

            switch (Key_Type)
            {
                case DESFireKeyType.T_DES:
                    KT_Str = "DES";
                    break;

                case DESFireKeyType.T_2K3DES:
                    KT_Str = "3DES";
                    break;

                case DESFireKeyType.T_3K3DES:
                    KT_Str = "3K3DES";
                    break;

                // case DESFireKeyType.T_AES:
                default:
                    KT_Str = "AES";
                    break;
            }

            SendArray("DESFire_Set_Key", Key_No.ToString() + ',' + '"' + KT_Str + '"' + ',' + Key_Version.ToString() + ',' + '"' + Key_Data + '"');
        }

        public void Send_DESFire_Read_File(UInt32 Process_Id, UInt32 App_Id, byte File_No, UInt32 Offset, UInt32 Length, FileDataType Data_Type = FileDataType.String)
        {
            SendArray("DESFire_Read_File", Process_Id.ToString() + ',' + '"' + App_Id.ToString("X6") + '"' + ',' + File_No.ToString() + ',' + Offset.ToString() + ',' + Length.ToString() + ',' + Convert.ToString((UInt32)Data_Type));
        }

        public void Send_DESFire_Write_File(UInt32 Process_Id, UInt32 App_Id, byte File_No, UInt32 Offset, byte[] Data, FileDataType Data_Type = FileDataType.String)
        {
            string Str_Data;

            switch (Data_Type)
            {
                case FileDataType.Base64:
                    Str_Data = Convert.ToBase64String(Data);
                    break;

                case FileDataType.Hex:
                    Str_Data = Convert.ToHexString(Data);
                    break;

                // case FileDataType.String:
                default:
                    Str_Data = System.Text.Encoding.UTF8.GetString(Data);
                    break;
            }

            SendArray("DESFire_Write_File", Process_Id.ToString() + ',' + '"' + App_Id.ToString("X6") + '"' + ',' + File_No.ToString() + ',' + Offset.ToString() + ',' + '"' + Str_Data + '"' + ',' + Convert.ToString((UInt32)Data_Type));
        }

        public void Send_Mifare_Set_Key(string Key_Data, byte Mifare_Sector_No, UInt32 DESFire_App_Id = 0x201703, byte DESFire_File_No = 1)
        {
            // C++ : void Mifare_Set_Key(byte Key_Data[12], byte DESFire_App_Id[6], byte DESFire_File_No, byte Mifare_Sector_No, byte Key_Type);
            // SendArray("Mifare_Set_Key", '"' + Key_Data + '"' + ',' + '"' + DESFire_App_Id.ToString("X6") + '"' + ',' + DESFire_File_No.ToString() + ',' + Mifare_Sector_No.ToString() + ',' + '0');

            string Prm_Key_Data = "";

            for (int i = 0; i < Key_Data.Length; i++)
                if ((Key_Data[i] >= 'A' && Key_Data[i] <= 'F') || (Key_Data[i] >= 'a' && Key_Data[i] <= 'f') || (Key_Data[i] >= '0' && Key_Data[i] <= '9'))
                    Prm_Key_Data += Key_Data[i];

            if (Prm_Key_Data.Length > 0)
                SendArray("Mifare_Set_Key", '"' + Prm_Key_Data + '"' + ',' + '"' + DESFire_App_Id.ToString("X6") + '"' + ',' + DESFire_File_No.ToString() + ',' + Mifare_Sector_No.ToString() + ',' + '0');
        }

        public void Send_Read_Card_Data(UInt32 Process_Id, UInt32 Offset, UInt32 Length, byte Sector_No, FileDataType Data_Type = FileDataType.String)
        {
            SendArray("Read_Card_Data", Process_Id.ToString() + ',' + Offset.ToString() + ',' + Length.ToString() + ',' + Sector_No.ToString() + ',' + Convert.ToString((UInt32)Data_Type));
        }

        public void Send_Write_Card_Data(UInt32 Process_Id, UInt32 Offset, byte Sector_No, byte[] Data, FileDataType Data_Type = FileDataType.String)
        {
            string Str_Data;

            switch (Data_Type)
            {
                case FileDataType.Base64:
                    Str_Data = Convert.ToBase64String(Data);
                    break;

                case FileDataType.Hex:
                    Str_Data = Convert.ToHexString(Data);
                    break;

                // case FileDataType.String:
                default:
                    Str_Data = System.Text.Encoding.UTF8.GetString(Data);
                    break;
            }

            SendArray("Write_Card_Data", Process_Id.ToString() + ',' + Offset.ToString() + ',' + Sector_No.ToString() + ',' + '"' + Str_Data + '"' + ',' + Convert.ToString((UInt32)Data_Type));
        }

        public void Send_Sound(Int32 Reader_Num, SoundSignalType Sound_Signal_Type)
        {
            if (Reader_Num < 1)
                Reader_Num = 1;

            if (Reader_Num > 16)
                Reader_Num = 16;

            SendArray("Sound", Reader_Num.ToString() + ',' + ((Int32)Sound_Signal_Type).ToString());
        }

        public void Send_Trigger_Relay(Int32 Reader_Num, UInt32 Duration)
        {
            if (Reader_Num < 1)
                Reader_Num = 1;

            if (Reader_Num > 16)
                Reader_Num = 16;

            SendArray("Trigger_Relay", Reader_Num.ToString() + ',' + Duration.ToString());
        }

        public void Send_Erase_All_Logs()
        {
            SendCommand("Erase_All_Logs", true);
        }

        public void Send_Log_Rollback(UInt64 Log_Count)
        {
            SendCommand("Log_Rollback", Log_Count);
        }

        public void Send_Log_Rollforward(UInt64 Log_Count)
        {
            SendCommand("Log_Rollforward", Log_Count);
        }

        public void Send_Erase_All_Users()
        {
            SendCommand("Erase_All_Users", true);
        }

        public void Send_User_Forbidden(UInt64 Card_Id)
        {
            SendCommand("User_Forbidden", Card_Id);
        }

        public void Send_User_Unforbidden(UInt64 Card_Id)
        {
            SendCommand("User_Unforbidden", Card_Id);
        }

        public void Send_Local_Sensor_Sensibility(UInt16 Value_ms)
        {
            SendCommand("Local_Sensor_Sensibility", Value_ms);
        }

        public void Send_Door_Sensor_Sensibility(UInt16 Value_ms)
        {
            SendCommand("Door_Sensor_Sensibility", Value_ms);
        }

        private static string ToHexItem(byte Sayi)
        {
            if (Sayi >= 0 && Sayi <= 9)
                return Sayi.ToString();
            else
                if (Sayi >= 0x0A && Sayi <= 0x0F)
                return ((char)(Sayi + 55)).ToString();
            else
                return "";
        }

        private static string ToHex(byte[] Bytes)
        {
            string RetVal = "";

            for (int i = 0; i < Bytes.Length; i++)
                RetVal += ToHexItem(Convert.ToByte(Bytes[i] / 16)) + ToHexItem(Convert.ToByte(Bytes[i] % 16));

            return (RetVal);
        }

        private static string ToHexColor(UInt32 Color)
        {
            string RetVal = "";
            byte[] Buf = new byte[3];

            unsafe
            {
                byte* B = (byte*)&Color;

                for (int i = 0; i < 3; i++)
                    Buf[2 - i] = B[i];

            }

            bool First_Item = true;
            for (int i = 0; i < Buf.Length; i++)
                if (Buf[i] > 0 || First_Item == false)
                {
                    First_Item = false;
                    RetVal += ToHexItem(Convert.ToByte(Buf[i] / 16)) + ToHexItem(Convert.ToByte(Buf[i] % 16));
                }
                    

            return (RetVal);
        }

        private static byte[]? ToBytes(string? Str)
        {
            if (Str != null)
                if (Str.Length > 0)
                {
                    byte[] RetVal = new byte[Str.Length];

                    for (int i = 0; i < Str.Length; i++)
                        RetVal[i] += (byte)Str[i];

                    return RetVal;
                }

            return null;
        }

        unsafe public static byte[] ToBytes(byte* Bytes, int Count)
        {
            int i;
            byte[] RetVal = new byte[Count];

            for (i = 0; i < Count; i++)
                RetVal[i] = Bytes[i];

            return RetVal;
        }

        public static string ToString(byte[]? Bytes)
        {
            string RetVal = "";

            if (Bytes != null)
            {
                for (int i = 0; i < Bytes.Length; i++)
                    RetVal += (char)Bytes[i];
            }

            return RetVal;
        }

        private DateTime Convert_To_LogTime(string? Str_LogTime)
        {
            // Str_LogTime içindeki zamanı Datetime türüne çevirir.

            DateTime RetVal;

            if (!string.IsNullOrEmpty(Str_LogTime))
            {
                Int32 yr, mt, dy, hr, mn, sc, ms;
                Int32 StartIndex;

                StartIndex = 0;
                yr = Get_Number(Str_LogTime, ref StartIndex, 2000);
                mt = Get_Number(Str_LogTime, ref StartIndex, 1);
                dy = Get_Number(Str_LogTime, ref StartIndex, 1);
                hr = Get_Number(Str_LogTime, ref StartIndex);
                mn = Get_Number(Str_LogTime, ref StartIndex);
                sc = Get_Number(Str_LogTime, ref StartIndex);
                ms = Get_Number(Str_LogTime, ref StartIndex);

                try
                {
                    RetVal = new DateTime(yr, mt, dy, hr, mn, sc, ms);
                }
                catch
                {
                    RetVal = new DateTime(2000, 1, 1, 0, 0, 0, 0);
                }
            }
            else
                RetVal = new DateTime(2000, 1, 1, 0, 0, 0, 0);

            return RetVal;
        }

        private Int32 Get_Number(string S, ref Int32 StartIndex, Int32 Default = 0)
        {
            int i, Ln;
            string Str = "";

            if (S == null)
                return Default;

            if (StartIndex >= S.Length)
                return Default;

            Ln = S.Length;
            for (i = StartIndex; i < Ln; i++)
            {
                if (S[i] >= '0' && S[i] <= '9')
                    Str += S[i];
                else
                if (S[i] != 0x20 || (Str.Length > 0)) // İşlenen karakter boşluk değilse veya boşluksa ve rakam alınmış ise
                {
                    // Rakam olmayan karakterleri sonraki rakama kadar atla.
                    while (i < S.Length && (S[i] < '0' || S[i] > '9'))
                    {
                        i++;
                    }

                    break; // for i döngüsünün dışına çık.
                }
            }

            StartIndex = i;

            if (Str.Length > 0)
            {
                try { return Convert.ToInt32(Str); } catch { }
            }

            return Default;
        }

        public bool Is_Session_Valid(UInt64 Value)
        {
            Int32 i, sz; UInt64 mb; UInt64[] t = new UInt64[4];

            if (Value > 0)
            {
                mb = 0xFF;
                sz = 24;

                for (i = 3; i > -1; i--)
                {
                    t[i] = (Value >> sz) & mb;
                    sz -= 8;
                }

                return ((Value >> 32) & 0xFFFFFFFF) == (((t[0] ^ t[2]) << 24) | ((t[1] ^ t[3]) << 16) | ((t[2] ^ t[3]) << 8) | (t[1] ^ t[0]));
            }
            else
                return false;
        }

        static public string EventToString(LogEvent ALog_Event)
        {
            string RetVal = "";

            switch (ALog_Event)
            {
                case LogEvent.AccessSuccessful: RetVal = "İzin verildi"; break;
                case LogEvent.UserInside: RetVal = "İzin verildi (Giriş yaptı)"; break;
                case LogEvent.UserOutside: RetVal = "İzin verildi (Çıkış yaptı)"; break;
                case LogEvent.UnauthorizedAccess: RetVal = "İzin verilmedi (Kişi tanımlı değil)"; break;
                case LogEvent.UnauthorizedEntry: RetVal = "Giriş engellendi (Kişi tanımlı değil)"; break;
                case LogEvent.UnauthorizedExit: RetVal = "Çıkış engellendi (Kişi tanımlı değil)"; break;
                case LogEvent.OutOfTimeZone: RetVal = "İzin verilmedi (Zaman dilimi dışında)"; break;
                case LogEvent.TimeLimited: RetVal = "İzin verilmedi (Zaman kısıtlaması)"; break;
                case LogEvent.CreditDone: RetVal = "Kontör bitti"; break;
                case LogEvent.PasswordError: RetVal = "İzin verilmedi (Hatalı şifre girişi)"; break;
                case LogEvent.AntiPassbackEntry: RetVal = "İzin verildi (Giriş)"; break;
                case LogEvent.AntiPassbackExit: RetVal = "İzin verildi (Çıkış)"; break;
                case LogEvent.TryingExitWithoutEntry: RetVal = "Çıkış isteği engellendi (Giriş yapmadan çıkmaya çalıştı)"; break;
                case LogEvent.TryingEntryWithoutExit: RetVal = "Giriş isteği engellendi (Çıkış yapmadan girmeye çalıştı)"; break;
                case LogEvent.ForbiddenDoor: RetVal = "İzin verilmedi (Kapı hizmet dışı)"; break;
                case LogEvent.DoorOpenRemained: RetVal = "Kapı açık kaldı"; break;
                case LogEvent.UnauthorizedAccessToSubgroup: RetVal = "İzin verilmedi (Ana kapıdan geçmemiş)"; break;
                case LogEvent.DoorForciblyOpened: RetVal = "Kapı zorla açıldı"; break;
                case LogEvent.CapacityIsFull: RetVal = "Erişim bölgesine giriş limiti dolmuş"; break;
                case LogEvent.DoorSensorActive: RetVal = "Kapı açıldı"; break;
                case LogEvent.DoorSensorPassive: RetVal = "Kapı kapandı"; break;
                case LogEvent.DoorExitButton: RetVal = "Buton ile geçiş"; break;
                case LogEvent.EmergencyExitButton: RetVal = "Acil durum butonuna basılmış"; break;
                case LogEvent.FireSensor: RetVal = "Yangın sensörü aktif"; break;
                case LogEvent.AlarmSensor: RetVal = "Alarm sensörü aktif"; break;
                case LogEvent.TamperSensor: RetVal = "Pano kapağı açıldı"; break;
                case LogEvent.ExtraSensor1: RetVal = "Ekstra Sensör 1 aktif"; break;
                case LogEvent.ExtraSensor2: RetVal = "Ekstra Sensör 2 aktif"; break;
                case LogEvent.GDMNoTransition: RetVal = "Geçiş yapmadı (Uygun olmayan geçiş kontrolü)"; break;
                case LogEvent.Disconnect: RetVal = "Bağlantı koptu"; break;
                case LogEvent.Connect: RetVal = "Yeniden bağlandı"; break;
                case LogEvent.SystemStart: RetVal = "Cihaz açıldı"; break;
                case LogEvent.PGMLimited: RetVal = "İzin verilmedi (Kişinin grup limiti doldu)"; break;
                case LogEvent.ForbiddenDay: RetVal = "İzin verilmedi (Kişinin bugün geçiş izni yok)"; break;
                case LogEvent.FinishedAccessToTimePeriod: RetVal = "İzin verilmedi (Zaman dilimindeki geçiş hakkı bitti)"; break;
                case LogEvent.FinishedToDailyAccess: RetVal = "İzin verilmedi (Günlük geçiş hakkı bitti)"; break;
                case LogEvent.LifetimeExpired: RetVal = "İzin verilmedi (Kapıyı kullanım süresi bitti)"; break;
                case LogEvent.FinishedAccessToLifetime: RetVal = "İzin verilmedi (Kapıyı kullanım süresi içindeki geçiş hakkı bitti)"; break;
                case LogEvent.CounterSensor1In: RetVal = "Kapının 1.sensöründen giriş sinyali alındı"; break;
                case LogEvent.CounterSensor1Out: RetVal = "Kapının 1.sensöründen çıkış sinyali alındı"; break;
                case LogEvent.CounterSensor2In: RetVal = "Kapının 2.sensöründen giriş sinyali alındı"; break;
                case LogEvent.CounterSensor2Out: RetVal = "Kapının 2.sensöründen çıkış sinyali alındı"; break;
                case LogEvent.CounterSensorExitIn: RetVal = "Kapının exit sensöründen giriş sinyali alındı"; break;
                case LogEvent.CounterSensorExitOut: RetVal = "Kapının exit sensöründen çıkış sinyali alındı"; break;
                case LogEvent.ClosedTheForciblyOpenedDoor: RetVal = "Kapı kapatıldı (Zorla açılmıştı)"; break;
                case LogEvent.ClosedTheOpenRemainedDoor: RetVal = "Kapı kapatıldı (Açık unutulmuştu)"; break;
                case LogEvent.DoorAlarmSensorActive: RetVal = "Kapı alarm sensörü aktif"; break;
                case LogEvent.DoorAlarmSensorPassive: RetVal = "Kapı alarm sensörü pasif"; break;
                case LogEvent.RTCError: RetVal = "Cihaz saatinde sorun var"; break;
                case LogEvent.PassedWithCardAndPassword: RetVal = "İzin verildi (Kart ve şifre ile geçti)"; break;
                case LogEvent.PassedWithPassword: RetVal = "İzin verildi (Şifre ile geçti)"; break;
            }

            return RetVal;
        }

        public bool IsSuccessEvent(LogEvent Event)
        {
            // Başarılı bir geçiş log`u ise true döndürür.
            switch (Event)
            {
                case LogEvent.AccessSuccessful:
                case LogEvent.UserInside:
                case LogEvent.UserOutside:
                case LogEvent.AntiPassbackEntry:
                case LogEvent.AntiPassbackExit:
                case LogEvent.DoorExitButton:
                case LogEvent.DoorSensorActive:
                case LogEvent.DoorForciblyOpened:
                case LogEvent.CounterSensor1In:
                case LogEvent.CounterSensor1Out:
                case LogEvent.CounterSensor2In:
                case LogEvent.CounterSensor2Out:
                case LogEvent.CounterSensorExitIn:
                case LogEvent.CounterSensorExitOut:
                case LogEvent.PassedWithCardAndPassword:
                case LogEvent.PassedWithPassword:
                    return true;

                default:
                    return false;
            }
        }

#if USE_CRYPTO_DLL
        public static void Crypto(UInt64 Password, byte[]? Src_Buffer, ref byte[] Dst_Buffer)
        {
            IntPtr Dst_Buffer_Ptr = IntPtr.Zero;
            Int32 Dst_Len;

            if (Src_Buffer != null)
            {
                _Crypto(Password, Src_Buffer, Src_Buffer.Length, ref Dst_Buffer_Ptr, out Dst_Len);

                unsafe
                {
                    Dst_Buffer = ToBytes((byte*)Dst_Buffer_Ptr, Dst_Len);
                }
            }
        }

        public static void Decrypto(UInt64 Password, ref byte[]? Crypt_Data)
        {
            IntPtr Decrypted_Data_Ptr = IntPtr.Zero;
            Int32 Decrypted_Data_Size;
            Int32 Len;

            if (Crypt_Data != null)
                Len = Crypt_Data.Length;
            else
                Len = 0;

            _Decrypto(Password, Crypt_Data, Len, ref Decrypted_Data_Ptr, out Decrypted_Data_Size);

            unsafe
            {
                Crypt_Data = ToBytes((byte*)Decrypted_Data_Ptr, Decrypted_Data_Size);
            }
        }

        public static bool Get_Password(string Password_Str, string New_Password_Str, out UInt64 Password_64, out UInt64 New_Password_64)
        {
            byte[]? Password = null;
            byte[]? New_Password = null;

            Password_64 = 0;
            New_Password_64 = 0;

            if (Password_Str != null)
            {
                Password = ToBytes(Password_Str);
                if (Password != null)
                    Password_64 = (UInt64)Password.Length;
            }

            if (New_Password_Str != null)
            {
                New_Password = ToBytes(New_Password_Str);
                if (New_Password != null)
                    New_Password_64 = (UInt64)New_Password.Length;
            }

            return _Get_Password(Password, (int)Password_64, New_Password, (int)New_Password_64, out Password_64, out New_Password_64);
        }

        [DllImport(DLL_NAME, EntryPoint = "Crypto", CharSet = CharSet.None, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]
        private static extern bool _Crypto(UInt64 Password, byte[] Src_Buffer, Int32 Src_Len, ref IntPtr Dst_Buffer, out Int32 Dst_Len);

        [DllImport(DLL_NAME, EntryPoint = "Decrypto", CharSet = CharSet.None, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]
        private static extern bool _Decrypto(UInt64 Password, byte[]? Crypt_Data, Int32 Crypt_Data_Size, ref IntPtr Decrypted_Data, out Int32 Decrypted_Data_Size);

        [DllImport(DLL_NAME, EntryPoint = "Get_Password", CharSet = CharSet.None, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]
        private static extern bool _Get_Password(byte[]? Password_Buf, Int32 Password_Buf_Size, byte[]? New_Password_Buf, Int32 New_Password_Buf_Size, out UInt64 Password_64, out UInt64 New_Password_64);

        private const string DLL_NAME = @"PDeviceCrypt.dll";

        private UInt64 Password = 0; // Önceden cihaza verilmiş olan şifre.
        private bool Crypto_Enable = true; // Bu alan true ise cihaza gönderilecek olan veriler şifrelenir.
#endif

        public const UInt64 Empty_Card = 0x7FFFFFFFFFFFFFFF; // Geçerli bir kart no sıfır`dan büyük, buradaki değerden küçük olmalıdır.
        public readonly HttpParams Params;
        public ASPCoreContext Context;
    }

    public class SensorInfo
    {
        public SensorInfo()
        {
            Sensor1 = false;
            Sensor2 = false;
            Exit = false;
        }

        public bool Sensor1;
        public bool Sensor2;
        public bool Exit;
    }

    public class SensorSignals
    {
        public SensorSignals()
        {
            Sensor_Signals = new List<SensorInfo>();

            for (int i = 0; i < 16; i++)
                Sensor_Signals.Add(new SensorInfo());

            Clear();
        }

        public SensorInfo this[int Index]
        {
            get { return Sensor_Signals[Index]; }
        }

        public void Clear()
        {
            EmergencyExit = false;
            Fire = false;
            Alarm = false;
            TamperSwitch = false;
            ExtraSensor1 = false;
            ExtraSensor2 = false;

            for (int i = 0; i < Sensor_Signals.Count(); i++)
            {
                Sensor_Signals[i].Sensor1 = false;
                Sensor_Signals[i].Sensor2 = false;
                Sensor_Signals[i].Exit = false;

            }
        }

        public void Unpack(UInt64 Value, Int32 Reader_Count)
        {
            Int32 p;

            EmergencyExit = (((Value >> 63) & 0x01) == 1);
            Fire = (((Value >> 62) & 0x01) == 1);
            Alarm = (((Value >> 61) & 0x01) == 1);
            TamperSwitch = (((Value >> 60) & 0x01) == 1);
            ExtraSensor1 = (((Value >> 59) & 0x01) == 1);
            ExtraSensor2 = (((Value >> 58) & 0x01) == 1);

            p = 57; // 6 bitlik lokal sensör bilgisi en sonda bulunduğundan bu alanı atlıyoruz.

            for (int i = 0; i < Reader_Count; i++)
            {
                Sensor_Signals[i].Sensor1 = (((Value >> (p - 0)) & 0x01) == 1);
                Sensor_Signals[i].Sensor2 = (((Value >> (p - 1)) & 0x01) == 1);
                Sensor_Signals[i].Exit = (((Value >> (p - 2)) & 0x01) == 1);
                p -= 3; // Sensor verisi`nden alınan üç biti düş.
            }
        }

        public bool EmergencyExit;
        public bool Fire;
        public bool Alarm;
        public bool TamperSwitch;
        public bool ExtraSensor1;
        public bool ExtraSensor2;
        private List<SensorInfo> Sensor_Signals;
    }

    /* Yazı yönü. */
    public enum TextAlignment
    {
        Left = 0, // Sola yanaşık
        Right = 1, // Sağa yanaşık
        Center = 2 // Ortalı
    };

    /* Text karakter kodlaması. */
    public enum TextEncoding
    {
        Default = 0,
        UTF8 = 1
    };

    /* Ses sinyal kodları. */
    public enum SoundSignalType
    {
        None = 0,  // Sinyal kullanılmıyor.
        CardOk = 1,  // Kart onaylandı sinyali.
        CardError = 2,  // Kart onaylanmadı sinyali.
        DoorForciblyOpened = 3,  // Kapı zorla açıldı sinyali.
        DoorOpenRemained = 4,  // Kapı açık kaldı sinyali.
        DoubleOk = 5,  // Çift onay sinyali.
        Error = 6,  // Hata sinyali.
        CreditDone = 7   // Kontör bitti sinyali.
    };

    public enum IconType
    {
        None = 0,  // kullanılmıyor.
        Ok = 1,  // Onaylandı
        Error = 2  // Onaylanmadı.
    };

    /* Web Access modunda Session_Id oluşturulurken izlenecek yolu bildirir. Random ise rastgele, DeviceId ise cihazın id`sinden Session_Id üretilir. */
    public enum WebSessionIdMode
    {
        DeviceId = 0,
        Random = 1
    };

    /* Cihazdan gelen mesaj türleri. */
    public enum HttpMessageType
    {
        None = 0,       // Bilinmiyor.
        Read_Card = 1,  // Kart okutuldu.
        I_Am_Here = 2,  // Buradayım mesajı.
        Log_Record = 3, // Log kaydı.
        Completed = 4   // Son yapılan kayıt işleminin başarıyla bittiğini bildirir. (Yeni bir kişi eklemek gibi)
    }

    // Tamamlanan işlemin türü.
    public enum HttpCompletedType
    {
        None = 0,
        User_Inserted = 1,              // Kullanıcı eklendi.
        User_Updated = 2,               // Var olan kullanıcı güncellendi.
        User_Forbidden = 3,             // Kullanıcı yasaklandı.
        User_Unforbidden = 4,           // Kullanıcının yasağı kaldırıldı.
        User_Write_Data = 5,            // Kullanıcı kartına veri yazıldı.
        User_Read_Data = 6,             // Kullanıcı kartından veri okundu.
        User_Write_Data_Error = 7,      // Kullanıcı kartına veri yazma hatası.
        User_Read_Data_Error = 8,       // Kullanıcı kartından veri okuma hatası.
        User_Capacity_Reached = 9       // Cihaz kullanıcı kapasitesi doldu.
    }

    /* Cihazdan gelen parametreler. */
    public class HttpParameters : NameValueCollection
    {
        public void Assign(NameValueCollection? Http_Params)
        {
            if (Http_Params != null)
            {
                for (int i = 0; i < Http_Params.Count; i++)
                {
                    string[]? S = Http_Params.GetValues(i);
                    if (S != null)
                        Add(Http_Params.GetKey(i), S[0]);
                }
            }
        }

        public string Value(int Index)
        {
            string[]? S = GetValues(Index);
            if (S != null)
                return S[0];
            else
                return "";
        }

        public string Value(string Param_Name)
        {
            string[]? S = GetValues(Param_Name);
            if (S != null)
                return S[0];
            else
                return "";
        }

        public int IndexOfName(string Param_Name)
        {
            string? S;

            Param_Name = Param_Name.ToLower();

            for (int i = 0; i < Count; i++)
            {
                S = GetKey(i);
                if (S != null)
                    if (S.ToLower() == Param_Name)
                        return i;
            }

            return -1;
        }

        public bool Is_Device_Param(string Param_Name)
        {
            string[] No_Conversion = {"b", "Session_Id", "Message_Type", "Completed_Type", "Process_Id", "SoftVer", "Device_Id",
                                                       "Reader_Num", "Wiegand_Num", "Reader_Count", "Card_Id", "Password", "Registration_Number",
                                                       "Written_User_Count", "Written_User_Forbidden", "Written_User_Unforbidden",
                                                       "User_Count", "Log_Count", "Log_Event", "Log_Time",
                                                       "Data_Count", "Data", "Group_Access_Zones", "Sensors",
                                                       "Screen_Model", "Screen_Width", "Screen_Height" };

            Param_Name = Param_Name.ToLower();

            for (int i = 0; i < No_Conversion.Length; i++)
            {
                if (Param_Name == No_Conversion[i].ToLower())
                    return true;
            }

            return false;
        }
    }

    public class HttpParams
    {
        public class HttpParam
        {
            public string PN = "";
            public string PV = "";
        }

        public HttpParams()
        {
            Session_Id = 0;
            Message_Type = HttpMessageType.None;
            Completed_Type = HttpCompletedType.None;
            Process_Id = 0;
            SoftVer = 0;
            Multi_User = false;
            Device_Id = 0;
            Reader_Num = 0;
            Wiegand_Num = 0;
            Reader_Count = 0;
            Screen = new ScreenInfo();
            Card_Id = 0;
            Password = 0;
            Registration_Number = 0;
            Written_User_Count = 0;
            Written_User_Forbidden_Count = 0;
            Written_User_Unforbidden_Count = 0;
            User_Count = 0;
            Log_Count = 0;
            Log_Event = LogEvent.AccessSuccessful;
            Log_Time = DateTime.Now;
            Tag_Type = RFTagType.None;
            Data_Count = 0;
            Data = null;
            Access_Zones = new GroupAccessZones();
            Sensors = new SensorSignals();
            User_Params = new HttpParameters();
            List = new List<HttpParam>();
        }

    public string this[string pName]
        {
            get
            {
                pName = pName.Trim();

                for (int i = 0; i < List.Count; i++)
                    if (List[i].PN == pName)
                        return List[i].PV;

                // throw new IndexOutOfRangeException();
                return "0";
            }
        }

        public HttpParam Add(string PN, string PV)
        {
            List.Add(new HttpParams.HttpParam());
            List[List.Count() - 1].PN = PN.Trim();
            List[List.Count() - 1].PV = PV;
            return List[List.Count() - 1];
        }

        public UInt64 Session_Id;                       // Oturum id`si. Sunucu ile başlatılan her işlemde bir oturum id`si bulunur.
        public HttpMessageType Message_Type;            // Mesaj türü. Sunucuya gönderilen her paketin bir mesaj türü vardır.
        public HttpCompletedType Completed_Type;        // Completed komutunda kullanılır. Tamamlanan işlemin türünü bildirir.
        public UInt64 Process_Id;                       // Sunucu tarafından oluşturulan bir kod`dur. Completed mesajı ile yapılan işlemin durumu bildirilirken tekrar sunucuya gönderilir.
        public UInt64 SoftVer;                          // Cihazdaki yazılımın versiyonu.
        public bool Multi_User;                         // Bu alan true ise cihaza toplu şekilde kullanıcı gönderilebilir.
        public UInt32 Device_Id;                        // Cihaz id`si. Sunucunun hangi cihaz ile çalıştığını anlaması için cihaz id gönderilir.
        public Int32 Reader_Num;                        // İşlem yapılan okuyucu nosu.
        public Int32 Wiegand_Num;                       // İşlem yapılan okuyucunun, işlem yapılan wiegand nosu.
        public Int32 Reader_Count;                      // Cihazın okuyucu portu sayısı.
        public ScreenInfo Screen;                       // Cihazın kullandığı ekran modeli.
        public UInt64 Card_Id;                          // Okutulan kartın bilgisi.
        public Int64 Password;                          // Kullanıcının girmiş olduğu şifre.
        public Int64 Registration_Number;               // İşlem yapan kullanıcının kayıt/sicil nosu.
        public UInt64 Written_User_Count;               // JSON->"User" ile cihaza yazılan kullanıcı sayısı.
        public UInt64 Written_User_Forbidden_Count;     // JSON->"User_Forbidden" ile cihaza yazılan kullanıcı sayısı.
        public UInt64 Written_User_Unforbidden_Count;   // JSON->"User_Unforbidden" ile cihaza yazılan kullanıcı sayısı.
        public UInt64 User_Count;                       // Cihazdaki kullanıcı sayısı.
        public UInt64 Log_Count;                        // Cihazdaki log sayısı.
        public LogEvent Log_Event;                      // Log türü.
        public DateTime Log_Time;                       // İşlem zamanı.
        public RFTagType Tag_Type;                      // Okutulan kartın türü. DESFire veya Mifare klasik..vb.
        public Int32 Data_Count;                        // Data parametresi ile gelen verinin uzunluğu.
        public byte[]? Data;                            // Gelen veri.
        public GroupAccessZones Access_Zones;           // Grup erişim bölgeleri.
        public SensorSignals Sensors;                   // Sensörlerin şu an ki sinyal verileri.
        public HttpParameters User_Params;              // URL içinde kullanıcı tarafından tanımlanmış özel parametreler.
        public List<HttpParam> List;
    }

    public enum RFTagType
    {
        None = 0,
        TagUltralight = 1,
        Tag1K = 2,
        Tag4K = 3,
        TagDESFire = 4,
        TagProx = 5,
        TagEM = 6,
        TagMifarePlus = 7,
        TagSmartMX = 8,
        TagSmartMX_7UID = 9,
        TagMifareMini = 10,
        UHFCard = 11,
        Tag34bits = 12,
        Tag35bits = 13,
        Tag37bits = 14,
        Tag40bits = 15,
        Tag42bits = 16,
        Tag48bits = 17,
        Tag58bits = 18,
        Tag1K_7UID = 19,
        Tag4K_7UID = 20,
        TagMifarePlus_7UID = 21
    };

    /* Geçiş sırasında oluşan olaylar. */
    public enum LogEvent
    {
        AccessSuccessful = 0,    // Geçiş başarılı.
        UserInside = 1,    // Kullanıcı içeri girdi.
        UserOutside = 2,    // Kullanıcı dışarı çıktı.
        UnauthorizedAccess = 3,    // Yetkisiz kullanıcı erişimi.
        UnauthorizedEntry = 4,    // Yetkisiz kullanıcı girişi.
        UnauthorizedExit = 5,    // Yetkisiz kullanıcı çıkışı.
        OutOfTimeZone = 6,    // Zaman kuşağının dışında geçiş.
        TimeLimited = 7,    // Zaman kısıtlaması.
        CreditDone = 8,    // Kontör bitti.
        PasswordError = 9,    // Şifre hatalı girilmiş.
        AntiPassbackEntry = 10,   // Anti-Passback kullanılırken uygun bir şekil de giriş yapmış.
        AntiPassbackExit = 11,   // Anti-Passback kullanılırken uygun bir şekil de çıkış yapmış.
        TryingExitWithoutEntry = 12,   // Anti-Passback kullanıldığı halde girmeden çıkış yapılmaya çalışılmış. (Önceden izinsiz girmiş)
        TryingEntryWithoutExit = 13,   // Anti-Passback kullanıldığı halde çıkmadan giriş yapılmaya çalışılmış. (Giren birinin kartı ile tekrar girmeye çalışmış)
        ForbiddenDoor = 14,   // Kapıdan geçiş yasak.
        DoorOpenRemained = 15,   // Kapı açık kalmış. Geçiş yapıldıktan sonra kapı kapatılmamış.
        UnauthorizedAccessToSubgroup = 16,   // Alt gruba yetkisiz erişim. Parent okuyucudan giriş yapmamış.
        DoorForciblyOpened = 17,   // Kapı zorla açılmış.
        CapacityIsFull = 18,   // Erişim bölgesine giriş limiti dolmuş.
        DoorSensorActive = 19,   // Kapı sensörü aktif. (Kapı açıldı)
        DoorSensorPassive = 20,   // Kapı sensörü pasif oldu. (Kapı kapandı)
        DoorExitButton = 21,   // Kapının exit butonuna basılarak geçiş.
        EmergencyExitButton = 22,   // Acil çıkış butonuna basılmış.
        FireSensor = 23,   // Yangın sensöründen sinyal gelmiş.
        AlarmSensor = 24,   // Alarm sensöründen sinyal gelmiş.
        TamperSensor = 25,   // Tamper sensöründen sinyal gelmiş.
        ExtraSensor1 = 26,   // Yangın, Gaz, Hareket..vb sensörlerden gelen sinyaller.
        ExtraSensor2 = 27,   // Yangın, Gaz, Hareket..vb sensörlerden gelen sinyaller.
        GDMNoTransition = 28,   // Kapıya başarı ile erişmiş ancak turnike veya kapıdan geçmemiş.
        Disconnect = 29,   // Cihaz ile bağlantı koptu.
        Connect = 30,   // Cihaz ile bağlantı tekrar sağlandı.
        SystemStart = 31,   // Cihaz açıldığı zaman bu olay log olarak kaydedilir.
        PGMLimited = 32,   // PGM kısıtlamasına takıldı. PGM Grubundan başka kişiler içeri girdiğinden bu kullanıcı şimdilik giremez.
        ForbiddenDay = 33,   // Kapıdan geçiş bugün yasak.
        FinishedAccessToTimePeriod = 34,   // Zaman dilimindeki geçiş hakkı bitmiş.
        FinishedToDailyAccess = 35,   // Günlük geçiş hakkı bitmiş.
        LifetimeExpired = 36,   // Okuyucu kullanım süresi bitmiş.
        FinishedAccessToLifetime = 37,   // Okuyucuyu kullanım süresi içindeki geçiş hakkı bitmiş.
        CounterSensor1In = 38,   // Grup erişim modunda, okuyucunun 1.sensöründen giriş sinyali alındı.
        CounterSensor1Out = 39,   // Grup erişim modunda, okuyucunun 1.sensöründen çıkış sinyali alındı.
        CounterSensor2In = 40,   // Grup erişim modunda, okuyucunun 2.sensöründen giriş sinyali alındı.
        CounterSensor2Out = 41,   // Grup erişim modunda, okuyucunun 2.sensöründen çıkış sinyali alındı.
        CounterSensorExitIn = 42,   // Grup erişim modunda, okuyucunun exit sensöründen giriş sinyali alındı.
        CounterSensorExitOut = 43,   // Grup erişim modunda, okuyucunun exit sensöründen çıkış sinyali alındı.
        ClosedTheForciblyOpenedDoor = 44,   // Zorla açılan kapı kapatıldı.
        ClosedTheOpenRemainedDoor = 45,   // Açık kalan kapı kapatıldı.
        DoorAlarmSensorActive = 46,   // Kapı alarm sensörü aktif oldu.
        DoorAlarmSensorPassive = 47,    // Kapı alarm sensörü pasif oldu.
        RTCError = 48,    // Cihaz saatinde sorun var.
        PassedWithCardAndPassword = 49, // Kart ve şifre ile geçti.
        PassedWithPassword = 50  // Sadece şifre ile geçti.
    }

    /* Cihaz ekran modelleri. */
    public enum ScreenModel
    {
        None = 0,
        TextLCD = 1,
        GLCD = 2,
        TFT = 3
    };

    public class ScreenInfo
    {
        public ScreenInfo()
        {
            Model = ScreenModel.None;
            Width = 0;
            Height = 0;
        }

        public ScreenModel Model;
        public UInt32 Width;
        public UInt32 Height;
    }

    /* Bir erişim bölgesine ait bilgiler. */
    public class GroupAccessZone
    {
        public GroupAccessZone()
        {
            Capacity = 0; // Kapasite. (24 bits)
            AccessCount = 0; // Yapılan geçiş sayısı. (24 bits)
            Group_Id = 0; // Grup id`si. (16 bits) (Okuyuculara verilen grup id`si veya ağdaki başka bir cihazdaki okuyucunun grup id`si)
        }

        public UInt32 Group_Id; // Grup id`si. (16 bits) (Okuyuculara verilen grup id`si veya ağdaki başka bir cihazdaki okuyucunun grup id`si)
        public UInt32 Capacity; // Kapasite. (24 bits)
        public UInt32 AccessCount; // Yapılan geçiş sayısı. (24 bits)
    }

    /* Grup erişim bölgeleri. */
    public class GroupAccessZones : List<GroupAccessZone>
    {
        public GroupAccessZones()
        {
            Enable = false;

            for (int i = 0; i < GROUP_ACCESS_ZONES_COUNT; i++)
                Add(new GroupAccessZone());
        }

        public void Decode(string? S)
        {
            string[] Number_List;
            Int16 Number_Index = 0;

            if (String.IsNullOrEmpty(S) == false)
            {
                Number_List = S.Split(',');
                Enable = (Get_Number(Number_List, ref Number_Index) != 0);

                for (int i = 0; i < Count; i++)
                {
                    this[i].Group_Id = Get_Number(Number_List, ref Number_Index);
                    this[i].Capacity = Get_Number(Number_List, ref Number_Index);
                    this[i].AccessCount = Get_Number(Number_List, ref Number_Index);
                }
            }
        }

        private UInt32 Get_Number(string[] Number_List, ref Int16 Number_Index)
        {
            if (Number_Index < Number_List.Count())
                return Convert.ToUInt32(Number_List[Number_Index++]);
            else
                return 0;
        }

        public bool Enable; // Grup erişim bölgeleri modu. false= Devredışı, true= Etkin.
        private const UInt32 GROUP_ACCESS_ZONES_COUNT = 16; // Liste uzunluğu. Cihazın desteklediği bölge sayısı.

    }
}


--- CS Dosya Sonu: WebAccess\WebAccess\WebAccess_Lib\WebAccess.cs ---

==============================================

--- CS Dosya Başlangıcı: WebAccess\WebAccess\WebAccess_Lib\WebAccessContext.cs ---

/*
 * Author: İstanbul Yazılım Elektronik Sanayi
 */

using System;
using System.Collections.Specialized;
using System.Text;
using Microsoft.AspNetCore.Http;

namespace ASPNetCore_WebAccess
{
    public class ASPCoreContext
    {
        public HttpContext Context;

        public ASPCoreContext(HttpContext Context)
        {
            this.Context = Context;
        }

        public IQueryCollection? Query
        {
            get
            {
                try
                {
                    return Context.Request.Query;
                }
                catch
                {
                    return null;
                }
            }
        }

        public IFormCollection? Form
        {
            get
            {
                try
                {
                    return Context.Request.Form;
                }
                catch
                {
                    return null;
                }
            }
        }

        public string Param(string Name)
        {
            IQueryCollection? Q = Query;
            if (Q != null && Q.ContainsKey(Name))
            {
                return Q[Name].ToString();
            }
            else
            {
                IFormCollection? F = Form;
                if (F != null && F.ContainsKey(Name))
                {
                    return F[Name].ToString();
                }
            }

            return String.Empty;
        }

        public NameValueCollection? Params()
        {
            NameValueCollection RetVal = new NameValueCollection();

            if (Query != null)
            {
                string PrmName;
                List<string> PrmList = Query.Keys.ToList();

                for (int i = 0; i < PrmList.Count; i++)
                {
                    PrmName = PrmList[i];
                    if (PrmName != null)
                        RetVal.Add(PrmName, Param(PrmName));
                }
            }

            /*
            if (Form != null)
            {
                string PrmName;
                List<string> PrmList = Form.Keys.ToList();

                for (int i = 0; i < PrmList.Count; i++)
                {
                    PrmName = PrmList[i];
                    if (PrmName != null)
                        RetVal.Add(PrmName, Param(PrmName));
                }
            }
            */

            return RetVal;
        }

        public bool ParamExists(string Name)
        {
            IQueryCollection? Q = Query;
            if (Q != null && Q.ContainsKey(Name))
            {
                return true;
            }
            else
            {
                IFormCollection? F = Form;
                if (F != null && F.ContainsKey(Name))
                {
                    return true;
                }
            }

            return false;
        }

        public string HttpMethod
        {
            get { return Context.Request.Method; }
        }

        public string Response_ContentType
        {
            get { return Context.Response.ContentType; }
            set { Context.Response.ContentType = value; }

        }

        public void Response(string Value)
        {
            Context.Response.Clear();
            // Context.Response.ContentType = "text/file; charset=ISO-8859-9";

            /* Sistemde kullanılan kod sayfalarını listeler.

            string S = "";

            EncodingInfo[] e = Encoding.GetEncodings();

            for (int i = 0; i < e.Length; i++)
            {
                S += "CodePage: " + e[i].CodePage.ToString() + ",  DisplayName: " + e[i].DisplayName + "<br>";
            }

            byte[] Encodings_Bytes = System.Text.Encoding.Default.GetBytes(S);
            Context.Response.Body.Write(Encodings_Bytes);
            */

            if (Value.Length > 0)
            {
                // byte[] Value_Bytes = System.Text.Encoding.GetEncoding(1254).GetBytes(Value);
                // byte[] Value_Bytes = System.Text.Encoding.GetEncoding(857).GetBytes(Value);

                // Context.Response.Body.Write(System.Text.Encoding.Default.GetBytes(Value));

                Context.Response.Body.Write(System.Text.Encoding.UTF8.GetBytes(Value));
            }
        }
    }
}

--- CS Dosya Sonu: WebAccess\WebAccess\WebAccess_Lib\WebAccessContext.cs ---

==============================================

--- CS Dosya Başlangıcı: WebAccess\WebAccess\WebAccess_Lib\WebAccessRun.cs ---

/*
 * Author: İstanbul Yazılım Elektronik Sanayi
 */

using DevExpress.Xpo;
using DevExpress.XtraRichEdit.Model;
using System.ComponentModel.Design;
using System.Text;
using YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB;
using static ASPNetCore_WebAccess.UserLib;
using WebAccess;


namespace ASPNetCore_WebAccess
{
    public class WebAccessRun
    {
        public KartBilgileri krtblglr = null;
        private static string xmlFilePath = "lastCardSetting.xml";
        private static ulong? lastSuccessfulCardId = null;
        public WebAccessRun(HttpContext Context)
        {


            // WebAccess sınıfına bu şekilde ulaşabilirsiniz
            var webAccessInstance = new ASPNetCore_WebAccess.WebAccess("", false, Context);



            WebAccess = new WebAccess("", false, Context);

            /* Cihaza Yanıt İşlemleri */
            if (WebAccess.Is_Session_Valid(WebAccess.Params.Session_Id)) // Session id geçerli ise
            {

                switch (WebAccess.Params.Message_Type)
                {

                    case HttpMessageType.Read_Card: // Kart okutuldu ise
                        {
                            string krtid = WebAccess.Params.Card_Id.ToString();
                            krtid = krtid.PadLeft(10, '0').Substring(0, 10);

                            //Console.WriteLine("1->" + ",  " + "SINIRSIZ KART " + WebAccess.Params.Log_Event.ToString() + ",  " + WebAccess.Params.Card_Id);
                            /* Kullanıcı kart okutunca bu mesaj gelir.
                             * Röle çekme, ekrana mesaj yazdırma ve ses sinyalleri üreterek online geçiş kontrol işlemlerinizi burada yapabilirsiniz. */


                            if (WebAccess.IsSuccessEvent(WebAccess.Params.Log_Event) == true) // Başarılı bir geçiş ise


                            // if (WebAccess.Params.Reader_Num > 0 && WebAccess.Params.Reader_Num <= WebAccess.Params.Reader_Count && ((WebAccess.Params.Card_Id > 0 && WebAccess.Params.Card_Id < WebAccess.Empty_Card) || WebAccess.Params.Data_Count > 0)) // Geçerli bir kart okutulmuş ise
                            // if (Online_Access_Control()) // Geçiş yetkisi varsa.
                            {
                                Console.WriteLine("1->" + ",  " + "SINIRSIZ KART " + WebAccess.Params.Log_Event.ToString() + ",  " + WebAccess.Params.Card_Id);

                                using (UnitOfWork uow = new UnitOfWork())
                                {
                                    uow.ConnectionString = "Integrated Security=SSPI;Pooling=false;Data Source =.\\SQLEXPRESS;Initial Catalog = ZekiKod_Kantin";
                                    var cihazbilgisi = new XPCollection<Cihazlar>(uow);
                                    var chz = cihazbilgisi.Where(x => x.CihazId == WebAccess.Params.Device_Id.ToString());
                                    if (chz.Count() == 0)
                                    {
                                        Cihazlar chzb = new Cihazlar(uow) { CihazId = WebAccess.Params.Device_Id.ToString(), Modeli = WebAccess.Params.Screen.Model.ToString(), OkuyucuSayisi = WebAccess.Params.Reader_Count.ToString() };
                                        chzb.Save();
                                        uow.CommitChanges();
                                    }
                                    var ucrtgcs = new XPCollection<GecisUcretleri>(uow).Where(x => x.Tarih.Date <= DateTime.Today.Date).LastOrDefault();
                                    var KartBilgileri = new XPCollection<KartBilgileri>(uow);
                                    krtblglr = KartBilgileri.Where(x => x.KartNo == krtid.ToString()).FirstOrDefault();


                                    //if (krtblglr == null&&)
                                    //{
                                    //    KartBilgileri krt = new KartBilgileri(uow) { KartNo = krtid.ToString() };


                                    //    krt.Save();
                                    //    uow.CommitChanges();

                                    //}
                                    //else
                                    try
                                    {

                                        if (krtblglr != null && krtblglr.SinirsizGecis == true)
                                        {

                                            WebAccess.Send_Sound(WebAccess.Params.Reader_Num, SoundSignalType.CardOk); // İşlem yapılan okuyucuya ses sinyali vermesini söyle.
                                            WebAccess.Send_Trigger_Relay(WebAccess.Params.Reader_Num, 1000); // İşlem yapılan okuyucunun rölesini 2000ms(2 saniye) tetikle.

                                            XmlHelper.CreateOrUpdateXml(xmlFilePath, krtid.ToString(), WebAccess.Params.Reader_Num.ToString());
                                            Console.WriteLine("4->" + ",  " + "Sınırsız Kart Tetikledi " + WebAccess.Params.Log_Event.ToString() + krtblglr.KartBakiye.ToString());
                                            // Turnike dönme sinyali alındığında çalışacak kod
                                            //if (WebAccess.Params.Log_Event==LogEvent.DoorSensorActive)
                                            //{


                                            //    GirisCikislar grs = new GirisCikislar(uow)
                                            //    {
                                            //        Tarih = DateTime.Now,
                                            //        Tutar = ucrtgcs.Ucret
                                            //    };
                                            //    grs.Save();
                                            //    krtblglr.GirisCikislars.Add(grs);
                                            //    uow.CommitChanges();
                                            //}
                                        }

                                        else if (krtblglr != null && krtblglr.KartBakiye >= ucrtgcs.Ucret)
                                        {
                                            decimal indrmliucret = 0;
                                            if (krtblglr.indirimli!=null)
                                            {
                                                 indrmliucret = (ucrtgcs.Ucret / 100) * krtblglr.indirimli.indirimOrani;
                                            }
                                            else
                                            {
                                                indrmliucret = ucrtgcs.Ucret;
                                            }
                                             

                                            //krtblglr.KartBakiye -= indrmliucret;
                                            //krtblglr.Save();
                                            //uow.CommitChanges();
                                            KartBilgileri = new XPCollection<KartBilgileri>(uow);
                                            XmlHelper.CreateOrUpdateXml(xmlFilePath, krtid.ToString(), WebAccess.Params.Reader_Num.ToString());

                                            WebAccess.Send_Sound(WebAccess.Params.Reader_Num, SoundSignalType.CardOk); // İşlem yapılan okuyucuya ses sinyali vermesini söyle.
                                            WebAccess.Send_Trigger_Relay(WebAccess.Params.Reader_Num, 1000); // İşlem yapılan okuyucunun rölesini 1000ms(1 saniye) tetikle.
                                            Console.WriteLine("4->" + ",  " + "Tetikledi " + WebAccess.Params.Log_Event.ToString() + "  " + krtblglr.KartBakiye.ToString());


                                            GirisCikislar grs = new GirisCikislar(uow)
                                            {
                                                Tarih = DateTime.Now,
                                                Tutar = indrmliucret
                                            };
                                            grs.Save();
                                            krtblglr.GirisCikislars.Add(grs);
                                            uow.CommitChanges();
                                        }





                                    }

                                    catch
                                    {

                                    }
                                    if (WebAccess.Params.Log_Event == LogEvent.DoorSensorActive)
                                    {
                                        // XML dosyasından veri okuma örneği
                                        var (krtno, readerno) = XmlHelper.ReadXml(xmlFilePath);

                                        var krtbil = new XPCollection<KartBilgileri>(uow);
                                        var gcbil = krtbil.Where(x => x.KartNo == krtno.ToString()).FirstOrDefault();

                                        GirisCikislar grs = new GirisCikislar(uow)
                                        {
                                            Tarih = DateTime.Now,
                                            Tutar = ucrtgcs.Ucret
                                        };
                                        grs.Save();
                                        gcbil.GirisCikislars.Add(grs);
                                        uow.CommitChanges();
                                        Console.WriteLine("5->" + ",  " + "SINIRSIZ KART " + WebAccess.Params.Log_Event.ToString() + ",  " + gcbil.KartNo + " " + gcbil.KartBakiye);
                                    }

                                }

                            }
                            else // Kişinin geçiş yetkisi yok.
                            {
                                switch (WebAccess.Params.Screen.Model)
                                {
                                    case ScreenModel.TFT:  // Ekran modeli TFT ise
                                        {
                                            WebAccess.Send_Clear_Screen(0xFF0000); // Ekranı kırmızı renk ile temizle.
                                            WebAccess.Send_Draw_Icon(IconType.Error, 70, 40, 5, 0xFF0000); // TFT Ekrana hata ikonu çiz.
                                            WebAccess.Send_Draw_Text(0, 170, "Yetkisiz Kart", 5, 28, 0xFFFFFF, 0xFF0000, TextAlignment.Center, TextEncoding.UTF8); // TFT Ekrana mesaj yaz.
                                            WebAccess.Send_Sound(WebAccess.Params.Reader_Num, SoundSignalType.CardError); // İşlem yapılan okuyucuya ses sinyali vermesini söyle.
                                            break;
                                        }

                                    default: // Ekransız model ise
                                        {
                                            WebAccess.Send_Sound(WebAccess.Params.Reader_Num, SoundSignalType.CardError); // İşlem yapılan okuyucuya ses sinyali vermesini söyle.
                                            break;
                                        }
                                }
                            }

                            break;
                        }

                    case HttpMessageType.Completed: // Son yapılan kayıt işlemi başarıyla tamamlandı ise (Yeni bir kişi eklemek gibi)
                        {
                            /* Son yapılan kayıt işleminin başarıyla tamamlandığını bildirir. (Yeni bir kişi eklemek gibi)
                             * Eğer, cihaza bir kullanıcı eklediyseniz, eklenen kullanıcının başarıyla cihaza tanıtıldığından emin olmuş olursunuz.
                             * Bu durumda veritabanınızda değişiklik yaparak kullanıcının her seferinde tekrar tekrar cihaza gönderilmesini engelleyebilirsiniz.
                             *
                             * Ardından bu cihaza gönderilecek kullanıcı varsa sıradakini hemen burada gönderebilirsiniz.
                             */

                            // Tamamlanan işlemin türü.
                            switch (WebAccess.Params.Completed_Type)
                            {
                                case HttpCompletedType.User_Inserted: // Kullanıcı eklendi.
                                case HttpCompletedType.User_Updated: // Var olan kullanıcı güncellendi.
                                    {
                                        /* Cihaza gönderilecek yeni kullanıcı varsa burada gönderebilirsiniz. */

                                        /*
                                        Console.WriteLine("");
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        Console.WriteLine("Completed ->   User Count : " + WebAccess.Params.User_Count + ",  Reader Count: " + WebAccess.Params.Reader_Count + ",  Log Count: " + WebAccess.Params.Log_Count + ",  Time : " + DateTime.Now.ToString());
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        Console.WriteLine("     - Device Id                     : " + WebAccess.Params.Device_Id);
                                        Console.WriteLine("     - Process Id                    : " + WebAccess.Params.Process_Id);
                                        Console.WriteLine("     - Card Id                       : " + WebAccess.Params.Card_Id);
                                        Console.WriteLine("     - Multi User                    : " + WebAccess.Params.Multi_User);
                                        Console.WriteLine("     - Written User Count            : " + WebAccess.Params.Written_User_Count);
                                        Console.WriteLine("     - Written User Forbidden Count  : " + WebAccess.Params.Written_User_Forbidden_Count);
                                        Console.WriteLine("     - Written User Unforbidden Count: " + WebAccess.Params.Written_User_Unforbidden_Count);
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");

                                        // Gönderilmeyi bekleyen kullanıcıları cihaza gönder. Buradaki işlemler cihaza kullanıcı gönderilmesine örnek olması içindir.
                                        Send_Users();
                                        // */

                                        break;
                                    }

                                case HttpCompletedType.User_Capacity_Reached: // Cihaz kullanıcı kapasitesi dolmuş.
                                    {
                                        /* Cihazın kullanıcı kapasitesi dolduğundan yollanan kişi kaydedilemedi.. */

                                        /*
                                        Console.WriteLine("");
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        Console.WriteLine("User_Capacity_Reached ->   User Count : " + WebAccess.Params.User_Count + ",  Reader Count: " + WebAccess.Params.Reader_Count + ",  Log Count: " + WebAccess.Params.Log_Count + ",  Time : " + DateTime.Now.ToString());
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        Console.WriteLine("     - Device Id                     : " + WebAccess.Params.Device_Id);
                                        Console.WriteLine("     - Process Id                    : " + WebAccess.Params.Process_Id);
                                        Console.WriteLine("     - Card Id                       : " + WebAccess.Params.Card_Id);
                                        Console.WriteLine("     - Multi User                    : " + WebAccess.Params.Multi_User);
                                        Console.WriteLine("     - Written User Count            : " + WebAccess.Params.Written_User_Count);
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        // */

                                        break;
                                    }

                                case HttpCompletedType.User_Forbidden: // Kullanıcı yasaklandı.
                                    {
                                        /* Geçişi yasaklanacak olan başka kullanıcı varsa burada yasaklayabilirsiniz. */
                                        // WebAccess.Send_User_Forbidden(35478); // Kart id`si 35478 olan kullanıcının geçişini yasakla.
                                        break;
                                    }

                                case HttpCompletedType.User_Unforbidden: // Kullanıcının yasağı kaldırıldı.
                                    {
                                        /* Geçiş yasağı kaldırılacak olan başka kullanıcı varsa burada kaldırabilirsiniz. */
                                        // WebAccess.Send_User_Unforbidden(35478); // Kart id`si 35478 olan kullanıcının geçiş yasağını kaldır.
                                        break;
                                    }

                                case HttpCompletedType.User_Write_Data:  // Kullanıcı kartına veri yazıldı.
                                    {
                                        /* DESFire veya mifare karta veri yazıldı. */

                                        /*
                                        Console.WriteLine("");
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        Console.WriteLine("User_Write_Data ->     Device Id : " + WebAccess.Params.Device_Id);
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        // */

                                        /*
                                        if (WebAccess.Params.Card_Id > 0 && WebAccess.Params.Card_Id < WebAccess.Empty_Card) // Cihaz kartı görüyor ise
                                            if (Continue_User_Write_Data(WebAccess.Params.Process_Id)) // Yazmaya devam edilecek ise
                                            {
                                                // Bu satır örnektir. Process_Id ile bildirilen son işleme ait bilgileri veritabanından yükleyip sonraki yazılacak bilgileri tekrar karta yazmak için kullanabilirsiniz.
                                                Load_User_From_DB(WebAccess.Params.Process_Id);

                                                WebAccess.Send_Write_Card_Data(1234, 0, Sector_No, System.Text.Encoding.UTF8.GetBytes("< Log Time: " + DateTime.Now.ToString() + ">   "), File_Data_Type);
                                            }

                                        // Bu satır örnektir. Process_Id ile bildirilen son işlem başarıyla tamamlandığı için bu görevi listeden siliyoruz.
                                        Delete_Process(WebAccess.Params.Process_Id);
                                        */

                                        break;
                                    }

                                case HttpCompletedType.User_Read_Data:  // Kullanıcı kartından veri okundu.
                                    {
                                        /* DESFire veya mifare karttan veri okundu. */

                                        /*
                                        string S = "";
                                        if (WebAccess.Params.Data != null)
                                            S = Encoding.UTF8.GetString(WebAccess.Params.Data);

                                        Console.WriteLine("");
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        Console.WriteLine("User_Read_Data");
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        Console.WriteLine("     - Device Id  : " + WebAccess.Params.Device_Id);
                                        Console.WriteLine("     - Data Count : " + WebAccess.Params.Data_Count);
                                        Console.WriteLine("     - Data       : " + S);

                                        switch (File_Data_Type)
                                        {
                                            case WebAccess.FileDataType.Base64:
                                                Console.WriteLine("     - Data       : " + (WebAccess.Params.Data_Count > 0 && WebAccess.Params.Data != null ? Encoding.UTF8.GetString(Convert.FromBase64String(S)) : ""));
                                                break;

                                            case WebAccess.FileDataType.Hex:
                                                Console.WriteLine("     - Data       : " + (WebAccess.Params.Data_Count > 0 && WebAccess.Params.Data != null ? Encoding.UTF8.GetString(Convert.FromHexString(S)) : ""));
                                                break;
                                        }
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        // */

                                        /*
                                        if (WebAccess.Params.Card_Id > 0 && WebAccess.Params.Card_Id < WebAccess.Empty_Card) // Cihaz kartı görüyor ise
                                            if (Continue_User_Read_Data(WebAccess.Params.Process_Id)) // Okumaya devam edilecek ise
                                            {
                                                // Bu satır örnektir. Process_Id ile bildirilen son işleme ait bilgileri veritabanından yükleyip sonraki okunacak alanları tekrar karttan okumak için kullanabilirsiniz.
                                                Load_User_From_DB(WebAccess.Params.Process_Id);

                                                WebAccess.Send_Read_Card_Data(5678, 0, 256, Sector_No, File_Data_Type);
                                            }

                                        // Bu satır örnektir. Process_Id ile bildirilen son işlem başarıyla tamamlandığı için bu görevi listeden siliyoruz.
                                        Delete_Process(WebAccess.Params.Process_Id);
                                        */

                                        break;
                                    }

                                case HttpCompletedType.User_Write_Data_Error:  // Kullanıcı kartına veri yazma hatası.
                                    {
                                        /* DESFire veya mifare karta veri yazılırken hata oluştu. */

                                        /*
                                        Console.WriteLine("");
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        Console.WriteLine("User_Write_Data_Error ->     Device Id : " + WebAccess.Params.Device_Id);
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        // */

                                        /*
                                        if (WebAccess.Params.Card_Id > 0 && WebAccess.Params.Card_Id < WebAccess.Empty_Card) // Cihaz kartı görüyor ise
                                            if (Continue_User_Write_Data(WebAccess.Params.Process_Id)) // Yazmaya devam edilecek ise
                                            {
                                                // Bu satır örnektir. Process_Id ile bildirilen son işleme ait bilgileri veritabanından yükleyip sonraki yazılacak bilgileri tekrar karta yazmak için kullanabilirsiniz.
                                                Load_User_From_DB(WebAccess.Params.Process_Id);

                                                WebAccess.Send_Write_Card_Data(1234, 0, Sector_No, System.Text.Encoding.UTF8.GetBytes("< Log Time: " + DateTime.Now.ToString() + ">   "), File_Data_Type);
                                            }

                                        // Bu satır örnektir. Process_Id ile bildirilen son işlem başarıyla tamamlandığı için bu görevi listeden siliyoruz.
                                        Delete_Process(WebAccess.Params.Process_Id);
                                        */

                                        break;
                                    }

                                case HttpCompletedType.User_Read_Data_Error:  // Kullanıcı kartından veri okuma hatası.
                                    {
                                        /* DESFire veya mifare klasik karttan veri okunurken hata oluştu. */

                                        /*
                                        Console.WriteLine("");
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        Console.WriteLine("User_Read_Data_Error ->     Device Id : " + WebAccess.Params.Device_Id);
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        // */

                                        /*
                                        if (WebAccess.Params.Card_Id > 0 && WebAccess.Params.Card_Id < WebAccess.Empty_Card) // Cihaz kartı görüyor ise
                                            if (Continue_User_Read_Data(WebAccess.Params.Process_Id)) // Okumaya devam edilecek ise
                                            {
                                                // Bu satır örnektir. Process_Id ile bildirilen son işleme ait bilgileri veritabanından yükleyip sonraki okunacak alanları tekrar karttan okumak için kullanabilirsiniz.
                                                Load_User_From_DB(WebAccess.Params.Process_Id);

                                                WebAccess.Send_Read_Card_Data(5678, 0, 256, Sector_No, File_Data_Type);
                                            }

                                        // Bu satır örnektir. Process_Id ile bildirilen son işlem başarıyla tamamlandığı için bu görevi listeden siliyoruz.
                                        Delete_Process(WebAccess.Params.Process_Id);
                                        */

                                        break;
                                    }
                            }

                            break;
                        }

                        //case HttpMessageType.I_Am_Here: // Buradayım mesajı ise
                        {
                            /* Cihaz hazır da beklediğini bildiriyor.
                             * Buradaki değerleri döndürmek zorunda değilsiniz. Örnek olarak verilmiştir. */

                            /*
                            WebAccess.Send_Erase_All_Logs();                    // Tüm log`ları sil.
                            WebAccess.Send_Log_Rollback(2000);                  // 2000 adet log kaydını geri al.
                            WebAccess.Send_Log_Rollforward(50);                 // İlk 50 adet log kaydını sil.

                            WebAccess.Send_Local_Sensor_Sensibility(100);       // Yangın, Acil Çıkış, Alarm ve Tamper Switch sensörlerinin sinyal hassasiyetini 100ms olarak ayarla.
                            WebAccess.Send_Door_Sensor_Sensibility(25);         // Reader portlarındaki S1, S2, ve Exit sensörlerinin sinyal hassasiyetini 25ms olarak ayarla.

                            WebAccess.Send_Erase_All_Users();                   // Tüm kullanıcıları sil.
                            WebAccess.Send_User_Forbidden(35478);               // Kart id`si 35478 olan kullanıcının geçişini tüm okuyucularda engelle.
                            WebAccess.Send_User_Unforbidden(35478);             // Kart id`si 35478 olan kullanıcının geçiş yasağını kaldır.
                            //*/

                            //*
                            Console.WriteLine("");
                            Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                            Console.WriteLine("I_Am_Here ->   User Count : " + WebAccess.Params.User_Count + ",  Reader Count: " + WebAccess.Params.Reader_Count + ",  Log Count: " + WebAccess.Params.Log_Count + ",  Time : " + DateTime.Now.ToString());
                            Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                            Console.WriteLine("     - Device Id  : " + WebAccess.Params.Device_Id);
                            Console.WriteLine("     - Multi User : " + WebAccess.Params.Multi_User);
                            Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");

                            // Gönderilmeyi bekleyen kullanıcıları cihaza gönder. Buradaki işlemler cihaza kullanıcı gönderilmesine örnek olması içindir.
                            // Send_Users();

                            Console.WriteLine("End-> I_Am_Here ->   Device_Id : " + WebAccess.Params.Device_Id + ",  Time : " + DateTime.Now.ToString());
                            Console.WriteLine("------------------------------------------------------------------------------------------");
                            // */

                            break;
                        }
                    case HttpMessageType.Log_Record: // Kart okutuldu ise
                        {
                            string krtid = WebAccess.Params.Card_Id.ToString();
                            krtid = krtid.PadLeft(8, '0').Substring(0, 8);

                            //Console.WriteLine("1->" + ",  " + "SINIRSIZ KART " + WebAccess.Params.Log_Event.ToString() + ",  " + WebAccess.Params.Card_Id);
                            /* Kullanıcı kart okutunca bu mesaj gelir.
                             * Röle çekme, ekrana mesaj yazdırma ve ses sinyalleri üreterek online geçiş kontrol işlemlerinizi burada yapabilirsiniz. */


                            //if (WebAccess.IsSuccessEvent(WebAccess.Params.Log_Event) == true) // Başarılı bir geçiş ise

                            if (true)
                           
                            // if (WebAccess.Params.Reader_Num > 0 && WebAccess.Params.Reader_Num <= WebAccess.Params.Reader_Count && ((WebAccess.Params.Card_Id > 0 && WebAccess.Params.Card_Id < WebAccess.Empty_Card) || WebAccess.Params.Data_Count > 0)) // Geçerli bir kart okutulmuş ise
                            // if (Online_Access_Control()) // Geçiş yetkisi varsa.
                            {
                                Console.WriteLine("1->" + ",  " + "SINIRSIZ KART " + WebAccess.Params.Log_Event.ToString() + ",  " + WebAccess.Params.Card_Id);

                                using (UnitOfWork uow = new UnitOfWork())
                                {
                                    uow.ConnectionString = "Integrated Security=SSPI;Pooling=false;Data Source =.\\SQLEXPRESS;Initial Catalog = ZekiKod_Kantin";
                                    var cihazbilgisi = new XPCollection<Cihazlar>(uow);
                                    var chz = cihazbilgisi.Where(x => x.CihazId == WebAccess.Params.Device_Id.ToString());
                                    try
                                    {
                                        if (chz.Count() == 0)
                                        {
                                            Cihazlar chzb = new Cihazlar(uow) { CihazId = WebAccess.Params.Device_Id.ToString(), Modeli = WebAccess.Params.Screen.Model.ToString(), OkuyucuSayisi = WebAccess.Params.Reader_Count.ToString() };
                                            chzb.Save();
                                            uow.CommitChanges();
                                        }
                                    }
                                    catch (Exception)
                                    {

                                        
                                    }
                                    
                                    
                                    var ucrtgcs = new XPCollection<GecisUcretleri>(uow).Where(x => x.Tarih.Date <= DateTime.Today.Date).LastOrDefault();
                                    var KartBilgileri = new XPCollection<KartBilgileri>(uow);
                                    krtblglr = KartBilgileri.Where(x => x.KartNo == krtid.ToString()).FirstOrDefault();


                                    //if (krtblglr == null&&)
                                    //{
                                    //    KartBilgileri krt = new KartBilgileri(uow) { KartNo = krtid.ToString() };


                                    //    krt.Save();
                                    //    uow.CommitChanges();

                                    //}
                                    //else
                                    try
                                    {

                                        if (krtblglr != null && krtblglr.SinirsizGecis == true)
                                        {

                                            WebAccess.Send_Sound(WebAccess.Params.Reader_Num, SoundSignalType.CardOk); // İşlem yapılan okuyucuya ses sinyali vermesini söyle.
                                            WebAccess.Send_Trigger_Relay(WebAccess.Params.Reader_Num, 1000); // İşlem yapılan okuyucunun rölesini 2000ms(2 saniye) tetikle.

                                            XmlHelper.CreateOrUpdateXml(xmlFilePath, krtid.ToString(), WebAccess.Params.Reader_Num.ToString());
                                            Console.WriteLine("4->" + ",  " + "Sınırsız Kart Tetikledi " + WebAccess.Params.Log_Event.ToString() + krtblglr.KartBakiye.ToString());
                                            // Turnike dönme sinyali alındığında çalışacak kod
                                            //if (WebAccess.Params.Log_Event==LogEvent.DoorSensorActive)
                                            //{


                                            //    GirisCikislar grs = new GirisCikislar(uow)
                                            //    {
                                            //        Tarih = DateTime.Now,
                                            //        Tutar = ucrtgcs.Ucret
                                            //    };
                                            //    grs.Save();
                                            //    krtblglr.GirisCikislars.Add(grs);
                                            //    uow.CommitChanges();
                                            //}
                                        }

                                        else if (krtblglr != null && krtblglr.KartBakiye >= ucrtgcs.Ucret)
                                        {
                                            krtblglr.KartBakiye -= ucrtgcs.Ucret;
                                            krtblglr.Save();
                                            uow.CommitChanges();

                                            XmlHelper.CreateOrUpdateXml(xmlFilePath, krtid.ToString(), WebAccess.Params.Reader_Num.ToString());

                                            WebAccess.Send_Sound(WebAccess.Params.Reader_Num, SoundSignalType.CardOk); // İşlem yapılan okuyucuya ses sinyali vermesini söyle.
                                            WebAccess.Send_Trigger_Relay(WebAccess.Params.Reader_Num, 1000); // İşlem yapılan okuyucunun rölesini 1000ms(1 saniye) tetikle.
                                            Console.WriteLine("4->" + ",  " + "Tetikledi " + WebAccess.Params.Log_Event.ToString() +"  "+ krtblglr.KartBakiye.ToString());

                                            
                                            GirisCikislar grs = new GirisCikislar(uow)
                                            {
                                                Tarih = DateTime.Now,
                                                Tutar = ucrtgcs.Ucret
                                            };
                                            grs.Save();
                                            krtblglr.GirisCikislars.Add(grs);
                                            uow.CommitChanges();
                                        }
                                      




                                    }

                                    catch
                                    {

                                    }
                                    if (WebAccess.Params.Log_Event == LogEvent.DoorSensorActive)
                                    {
                                        // XML dosyasından veri okuma örneği
                                        var (krtno, readerno) = XmlHelper.ReadXml(xmlFilePath);

                                        var krtbil = new XPCollection<KartBilgileri>(uow);
                                        var gcbil = krtbil.Where(x => x.KartNo == krtno.ToString()).FirstOrDefault();

                                        GirisCikislar grs = new GirisCikislar(uow)
                                        {
                                            Tarih = DateTime.Now,
                                            Tutar = ucrtgcs.Ucret
                                        };
                                        grs.Save();
                                        gcbil.GirisCikislars.Add(grs);
                                        uow.CommitChanges();
                                        Console.WriteLine("5->" + ",  " + "SINIRSIZ KART " + WebAccess.Params.Log_Event.ToString() + ",  " + gcbil.KartNo + " " + gcbil.KartBakiye);
                                    }


                                }

                            }
                            else // Kişinin geçiş yetkisi yok.
                            {
                                switch (WebAccess.Params.Screen.Model)
                                {
                                    case ScreenModel.TFT:  // Ekran modeli TFT ise
                                        {
                                            WebAccess.Send_Clear_Screen(0xFF0000); // Ekranı kırmızı renk ile temizle.
                                            WebAccess.Send_Draw_Icon(IconType.Error, 70, 40, 5, 0xFF0000); // TFT Ekrana hata ikonu çiz.
                                            WebAccess.Send_Draw_Text(0, 170, "Yetkisiz Kart", 5, 28, 0xFFFFFF, 0xFF0000, TextAlignment.Center, TextEncoding.UTF8); // TFT Ekrana mesaj yaz.
                                            WebAccess.Send_Sound(WebAccess.Params.Reader_Num, SoundSignalType.CardError); // İşlem yapılan okuyucuya ses sinyali vermesini söyle.
                                            break;
                                        }

                                    default: // Ekransız model ise
                                        {
                                            WebAccess.Send_Sound(WebAccess.Params.Reader_Num, SoundSignalType.CardError); // İşlem yapılan okuyucuya ses sinyali vermesini söyle.
                                            break;
                                        }
                                }
                            }

                            break;
                        }
                }
            }
        }

        private void Set_Device()
        {
            /* Çalışma şeklini ve davranış biçimini cihaza bildiren işlemleri buradaki gibi yapabilirsiniz. Buradaki kodlar sadece örnek olması içindir. */

            WebAccess.Send_I_Am_Here_Duration(15);              // Buradayım süresini değiştir.
            WebAccess.Send_Device_Time(DateTime.Now);           // Cihaz zamanını ayarla.

            // WebAccess.Session_Id_Mode(WebSessionIdMode.Random); // Session Id oluşturulurken izlenecek yolu bildirir. Random ise rastgele, DeviceId ise cihazın id`sinden Session_Id üretilir.
            // WebAccess.Check_Session_Id(true);                   // Session_Id doğrulamasını etkinleştirmek için kullanılır. Değeri false olursa session id paket içinde aranır ancak doğrulaması yapılmaz.
        }
        /// <summary>
        /// //////
        /// </summary>
        /// <returns></returns>
        /// 



        private bool Online_Access_Control()
        {
            // Bu fonksiyonda WebAccess.Params.Card_Id veya WebAccess.Params.Data parametresi kullanılarak yetkilendirme yapılır. Kişinin yetkisi varsa true döner.

            if (WebAccess.Params.Data_Count > 0) // QR okutulmuş ise
            {
                // WebAccess.Params.Data  parametresinde ki veriyi kullanın. Data alanı harf, sayı ve özel karakterler içerebilir.
            }
            else
            {
                // Card_Id  parametresinde ki veriyi kullan. Bu alan max 16 haneli bir sayı içerir.
            }

            return true;
        }

        private void Send_Users()
        {
            /* Bu metod cihaza kullanıcı gönderir.
             * Buradaki işlemler cihaza kullanıcı göndermeye örnek olması içindir.
             * Siz, cihaza gönderilecek kullanıcıları kendi veritabanınızdan listeleyip göndermelisiniz.
             * Bu işlem için "WebAccess.Params.Device_Id" parametresini kullanarak cihazı kullanan personelleri tespit etmelisiniz.
             */


            // Cihaza benzersiz bir işlem id`si gönder.
            // Bu değer sizin tarafınızdan belirlenecek olan bir unique id`dir ve cihaz tarafından "WebAccess.Params.Process_Id" parametresi ile tekrar geri gönderilecektir.
            WebAccess.Send_Process_Id((ulong)DateTime.Now.Ticks);

            if (WebAccess.Params.Multi_User) // Bu cihaz toplu kullanıcı ekleme özelliğini destekliyorsa
            {
                // Cihaza 10 tane personel gönder.
                // Buradaki kod sadece örnek olması için yazılmıştır.
                // Card_Id değerinin benzersiz(unique) olması için DateTime.Now.Ticks kullanılmıştır.
                // Kullanıcı adı ve sicil no alanları ise burada kullanılmamıştır.
                for (UInt64 Card_Id = 1; Card_Id < 10 + 1; Card_Id++)
                    WebAccess.Send(New_User(Card_Id + (ulong)DateTime.Now.Ticks, "", 0, WebAccess.Params.Reader_Count));
            }
            else // Cihaz toplu kullanıcı göndermeyi desteklemiyor.
            {
                // Tek kişi ekle. ->  Card_Id: Benzersiz(unique) olması için DateTime.Now.Ticks kullanılmıştır.
                WebAccess.Send(New_User((ulong)DateTime.Now.Ticks, "", 0, WebAccess.Params.Reader_Count));
            }
        }

        private string New_User(UInt64 Card_Id, string User_Name = "", UInt64 Registration_Number = 0, Int32 Device_Reader_Count = UserLib.MAX_READER_CAPACITY)
        {
            // Card_Id ile bildirilen kullanıcıyı cihaza ekler veya update eder.

            UserLib.UserReader Reader;
            UserLib.User User = new UserLib.User();

            /*
            // Korunması istenen geçiş bilgileri için buradaki ilgili alanları true yapın.
            User.Protected.Anti_Passback_Status = true; // Anti_Passback durum bilgisini koru.
            User.Protected.Credit = true; // Kontörü koru.
            User.Protected.Daily_Access_Count = true; // Günlük geçiş sayısını koru.
            User.Protected.LifeTime_Access_Count = true; // Okuyucuyu kullanma süresi içindeki geçiş sayısını koru.
            User.Protected.Last_Access_Time = true; // Son erişim zamanını koru.
            */

            User.Card_Info = Card_Id;
            User.User_Name = User_Name;
            User.Registration_Number = (Int64)Registration_Number;

            for (int i = 0; i < Device_Reader_Count; i++)
                User.Readers[i].Status.Enabled = true;


            //--------------------------------------------------------------------------------------------------------------------------

            Reader = User.Readers[0]; // 1`nolu reader`a konumlan. Listede ki ilk kayıt 0`dan başladığı için 1`nolu reader 0. sıradadır.

            // Eklenecek/Güncellenecek personel için 1.okuyucuyudan geçiş yapabilir.
            Reader.Status.Enabled = true;

            // Dakika türünden zaman kısıtlaması 10 dakika olsun. Personel bu okuyucudan geçiş yaptıktan sonra 10 dakika boyunca tekrar geçemesin.
            Reader.Time_Limit = 10;

            // Okuyucuyu kullanım şekli. Anti-Passback yapılması isteniyorsa "None" yerine "InPoint", "OutPoint" veya "FreeOutPoint" değerlerinden birini kullanılır.
            Reader.Status.Reader_Direction = UserLib.UserReader.ReaderDirection.InPoint;
            Reader.Status.Anti_Passback_Status = UserLib.AntiPassbackStatus.None; // Kullanıcının bu kapıdaki içeride/dışarıda durumu.

            // 1.Period geçiş saatleri ( 07:30 ~ 08:00 arasında maks. 1 geçiş hakkı. )
            Reader.Time_Zones.Period1.SetValue(new DateTime(1, 1, 1, 7, 30, 2), new DateTime(1, 1, 1, 8, 0, 0), 1);

            // 2.Period geçiş saatleri ( 12:00 ~ 13:00 arasında maks. 3 geçiş hakkı. )
            Reader.Time_Zones.Period2.SetValue(new DateTime(1, 1, 1, 12, 0, 4), new DateTime(1, 1, 1, 13, 0, 0), 3);

            //--------------------------------------------------------------------------------------------------------------------------

            Reader = User.Readers[1]; // 2`nolu reader`a konumlan. Listede ki ilk kayıt 0`dan başladığı için 2`nolu reader 1. sıradadır.

            // Eklenecek/Güncellenecek personel için 1.okuyucuyudan geçiş yapabilir.
            Reader.Status.Enabled = true;

            // Dakika türünden zaman kısıtlaması 3 dakika olsun. Personel bu okuyucudan geçiş yaptıktan sonra 3 dakika boyunca tekrar geçemesin.
            Reader.Time_Limit = 3;

            // Okuyucuyu kullanım şekli. Anti-Passback yapılması isteniyorsa "None" yerine "InPoint", "OutPoint" veya "FreeOutPoint" değerlerinden birini kullanılır.
            Reader.Status.Reader_Direction = UserLib.UserReader.ReaderDirection.OutPoint;
            Reader.Status.Anti_Passback_Status = UserLib.AntiPassbackStatus.None; // Kullanıcının bu kapıdaki içeride/dışarıda durumu.

            //--------------------------------------------------------------------------------------------------------------------------

            // Console.WriteLine(User.ToJSON(Device_Reader_Count));

            return User.ToJSON(Device_Reader_Count);
        }

        public WebAccess WebAccess;
    }
}


--- CS Dosya Sonu: WebAccess\WebAccess\WebAccess_Lib\WebAccessRun.cs ---

==============================================

--- CS Dosya Başlangıcı: WebAccess\WebAccess\XmlHelper.cs ---

using System.Xml;

namespace WebAccess
{
    using System.Xml;

    public class XmlHelper
    {
        public static void CreateOrUpdateXml(string filePath, string reader, string kartno)
        {
            XmlDocument doc = new XmlDocument();

            XmlElement root = doc.CreateElement("Settings");
            doc.AppendChild(root);

            XmlElement veri1Element = doc.CreateElement("reader");
            veri1Element.InnerText = reader;
            root.AppendChild(veri1Element);

            XmlElement veri2Element = doc.CreateElement("kartno");
            veri2Element.InnerText = kartno;
            root.AppendChild(veri2Element);

            doc.Save(filePath);
        }

        public static (string reader, string kartno) ReadXml(string filePath)
        {
            XmlDocument doc = new XmlDocument();
            doc.Load(filePath);

            XmlNode veri1Node = doc.SelectSingleNode("/Settings/reader");
            XmlNode veri2Node = doc.SelectSingleNode("/Settings/kartno");

            string reader = veri1Node?.InnerText ?? string.Empty;
            string kartno = veri2Node?.InnerText ?? string.Empty;

            return (reader, kartno);
        }
    }

}


--- CS Dosya Sonu: WebAccess\WebAccess\XmlHelper.cs ---

==============================================

--- RAZOR Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\_Imports.razor ---

@using System.Net.Http
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.JSInterop
@using DevExpress.Blazor
@using DevExpress.ExpressApp.Blazor.Components
@using YildizOtoMasyonKart.Blazor.Server


--- RAZOR Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\_Imports.razor ---

==============================================

--- JSON Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\.config\dotnet-tools.json ---

{
  "version": 1,
  "isRoot": true,
  "tools": {
    "dotnet-ef": {
      "version": "8.0.6",
      "commands": [
        "dotnet-ef"
      ],
      "rollForward": false
    }
  }
}

--- JSON Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\.config\dotnet-tools.json ---

==============================================

--- RAZOR Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\App.razor ---

<Router AppAssembly="@typeof(Program).Assembly" AdditionalAssemblies="new[] { typeof(DevExpress.ExpressApp.Blazor.BlazorApplication).Assembly }">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" />
    </Found>
    <NotFound>
        <LayoutView>
            <PageTitle>Not found</PageTitle>
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>


--- RAZOR Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\App.razor ---

==============================================

--- JSON Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\appsettings.Development.json ---

{
  "DetailedErrors": true,
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information",
      "DevExpress.ExpressApp": "Information"
    }
  },
  "DevExpress": {
    "ExpressApp": {
      "EnableDiagnosticActions": false
    }
  }
}

--- JSON Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\appsettings.Development.json ---

==============================================

--- JSON Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\appsettings.json ---

{
    "ConnectionStrings": {
       // "DefaultConnection": "Integrated Security=SSPI;Pooling=false;Data Source=.\\sqlexpress;Initial Catalog=ZekiKod_Kantin",
        "DefaultConnection": "Data Source=.\\SQLEXPRESS;Initial Catalog=ZekiKod_Kantin;Integrated Security=False;User Id=zekikod;Password=9726;MultipleActiveResultSets=True;",
        "EasyTestConnectionString": "Integrated Security=SSPI;Pooling=false;Data Source=(localdb)\\mssqllocaldb;Initial Catalog=YildizOtoMasyonKartEasyTest"
    },
    "Logging": {
        "LogLevel": {
            "Default": "Information",
            "Microsoft": "Warning",
            "Microsoft.Hosting.Lifetime": "Information",
            "DevExpress.ExpressApp": "Information"
        }
    },
    "AllowedHosts": "*",
    "DevExpress": {
        "ExpressApp": {
            "Languages": "tr-TR;",
            "ShowLanguageSwitcher": false,
            "ThemeSwitcher": {
                "DefaultItemName": "Office White",
                "ShowSizeModeSwitcher": true,
                "Groups": [
                    {
                        "Caption": "DevExpress Themes",
                        "Items": [
                            {
                                "Caption": "Blazing Berry",
                                "Url": "_content/DevExpress.Blazor.Themes/blazing-berry.bs5.min.css",
                                "Color": "#5c2d91"
                            },
                            {
                                "Caption": "Blazing Dark",
                                "Url": "_content/DevExpress.Blazor.Themes/blazing-dark.bs5.min.css",
                                "Color": "#46444a"
                            },
                            {
                                "Caption": "Office White",
                                "Url": "_content/DevExpress.Blazor.Themes/office-white.bs5.min.css",
                                "Color": "#fe7109"
                            },
                            {
                                "Caption": "Purple",
                                "Url": "_content/DevExpress.Blazor.Themes/purple.bs5.min.css",
                                "Color": "#7989ff"
                            }
                        ]
                    }
                ]
            }
        }
    }
}


--- JSON Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\appsettings.json ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\BlazorApplication.cs ---

using DevExpress.ExpressApp;
using DevExpress.ExpressApp.ApplicationBuilder;
using DevExpress.ExpressApp.Blazor;
using DevExpress.ExpressApp.Security;
using DevExpress.ExpressApp.Security.ClientServer;
using DevExpress.ExpressApp.SystemModule;
using DevExpress.ExpressApp.Xpo;
using YildizOtoMasyonKart.Blazor.Server.Services;

namespace YildizOtoMasyonKart.Blazor.Server;

public class YildizOtoMasyonKartBlazorApplication : BlazorApplication {
    public YildizOtoMasyonKartBlazorApplication() {
        ApplicationName = "YildizOtoMasyonKart";
        CheckCompatibilityType = DevExpress.ExpressApp.CheckCompatibilityType.DatabaseSchema;
        DatabaseVersionMismatch += YildizOtoMasyonKartBlazorApplication_DatabaseVersionMismatch;
    }
    protected override void OnSetupStarted() {
        base.OnSetupStarted();
#if DEBUG
        if(System.Diagnostics.Debugger.IsAttached && CheckCompatibilityType == CheckCompatibilityType.DatabaseSchema) {
            DatabaseUpdateMode = DatabaseUpdateMode.UpdateDatabaseAlways;
        }
#endif
    }
    private void YildizOtoMasyonKartBlazorApplication_DatabaseVersionMismatch(object sender, DatabaseVersionMismatchEventArgs e) {
#if EASYTEST
        e.Updater.Update();
        e.Handled = true;
#else
        if(System.Diagnostics.Debugger.IsAttached) {
            e.Updater.Update();
            e.Handled = true;
        }
        else {
            string message = "The application cannot connect to the specified database, " +
                "because the database doesn't exist, its version is older " +
                "than that of the application or its schema does not match " +
                "the ORM data model structure. To avoid this error, use one " +
                "of the solutions from the https://www.devexpress.com/kb=T367835 KB Article.";

            if(e.CompatibilityError != null && e.CompatibilityError.Exception != null) {
                message += "\r\n\r\nInner exception: " + e.CompatibilityError.Exception.Message;
            }
            throw new InvalidOperationException(message);
        }
#endif
    }
}


--- CS Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\BlazorApplication.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\BlazorModule.cs ---

using System.ComponentModel;
using DevExpress.ExpressApp;
using DevExpress.ExpressApp.DC;
using DevExpress.ExpressApp.Model;
using DevExpress.ExpressApp.Editors;
using DevExpress.ExpressApp.Actions;
using DevExpress.ExpressApp.Updating;
using DevExpress.ExpressApp.Model.Core;
using DevExpress.ExpressApp.Model.DomainLogics;
using DevExpress.ExpressApp.Model.NodeGenerators;
using DevExpress.Persistent.BaseImpl;

namespace YildizOtoMasyonKart.Blazor.Server;

[ToolboxItemFilter("Xaf.Platform.Blazor")]
// For more typical usage scenarios, be sure to check out https://docs.devexpress.com/eXpressAppFramework/DevExpress.ExpressApp.ModuleBase.
public sealed class YildizOtoMasyonKartBlazorModule : ModuleBase {
    //private void Application_CreateCustomModelDifferenceStore(object sender, CreateCustomModelDifferenceStoreEventArgs e) {
    //    e.Store = new ModelDifferenceDbStore((XafApplication)sender, typeof(ModelDifference), true, "Blazor");
    //    e.Handled = true;
    //}
    private void Application_CreateCustomUserModelDifferenceStore(object sender, CreateCustomModelDifferenceStoreEventArgs e) {
        e.Store = new ModelDifferenceDbStore((XafApplication)sender, typeof(ModelDifference), false, "Blazor");
        e.Handled = true;
    }
    public YildizOtoMasyonKartBlazorModule() {
    }
    public override IEnumerable<ModuleUpdater> GetModuleUpdaters(IObjectSpace objectSpace, Version versionFromDB) {
        return ModuleUpdater.EmptyModuleUpdaters;
    }
    public override void Setup(XafApplication application) {
        base.Setup(application);
        // Uncomment this code to store the shared model differences (administrator settings in Model.XAFML) in the database.
        // For more information, refer to the following topic: https://docs.devexpress.com/eXpressAppFramework/113698/
        //application.CreateCustomModelDifferenceStore += Application_CreateCustomModelDifferenceStore;zz
        application.CreateCustomUserModelDifferenceStore += Application_CreateCustomUserModelDifferenceStore;
    }
}


--- CS Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\BlazorModule.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\Controllers\GirisCikislarViewController.cs ---

using DevExpress.Data.Filtering;
using DevExpress.ExpressApp;
using DevExpress.ExpressApp.Actions;
using DevExpress.ExpressApp.Editors;
using DevExpress.ExpressApp.Layout;
using DevExpress.ExpressApp.Model.NodeGenerators;
using DevExpress.ExpressApp.SystemModule;
using DevExpress.ExpressApp.Templates;
using DevExpress.ExpressApp.Utils;
using DevExpress.Persistent.Base;
using DevExpress.Persistent.Validation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB;

namespace YildizOtoMasyonKart.Blazor.Server.Controllers
{
    // For more typical usage scenarios, be sure to check out https://documentation.devexpress.com/eXpressAppFramework/clsDevExpressExpressAppViewControllertopic.aspx.
    public partial class GirisCikislarViewController : ViewController
    {
        // Use CodeRush to create Controllers and Actions with a few keystrokes.
        // https://docs.devexpress.com/CodeRushForRoslyn/403133/
     
        public GirisCikislarViewController()
        {
            InitializeComponent();
            // Target Object Type
            TargetObjectType = typeof(GirisCikislar);

            // Action oluşturma
            SimpleAction markIadeAction = new SimpleAction(this, "MarkIadeAction", PredefinedCategory.Edit)
            {
                Caption = "İade Olarak İşaretle",
                ImageName = "Action_SimpleAction"
            };

            // Action tetiklendiğinde çalışacak metodun atanması
            markIadeAction.Execute += MarkIadeAction_Execute;
        }
        private void MarkIadeAction_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            // ObjectSpace kullanarak GirisCikislar tablosunu sorgulama
            var objectSpace = Application.CreateObjectSpace(typeof(GirisCikislar));
            var girisCikislarList = objectSpace.GetObjects<GirisCikislar>()
                .Where(gc => gc.Tarih >= DateTime.Now.AddHours(-2) && !gc.iade)
                .ToList();

            // 2 saatten eski olan kayıtları iade olarak işaretleme
            foreach (var girisCikis in girisCikislarList)
            {
                girisCikis.iade = true;
            }

            // Değişiklikleri kaydetme
            objectSpace.CommitChanges();

            // Bilgilendirme mesajı
            Application.ShowViewStrategy.ShowMessage($"{girisCikislarList.Count} kayıt iade olarak işaretlendi.", InformationType.Success, 4000, InformationPosition.Bottom);
        }
    }
}


--- CS Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\Controllers\GirisCikislarViewController.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\Controllers\GirisCikislarViewController.Designer.cs ---

namespace YildizOtoMasyonKart.Blazor.Server.Controllers
{
    partial class GirisCikislarViewController
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
        }

        #endregion
    }
}


--- CS Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\Controllers\GirisCikislarViewController.Designer.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\Controllers\HomeController.cs ---

using ASPNetCore_WebAccess;
using Microsoft.AspNetCore.Mvc;
using System.Diagnostics;
using WebAccess.Models;

namespace WebAccess.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;

        public HomeController(ILogger<HomeController> logger)
        {
            _logger = logger;
        }

        public string Index()
        {
            WebAccessRun WebAccess_Run = new WebAccessRun(HttpContext);
            Console.WriteLine(WebAccess_Run.WebAccess.GetResponse());
            return WebAccess_Run.WebAccess.GetResponse();
        }

        public IActionResult Privacy()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}

--- CS Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\Controllers\HomeController.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\Controllers\Kalanbakiyekontrol.cs ---

using DevExpress.Data.Filtering;
using DevExpress.ExpressApp;
using DevExpress.ExpressApp.Actions;
using DevExpress.ExpressApp.Editors;
using DevExpress.ExpressApp.Layout;
using DevExpress.ExpressApp.Model.NodeGenerators;
using DevExpress.ExpressApp.SystemModule;
using DevExpress.ExpressApp.Templates;
using DevExpress.ExpressApp.Utils;
using DevExpress.Persistent.Base;
using DevExpress.Persistent.Validation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace YildizOtoMasyonKart.Blazor.Server.Controllers
{
    // For more typical usage scenarios, be sure to check out https://documentation.devexpress.com/eXpressAppFramework/clsDevExpressExpressAppViewControllertopic.aspx.
    public partial class Kalanbakiyekontrol : ViewController
    {
        // Use CodeRush to create Controllers and Actions with a few keystrokes.
        // https://docs.devexpress.com/CodeRushForRoslyn/403133/
        public Kalanbakiyekontrol()
        {
            InitializeComponent();
            // Target required Views (via the TargetXXX properties) and create their Actions.
        }
        protected override void OnActivated()
        {
            base.OnActivated();
            // Perform various tasks depending on the target View.
        }
        protected override void OnViewControlsCreated()
        {
            base.OnViewControlsCreated();
            // Access and customize the target View control.
        }
        protected override void OnDeactivated()
        {
            // Unsubscribe from previously subscribed events and release other references and resources.
            base.OnDeactivated();
        }
    }
}


--- CS Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\Controllers\Kalanbakiyekontrol.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\Controllers\Kalanbakiyekontrol.Designer.cs ---

namespace YildizOtoMasyonKart.Blazor.Server.Controllers
{
    partial class Kalanbakiyekontrol
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
        }

        #endregion
    }
}


--- CS Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\Controllers\Kalanbakiyekontrol.Designer.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\Controllers\KasaViewController.cs ---

using DevExpress.ExpressApp;
using DevExpress.ExpressApp.Actions;
using DevExpress.Persistent.Base;
using DevExpress.Xpo;
using System;
using System.Linq;
using System.Collections.Generic;
using DevExpress.Data.Filtering;
using DevExpress.ExpressApp.Xpo;
using YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB;

namespace YildizOtoMasyonKart.Blazor.Server.Controllers
{
    public partial class KasaViewController : ViewController
    {
        public KasaViewController()
        {
            SimpleAction updateKartOdemeAction = new SimpleAction(this, "UpdateKartOdemeAction", PredefinedCategory.Edit)
            {
                Caption = "Kart Ödeme Eşle",
                ImageName = "Action_Update"
            };
            updateKartOdemeAction.Execute += UpdateKartOdemeAction_Execute;
        }

        private void UpdateKartOdemeAction_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            IObjectSpace objectSpace = Application.CreateObjectSpace(typeof(KasaDetay));
            var currentKasa = (Kasa)View.CurrentObject;

            if (currentKasa != null)
            {
                var session = ((XPObjectSpace)objectSpace).Session;

                // Kasa nesnesini mevcut session'dan tekrar yükle
                currentKasa = session.GetObjectByKey<Kasa>(currentKasa.Oid);

                // Tüm KartOdeme kayıtlarını al ve tarihine göre gruplandır
                var kartOdemeGruplar = session.Query<KartOdeme>()
                    .GroupBy(k => k.Tarih.Date)
                    .ToList();

                foreach (var grup in kartOdemeGruplar)
                {
                    var tarih = grup.Key;
                    var toplamKrediKarti = grup.Where(k => k.KrediKarti).Sum(k => k.YatanTutar);
                    var toplamNakit = grup.Where(k => !k.KrediKarti).Sum(k => k.YatanTutar);

                    // Belirli bir tarih için mevcut KasaDetay kaydını bulun
                    var kasaDetay = session.FindObject<KasaDetay>(
                        CriteriaOperator.And(
                            new BinaryOperator("Tarih", tarih),
                            new BinaryOperator("Kasa", currentKasa)
                        )
                    );

                    if (kasaDetay == null)
                    {
                        // Yeni KasaDetay kaydı oluştur
                        kasaDetay = new KasaDetay(session)
                        {
                            Tarih = tarih,
                            Kasa = currentKasa,
                            KrediKartiToplam = toplamKrediKarti,
                            NakitToplam = toplamNakit
                        };
                    }
                    else
                    {
                        // Mevcut KasaDetay kaydını güncelle
                        kasaDetay.KrediKartiToplam = toplamKrediKarti;
                        kasaDetay.NakitToplam = toplamNakit;
                    }

                    session.Save(kasaDetay); // KasaDetay'ı kaydet
                }

                objectSpace.CommitChanges(); // Tüm değişiklikleri kaydet
            }
        }
    }
}


--- CS Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\Controllers\KasaViewController.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\Controllers\KasaViewController.Designer.cs ---

namespace YildizOtoMasyonKart.Blazor.Server.Controllers
{
    partial class KasaViewController
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
        }

        #endregion
    }
}


--- CS Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\Controllers\KasaViewController.Designer.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\Controllers\Port.cs ---

using DevExpress.Data.Filtering;
using DevExpress.ExpressApp;
using DevExpress.ExpressApp.Actions;
using DevExpress.ExpressApp.Editors;
using DevExpress.ExpressApp.Layout;
using DevExpress.ExpressApp.Model.NodeGenerators;
using DevExpress.ExpressApp.SystemModule;
using DevExpress.ExpressApp.Templates;
using DevExpress.ExpressApp.Utils;
using DevExpress.Persistent.Base;
using DevExpress.Persistent.Validation;
using Microsoft.AspNetCore.Http;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace YildizOtoMasyonKart.Blazor.Server.Controllers
{
    public partial class Port : ViewController
    {
        private readonly IHttpContextAccessor _httpContextAccessor;

        public Port(IHttpContextAccessor httpContextAccessor)
        {
            _httpContextAccessor = httpContextAccessor;
            InitializeComponent();
            // Target required Views (via the TargetXXX properties) and create their Actions.
        }

        protected override void OnActivated()
        {
            base.OnActivated();
            if (_httpContextAccessor != null && _httpContextAccessor.HttpContext != null)
            {
                ASPNetCore_WebAccess.WebAccessRun WebAccess_Run = new ASPNetCore_WebAccess.WebAccessRun(_httpContextAccessor.HttpContext);
                var response = WebAccess_Run.WebAccess.GetResponse();
                // response ile işlemler...
            }
        }

        protected override void OnDeactivated()
        {
            // Unsubscribe from previously subscribed events and release other references and resources.
            base.OnDeactivated();
        }
    }
}


--- CS Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\Controllers\Port.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\Controllers\Port.Designer.cs ---

namespace YildizOtoMasyonKart.Blazor.Server.Controllers
{
    partial class Port
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
        }

        #endregion
    }
}


--- CS Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\Controllers\Port.Designer.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\Editors\BarcodeCamViewItem.cs ---

using DevExpress.ExpressApp;
using DevExpress.ExpressApp.Blazor; // IComponentContentHolder için
using DevExpress.ExpressApp.Editors;
using DevExpress.ExpressApp.Model;
using Microsoft.AspNetCore.Components; // RenderFragment ve builder API için
using System;
// BarcodeCamInterface component'inin bulunduğu namespace'i ekleyin
using YildizOtoMasyonKart.Blazor.Server.RazorComponents; // VEYA component'in bulunduğu doğru namespace

namespace YildizOtoMasyonKart.Module.Blazor.Editors // veya .Blazor.Server.Editors
{
    public interface IModelBarcodeCamViewItem : IModelViewItem { }

    [ViewItem(typeof(IModelBarcodeCamViewItem))]
    public class BarcodeCamViewItem : ViewItem
    {
        public class DxButtonHolder : IComponentContentHolder
        {
            private readonly View currentView; // Saklanan XAF View'ı

            public DxButtonHolder(View _currentView)
            {
                // XAF View'ını constructor'da alıp saklayalım
                this.currentView = _currentView;
            }

            // ComponentContent property'si RenderFragment döndürmeli
            RenderFragment IComponentContentHolder.ComponentContent => builder =>
            {
                // BarcodeCamInterface component'ini oluştur
                builder.OpenComponent<BarcodeCamInterface>(0);

                // BarcodeCamInterface'deki [Parameter] public View View { get; set; }
                // parametresine XAF View'ını ata.
                // Parametre adının "View" olduğundan emin olun.
                builder.AddAttribute(1, nameof(BarcodeCamInterface.View), this.currentView);

                // Component'i kapat
                builder.CloseComponent();
            };
        }

        public BarcodeCamViewItem(IModelViewItem model, Type objectType) : base(objectType, model.Id) { }

        // Kontrol olarak DxButtonHolder örneğini döndür
        protected override object CreateControlCore() => new DxButtonHolder(this.View);
    }
}

--- CS Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\Editors\BarcodeCamViewItem.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\Editors\ProductInvokeHelper.cs ---

using Microsoft.JSInterop;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Solution3.Module.Blazor.Editors
{
    public class ProductInvokeHelper
    {
        private Action<SearchItemProduct> action;

        public ProductInvokeHelper(Action<SearchItemProduct> action)
        {
            this.action = action;
        }
        [JSInvokable]
        public void SearchRecordCaller(SearchItemProduct param)
        {
            this.action.Invoke(param);
        }
    }

    public class ItemProduct
    {
        public Guid Oid { get; set; }
        public string DirectoryUrl { get; set; }
    }
    public class SearchItemProduct
    {
        public string Barcode { get; set; }
    }
}


--- CS Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\Editors\ProductInvokeHelper.cs ---

==============================================

--- XAFML Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\Model_tr.xafml ---

<?xml version="1.0" encoding="utf-8"?>
<Application Title="Yildiz OtoMasyon" Company="ZekiKod" Description="zekikod.com 05542626752">
  <BOModel>
    <Class Name="YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB.GirisCikislar">
      <OwnMembers>
        <Member Name="Tarih" EditMask="f" DisplayFormat="{0:f}" />
      </OwnMembers>
    </Class>
    <Class Name="YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB.KartOdeme">
      <OwnMembers>
        <Member Name="Tarih" DisplayFormat="{0:f}" EditMask="f" />
      </OwnMembers>
    </Class>
    <Class Name="YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB.SatilanUrunler">
      <OwnMembers>
        <Member Name="Tarih" DisplayFormat="{0:f}" EditMask="f" />
      </OwnMembers>
    </Class>
  </BOModel>
  <Views>
    <ListView Id="KartOdeme_ListView">
      <Columns>
        <ColumnInfo Id="Tarih" DisplayFormat="{0:dd.MM.yyyy HH:mm}" EditMask="d" />
      </Columns>
    </ListView>
  </Views>
</Application>

--- XAFML Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\Model_tr.xafml ---

==============================================

--- XAFML Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\Model.xafml ---

<?xml version="1.0" encoding="utf-8"?>
<Application PreferredLanguage="tr" Title="ZekiKod Yazılım">
  <BOModel>
    <Class Name="YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB.Cihazlar" DefaultDetailViewImage="" DefaultListViewImage="" ImageName="" />
    <Class Name="YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB.GecisUcretleri" DefaultDetailViewImage="" DefaultListViewImage="" ImageName="" />
    <Class Name="YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB.GirisCikislar" DefaultListViewImage="" DefaultDetailViewImage="" ImageName="">
      <OwnMembers>
        <Member Name="Kapi" LookupProperty="Adi" />
        <Member Name="KartBilgileri" LookupProperty="AdiSoyadi" />
        <Member Name="KartGrubu" LookupProperty="Grubu" />
      </OwnMembers>
    </Class>
    <Class Name="YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB.indirimler" DefaultDetailViewImage="" DefaultListViewImage="" ImageName="" />
    <Class Name="YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB.Kapilar" DefaultDetailViewImage="" DefaultListViewImage="" ImageName="" />
    <Class Name="YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB.KartBilgileri" DefaultDetailViewImage="" DefaultListViewImage="" ImageName="">
      <OwnMembers>
        <Member Name="indirimli" LookupProperty="Aciklama" />
        <Member Name="KartGrubu" LookupProperty="Grubu" />
      </OwnMembers>
    </Class>
    <Class Name="YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB.KartGrubu" DefaultDetailViewImage="" DefaultListViewImage="" ImageName="" />
    <Class Name="YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB.KartOdeme" DefaultDetailViewImage="" DefaultListViewImage="" ImageName="">
      <OwnMembers>
        <Member Name="KartBilgisi" LookupProperty="AdiSoyadi" />
      </OwnMembers>
    </Class>
    <Class Name="YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB.Kasa" DefaultDetailViewImage="" DefaultListViewImage="" ImageName="" />
    <Class Name="YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB.KasaDetay" DefaultDetailViewImage="" DefaultListViewImage="" ImageName="" />
    <Class Name="YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB.SatilanUrunler" DefaultDetailViewImage="" DefaultListViewImage="" ImageName="">
      <OwnMembers>
        <Member Name="KartBilgisi" LookupProperty="AdiSoyadi" />
        <Member Name="Kategori" LookupProperty="Kategori" />
      </OwnMembers>
    </Class>
    <Class Name="YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB.UrunKategori" DefaultDetailViewImage="" DefaultListViewImage="" ImageName="" />
    <Class Name="YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB.Urunler" DefaultDetailViewImage="" DefaultListViewImage="" ImageName="">
      <OwnMembers>
        <Member Name="Kategori" LookupProperty="Kategori" />
      </OwnMembers>
    </Class>
  </BOModel>
  <NavigationItems NavigationStyle="NavBar" ShowImages="False" StartupNavigationItem="KartBilgileri_ListView">
    <Items>
      <Item Id="KartBilgileri_ListView" ViewId="KartBilgileri_ListView" ObjectKey="" Index="0" IsNewNode="True" />
      <Item Id="@d6202129-3efe-4e8c-9687-0700ca99a5a5" ViewId="@SatisEkrani" IsNewNode="True" />
      <Item Id="Default">
        <Items>
          <Item Id="KartBilgileri_ListView" Removed="True" />
        </Items>
      </Item>
    </Items>
  </NavigationItems>
  <Options UIType="SingleWindowSDI" RestoreTabbedMdiLayout="False" ShowTabImage="True" />
  <SchemaModules>
    <SchemaModule Name="SystemModule" Version="24.1.3.0" IsNewNode="True" />
  </SchemaModules>
  <Views>
    <DashboardView Id="@SatisEkrani" Caption="SatisEkrani" IsNewNode="True">
      <Items IsNewNode="True">
        <BarcodeCamViewItem Id="@SatisEkrani" IsNewNode="True" />
      </Items>
      <Layout IsNewNode="True">
        <LayoutGroup Id="Main" IsNewNode="True">
          <LayoutItem Id="@SatisEkrani" ViewItem="@SatisEkrani" Index="0" IsNewNode="True" />
        </LayoutGroup>
      </Layout>
    </DashboardView>
    <ListView Id="GirisCikislar_ListView" IsFooterVisible="True" AutoExpandAllGroups="True" IsGroupPanelVisible="True">
      <Columns>
        <ColumnInfo Id="Kapi" LookupProperty="Adi" />
        <ColumnInfo Id="Tutar">
          <Summary>
            <ColumnSummaryItem Id="@d898802b-c225-4ff0-b54b-752b4861f45d" SummaryType="Sum" IsNewNode="True" />
          </Summary>
        </ColumnInfo>
        <ColumnInfo Id="KartGrubu" LookupProperty="Grubu" />
        <ColumnInfo Id="KartBilgileri" LookupProperty="AdiSoyadi" />
        <ColumnInfo Id="iade">
          <Summary>
            <ColumnSummaryItem Id="@6e7f0451-da14-4956-8129-14eb8725b76d" SummaryType="Count" IsNewNode="True" />
          </Summary>
        </ColumnInfo>
      </Columns>
    </ListView>
    <DetailView Id="KartBilgileri_DetailView">
      <Layout>
        <LayoutGroup Id="Main" RelativeSize="100">
          <LayoutGroup Id="SimpleEditors" RelativeSize="37.72652388797364">
            <LayoutGroup Id="KartBilgileri" RelativeSize="84.27947598253274">
              <LayoutGroup Id="KartBilgileri_col1" RelativeSize="49.91023339317774">
                <LayoutItem Id="KartNo" RelativeSize="20" />
                <LayoutItem Id="KartID" ViewItem="KartID" Index="1" RelativeSize="15" IsNewNode="True" />
                <LayoutItem Id="AdiSoyadi" Index="2" RelativeSize="15" />
                <LayoutItem Id="Telefonu" Index="3" RelativeSize="15" />
                <LayoutItem Id="Email" Index="4" RelativeSize="15" />
                <LayoutItem Id="KartBakiye" Index="5" RelativeSize="20" />
              </LayoutGroup>
              <LayoutGroup Id="KartBilgileri_col2" RelativeSize="50.08976660682226">
                <LayoutItem Id="KartGrubu" RelativeSize="20" />
                <LayoutItem Id="SinirsizGecis" RelativeSize="15" />
                <LayoutItem Id="indirimli" RelativeSize="65" />
                <LayoutItem Id="KartID" Removed="True" />
              </LayoutGroup>
            </LayoutGroup>
            <LayoutGroup Id="XPObject" RelativeSize="15.720524017467248">
              <LayoutItem Id="Oid" RelativeSize="100" />
            </LayoutGroup>
          </LayoutGroup>
          <TabbedGroup Id="Tabs" RelativeSize="62.27347611202636">
            <LayoutGroup Id="KartOdemes" RelativeSize="100">
              <LayoutItem Id="KartOdemes" RelativeSize="100" />
            </LayoutGroup>
            <LayoutGroup Id="GirisCikislars" RelativeSize="100">
              <LayoutItem Id="GirisCikislars" RelativeSize="100" />
            </LayoutGroup>
          </TabbedGroup>
        </LayoutGroup>
      </Layout>
    </DetailView>
    <ListView Id="KartBilgileri_KartOdemes_ListView">
      <Columns>
        <ColumnInfo Id="YatanTutar">
          <Summary>
            <ColumnSummaryItem Id="@fe0e28ab-1608-4bee-b6c2-f366604a0b60" SummaryType="Sum" IsNewNode="True" />
          </Summary>
        </ColumnInfo>
      </Columns>
    </ListView>
    <ListView Id="KartBilgileri_ListView" IsFooterVisible="True">
      <Columns>
        <ColumnInfo Id="KartBakiye">
          <Summary>
            <ColumnSummaryItem Id="@795d7cde-a4c9-49d5-9234-c6fef9c872f8" SummaryType="Sum" IsNewNode="True" />
          </Summary>
        </ColumnInfo>
        <ColumnInfo Id="KartGrubu" LookupProperty="Grubu" />
        <ColumnInfo Id="indirimli" LookupProperty="Aciklama" />
      </Columns>
    </ListView>
    <ListView Id="KartBilgileri_SatilanUrunlers_ListView" IsFooterVisible="True">
      <Columns>
        <ColumnInfo Id="Fiyat">
          <Summary>
            <ColumnSummaryItem Id="@1a65e81b-8305-4e32-a67d-ad6b68b9cec5" SummaryType="Sum" IsNewNode="True" />
          </Summary>
        </ColumnInfo>
      </Columns>
    </ListView>
    <ListView Id="KartOdeme_ListView" IsFooterVisible="True">
      <Columns>
        <ColumnInfo Id="YatanTutar">
          <Summary>
            <ColumnSummaryItem Id="@24ef68ec-7353-431d-8443-1dd7f01c026a" SummaryType="Sum" IsNewNode="True" />
          </Summary>
        </ColumnInfo>
        <ColumnInfo Id="iade">
          <Summary>
            <ColumnSummaryItem Id="@b2db60c7-6fc0-4a07-8c34-17f6e72068d6" SummaryType="Count" IsNewNode="True" />
          </Summary>
        </ColumnInfo>
      </Columns>
    </ListView>
    <ListView Id="SatilanUrunler_ListView" IsFooterVisible="True" IsGroupPanelVisible="True">
      <Columns>
        <ColumnInfo Id="Fiyat">
          <Summary>
            <ColumnSummaryItem Id="@e2d97a27-dc37-4aed-82eb-639261b31848" SummaryType="Sum" IsNewNode="True" />
          </Summary>
        </ColumnInfo>
      </Columns>
    </ListView>
    <ListView Id="Urunler_ListView">
      <Columns>
        <ColumnInfo Id="Kategori" LookupProperty="Kategori" />
      </Columns>
    </ListView>
  </Views>
</Application>

--- XAFML Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\Model.xafml ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\Models\ErrorViewModel.cs ---

namespace WebAccess.Models
{
    public class ErrorViewModel
    {
        public string? RequestId { get; set; }

        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);
    }
}

--- CS Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\Models\ErrorViewModel.cs ---

==============================================

--- CSHTML Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\Pages\_Host.cshtml ---

@page "/"
@namespace YildizOtoMasyonKart.Blazor.Server
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using DevExpress.ExpressApp.Blazor.Components

<!DOCTYPE html>
<html lang="en">

<head>
     <script src="scripts.js"></script>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, shrink-to-fit=no" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <!-- meta name="theme-color" content="#000000" -->
    <title>ZekiKod Yazılım 5542626752</title>
    <base href="~/" />
    <component type="typeof(BootstrapThemeLink)" render-mode="Static" />
</head>
<body>
    @{
        string userAgent = Request.Headers["User-Agent"];
        bool isIE = userAgent.Contains("MSIE") || userAgent.Contains("Trident");
    }
    @if(isIE) {
        <link href="css/site.css" rel="stylesheet" />
        <div class="d-flex flex-column justify-content-center align-items-center h-100">
            <div class="d-flex">
                <img class="mt-2 mr-4" src="_content/DevExpress.ExpressApp.Blazor/images/Sad.svg" width="60" height="60" />
                <div>
                    <div class="h1">Internet Explorer is not supported.</div>
                    <p style="font-size: 1rem; opacity: 0.75;" class="m-0">YildizOtoMasyonKart cannot be loaded in Internet Explorer.<br>Please use a different browser.</p>
                </div>
            </div>
        </div>
    }
    else {
        <component type="typeof(SplashScreen)" render-mode="Static" param-Caption='"ZekiKod"' param-ImagePath='"images/SplashScreen.svg"' />

        <link href="_content/DevExpress.ExpressApp.Blazor/styles.css" rel="stylesheet" />
        <link href="css/site.css" rel="stylesheet" />
        // Uncomment this link to enable CSS isolation. For more information, refer to the following topic: https://learn.microsoft.com/en-us/aspnet/core/blazor/components/css-isolation
        //<link href="YildizOtoMasyonKart.Blazor.Server.styles.css" rel="stylesheet">

        <app class="d-none">
            <component type="typeof(App)" render-mode="Server" />
        </app>
        
        <component type="typeof(AlertsHandler)" render-mode="Server" />

        <div id="blazor-error-ui">
            <component type="typeof(BlazorError)" render-mode="Static" />
        </div>

        <script src="_framework/blazor.server.js"></script>
    }
   

</body>
</html>


--- CSHTML Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\Pages\_Host.cshtml ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\Program.cs ---

using System.Reflection;
using DevExpress.ExpressApp;
using DevExpress.ExpressApp.Blazor.DesignTime;
using DevExpress.ExpressApp.Blazor.Services;
using DevExpress.ExpressApp.Design;
using DevExpress.ExpressApp.Utils;

namespace YildizOtoMasyonKart.Blazor.Server;
public class Program : IDesignTimeApplicationFactory
{
    private static bool ContainsArgument(string[] args, string argument)
    {
        return args.Any(arg => arg.TrimStart('/').TrimStart('-').ToLower() == argument.ToLower());
    }

    public static int Main(string[] args)
    {
        if (ContainsArgument(args, "help") || ContainsArgument(args, "h"))
        {
            Console.WriteLine("Updates the database when its version does not match the application's version.");
            Console.WriteLine();
            Console.WriteLine($"    {Assembly.GetExecutingAssembly().GetName().Name}.exe --updateDatabase [--forceUpdate --silent]");
            Console.WriteLine();
            Console.WriteLine("--forceUpdate - Marks that the database must be updated whether its version matches the application's version or not.");
            Console.WriteLine("--silent - Marks that database update proceeds automatically and does not require any interaction with the user.");
            Console.WriteLine();
            Console.WriteLine($"Exit codes: 0 - {DBUpdaterStatus.UpdateCompleted}");
            Console.WriteLine($"            1 - {DBUpdaterStatus.UpdateError}");
            Console.WriteLine($"            2 - {DBUpdaterStatus.UpdateNotNeeded}");
        }
        else
        {
            DevExpress.ExpressApp.FrameworkSettings.DefaultSettingsCompatibilityMode = DevExpress.ExpressApp.FrameworkSettingsCompatibilityMode.Latest;
            DevExpress.ExpressApp.Security.SecurityStrategy.AutoAssociationReferencePropertyMode = DevExpress.ExpressApp.Security.ReferenceWithoutAssociationPermissionsMode.AllMembers;
            IHost host = CreateHostBuilder(args).Build();
            if (ContainsArgument(args, "updateDatabase"))
            {
                using (var serviceScope = host.Services.CreateScope())
                {
                    return serviceScope.ServiceProvider.GetRequiredService<DevExpress.ExpressApp.Utils.IDBUpdater>().Update(ContainsArgument(args, "forceUpdate"), ContainsArgument(args, "silent"));
                }
            }
            else
            {
                host.Run();
            }
        }
        return 0;
    }

    public static IHostBuilder CreateHostBuilder(string[] args) =>
        Host.CreateDefaultBuilder(args)
            .ConfigureWebHostDefaults(webBuilder => {
                webBuilder.UseStartup<Startup>();
                webBuilder.ConfigureKestrel(options => {
                    options.Limits.MaxResponseBufferSize = null;
                });
            });

    XafApplication IDesignTimeApplicationFactory.Create()
    {
        IHostBuilder hostBuilder = CreateHostBuilder(Array.Empty<string>());
        return DesignTimeApplicationFactoryHelper.Create(hostBuilder);
    }
}


--- CS Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\Program.cs ---

==============================================

--- RAZOR Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\RazorComponents\BarcodeCamInterface.razor ---

@page "/sales" // Veya sizin belirlediğiniz sayfa yolu

// --- Temel Blazor ve Sistem Kütüphaneleri ---
@using Microsoft.AspNetCore.Components.Web
@using System.Collections.ObjectModel
@using System.ComponentModel

// --- DevExpress Kütüphaneleri ---
@using DevExpress.Blazor
@using DevExpress.Data.Filtering // CriteriaOperator için

// --- XAF Kütüphaneleri ---
@using DevExpress.ExpressApp
@using DevExpress.ExpressApp.Blazor.Components.Models // View için (eğer hala gerekliyse)
@using DevExpress.ExpressApp.Blazor.Services // IXafApplicationProvider için
@using DevExpress.ExpressApp.Core // IObjectSpaceFactory için
@using DevExpress.ExpressApp.Data // ObjectSpace vs. için

// --- Projenizin İş Nesneleri (Business Objects) ---
// ****** BU USING DİREKTİFİNİN DOĞRU NAMESPACE'İ GÖSTERDİĞİNDEN EMİN OLUN ******
@using YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB
// *****************************************************************************

// --- Servis Enjeksiyonları ---
@implements IDisposable
@inject IJSRuntime JSRuntime
@inject IXafApplicationProvider ApplicationProvider
@inject IObjectSpaceFactory ObjectSpaceFactory

<style>
    /* --- Stiller önceki gibi kalabilir --- */
    .product-card { margin-bottom: 15px; cursor: pointer; transition: transform 0.15s ease-in-out, box-shadow 0.15s ease-in-out; border: 1px solid #e0e0e0; border-radius: 6px; min-height: 130px; display: flex; flex-direction: column; justify-content: space-between; background-color: #fff; box-shadow: 0 2px 5px rgba(0,0,0,0.05); }
    .product-card:hover { transform: translateY(-3px); box-shadow: 0 4px 10px rgba(0,0,0,0.1); }
    .product-card:active { transform: scale(0.98); }
    .product-card .card-body { padding: 10px; flex-grow: 1; display: flex; flex-direction: column; justify-content: center; text-align: center; }
    .product-card .card-title { font-size: 0.95em; font-weight: 600; margin-bottom: 5px; overflow: hidden; text-overflow: ellipsis; white-space: normal; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; min-height: 2.6em; }
    .product-card .card-text { font-size: 1.1em; font-weight: bold; color: #1a8a3c; margin-top: auto; }
    .dxbs-tab.nav-link { padding: 10px 15px; font-size: 1.05em; }
    #barcodeInput { font-size: 1.2em; padding: 10px 12px; height: auto; }
    .card-info-section .card { background-color: #f8f9fa; border: none;}
    .card-info-section .card-body { padding: 15px; }
    .card-info-section .card-body p { margin-bottom: 8px; font-size: 1.0em; }
    .cart-container { min-height: 250px; max-height: 50vh; overflow-y: auto; -webkit-overflow-scrolling: touch; border: 1px solid #e0e0e0; border-radius: 5px; padding: 5px 10px; background-color: #fff; margin-bottom: 15px; }
    .cart-item-row { display: flex; align-items: center; padding: 8px 0; border-bottom: 1px solid #f0f0f0; font-size: 1.0em; }
    .cart-item-row:last-child { border-bottom: none; }
    .cart-item-name { flex-grow: 1; margin-right: 10px; font-weight: 500; }
    .cart-item-price { width: 80px; text-align: right; font-weight: bold; }
    .cart-item-quantity { width: 110px; text-align: center; display: flex; align-items: center; justify-content: center; }
    .cart-item-quantity .dx-button { min-width: 30px; padding: 4px 6px; }
    .cart-item-quantity span { margin: 0 8px; font-weight: bold; min-width: 20px; display: inline-block; }
    .cart-item-actions { width: 50px; text-align: right; }
    .remove-item-btn.dx-button { padding: 5px 8px; line-height: 1; }
    .remove-item-btn .dx-icon { font-size: 1.1em; }
    .total-section { font-size: 1.4em; font-weight: bold; margin-top: 15px; padding: 15px 0; border-top: 2px solid #d0d0d0; text-align: right; }
    .main-action-button { padding: 12px 20px; font-size: 1.1em; }
</style>

<div class="container-fluid mt-3 pos-container">
    <div class="row">

        <!-- Sol Bölüm: Kategoriler ve Ürünler -->
        <div class="col-lg-7 col-xl-8 order-lg-1 pos-row">
            <h4>Ürünler</h4>
            <DxTabs @bind-ActiveTabIndex="ActiveCategoryIndex" ContentClass="mt-3">
                @if (Categories == null || !Categories.Any())
                {
                     <DxTabPage Text="Kategoriler Yükleniyor...">
                        <p>Lütfen bekleyin...</p>
                     </DxTabPage>
                }
                else
                {
                    @foreach (var category in Categories)
                    {
                        <DxTabPage Text="@GetCategoryName(category)"> @* İsim UrunKategori'den KategoriAdi ile alınacak *@
                            <div class="row g-3">
                                @foreach (var product in GetProductsForCategory(category))
                                {
                                    <div class="col-6 col-sm-4 col-md-4 col-lg-3 col-xl-3" @key="product.Oid">
                                        <DxCard CssClass="product-card" @onclick="() => AddItemToCart(product)">
                                            <BodyTemplate>
                                                <h5 class="card-title" title="@product.UrunAdi">@product.UrunAdi</h5>
                                                <p class="card-text">@product.Fiyat.ToString("C2")</p>
                                            </BodyTemplate>
                                        </DxCard>
                                    </div>
                                }
                                @if (!GetProductsForCategory(category).Any())
                                {
                                    <div class="col-12"><p>Bu kategoride ürün bulunmamaktadır.</p></div>
                                }
                            </div>
                        </DxTabPage>
                    }
                }
            </DxTabs>

             <div class="row mt-4">
                <div class="col-md-12">
                    <h5>Barkod Okut / Kart Okut</h5>
                     <DxTextBox @ref="barcodeInputRef"
                               @bind-Text="@Barcode"
                               Placeholder="Barkod veya Kart Numarası okutun..."
                               @onkeydown="HandleBarcodeKeyDown"
                               ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                               InputId="barcodeInput"
                               style="max-width: 400px;" />
                 </div>
            </div>
        </div>

        <!-- Sağ Bölüm: Sepet ve Kart Bilgileri -->
        <div class="col-lg-5 col-xl-4 order-lg-2 pos-row">
            @* Kart Bilgileri Alanı (Değişiklik yok) *@
            @if (!string.IsNullOrEmpty(KartNo)) { <div class="card-info-section mb-3"> <h4>Kart Bilgileri</h4> <div class="card"> <div class="card-body"> <p><strong>Kart No:</strong> @KartNo</p> <p><strong>Kullanıcı:</strong> @UserName</p> <p><strong>Bakiye:</strong> <span class="@(CardBalance >= TotalPrice ? "text-success" : "text-danger") fw-bold">@CardBalance.ToString("C2")</span></p> <DxButton Click="async () => await ClearCardInfo()" Text="Kartı Değiştir/Çıkar" SizeMode="SizeMode.Small" CssClass="mt-2" RenderStyle="ButtonRenderStyle.Warning"/> </div> </div> </div> } else { <div class="card-info-section mb-3"> <h4>Kart Bilgileri</h4> <div class="card"> <div class="card-body text-muted"> Kart okutulmadı. </div> </div> </div> }

            <h4>Sepet</h4>
            <div class="cart-container">
                @if (!CartItems.Any()) { <p class="text-muted text-center" style="line-height: 180px;">Sepetiniz boş.</p> } else {
                    @foreach (var item in CartItems) {
                        <div class="cart-item-row" @key="item.Product.Oid">
                            <div class="cart-item-name" title="@item.Product.UrunAdi">@item.Product.UrunAdi</div>
                            <div class="cart-item-quantity">
                                <DxButton Click="() => DecreaseQuantity(item)" RenderStyle="ButtonRenderStyle.Secondary" SizeMode="SizeMode.Small" IconCssClass="fas fa-minus" Text="" Enabled="item.Quantity > 1" title="Azalt"/>
                                <span>@item.Quantity</span>
                                <DxButton Click="() => IncreaseQuantity(item)" RenderStyle="ButtonRenderStyle.Secondary" SizeMode="SizeMode.Small" IconCssClass="fas fa-plus" Text="" title="Artır"/>
                            </div>
                            <div class="cart-item-price">@item.LineTotal.ToString("C2")</div>
                            <div class="cart-item-actions">
                                <DxButton Click="() => RemoveItemFromCart(item)" RenderStyle="ButtonRenderStyle.Danger" SizeMode="SizeMode.Small" IconCssClass="fas fa-times" Text="" CssClass="remove-item-btn" title="Ürünü Sepetten Çıkar"/>
                            </div>
                        </div>
                    }
                }
            </div>

            @* Toplam ve Ana Butonlar (Değişiklik yok) *@
            @if (CartItems.Any()) { <div class="total-section"> Toplam: @TotalPrice.ToString("C2") </div> <DxButton Click="async () => await CompletePurchase()" Text="Satışı Tamamla" CssClass="w-100 mt-3 main-action-button" RenderStyle="ButtonRenderStyle.Primary" SizeMode="SizeMode.Large" Enabled="CanCompletePurchase()" /> }
             <DxButton Click="async () => await ClearCart()" Text="Sepeti Temizle" CssClass="w-100 mt-2 main-action-button" RenderStyle="ButtonRenderStyle.Secondary" SizeMode="SizeMode.Large" Enabled="CartItems.Any()" />
        </div>
    </div>
</div>

@* ====================================================================== *@
@* C# KOD BLOĞU                                                            *@
@* ====================================================================== *@
@code {
    // --- Properties ---
    private IObjectSpace? objectSpace;
    private string Barcode { get; set; } = "";
    private string KartNo { get; set; } = "";
    private string UserName { get; set; } = "";
    private decimal CardBalance { get; set; } = 0;
    private ObservableCollection<CartItemViewModel> CartItems { get; set; } = new ObservableCollection<CartItemViewModel>();
    private List<Urunler> AllProducts { get; set; } = new List<Urunler>();

    // ****** İSİM GÜNCELLEMESİ: UrunKategorisi -> UrunKategori ******
    private List<UrunKategori> Categories { get; set; } = new List<UrunKategori>();
    // ************************************************************

    private int ActiveCategoryIndex { get; set; } = 0;
    private decimal TotalPrice => CartItems.Sum(item => item.LineTotal);
    [Parameter] public View View { get; set; } = default!;
    private DxTextBox? barcodeInputRef;

    // --- Lifecycle Methods ---
    protected override async System.Threading.Tasks.Task OnInitializedAsync() { await base.OnInitializedAsync(); }
    protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender) { await base.OnAfterRenderAsync(firstRender); if (firstRender) { try { if (ApplicationProvider == null) { Console.WriteLine("Hata: ApplicationProvider inject edilemedi!"); return; } var application = ApplicationProvider.GetApplication(); if (application == null) { Console.WriteLine("Hata: XAF Application alınamadı!"); return; } objectSpace = application.CreateObjectSpace(typeof(Urunler)); LoadInitialData(); await FocusBarcodeInput(); StateHasChanged(); } catch (Exception ex) { Console.WriteLine($"Başlangıç verileri yüklenirken hata oluştu: {ex.Message}"); await JSRuntime.InvokeVoidAsync("alert", "Veriler yüklenirken bir sorun oluştu. Lütfen sayfayı yenileyin."); } } }
    void IDisposable.Dispose() => objectSpace?.Dispose();

    // --- Data Loading ---
    private void LoadInitialData()
    {
        if (objectSpace == null) { Console.WriteLine("Uyarı: LoadInitialData çağrıldı ancak ObjectSpace null."); return; }
        try
        {
            AllProducts = objectSpace.GetObjects<Urunler>(CriteriaOperator.Parse("!IsNullOrEmpty(UrunAdi)")).OrderBy(p => p.UrunAdi).ToList();

            // ****** İSİM GÜNCELLEMESİ: UrunKategorisi -> UrunKategori ******
            // ****** Property Adı KONTROLÜ: OrderBy(c => c.KategoriAdi) - Doğru mu? ******
            Categories = objectSpace.GetObjects<UrunKategori>().OrderBy(c => c.Kategori).ToList();
            // *********************************************************************

        }
        catch (Exception ex) { Console.WriteLine($"Veri çekme hatası (LoadInitialData): {ex}"); AllProducts = new List<Urunler>(); Categories = new List<UrunKategori>(); } // Hata durumunda listeyi boşalt
    }

    // ****** İSİM GÜNCELLEMESİ: UrunKategorisi -> UrunKategori ******
    private List<Urunler> GetProductsForCategory(UrunKategori category)
    {
        if (category == null || AllProducts == null) return new List<Urunler>();
        // ****** Urunler sınıfınızdaki Kategori property'sinin adını ve tipinin 'UrunKategori' olduğunu kontrol edin ******
        return AllProducts.Where(p => p.Kategori != null && p.Kategori.Oid == category.Oid).ToList();
    }

    // ****** İSİM GÜNCELLEMESİ: UrunKategorisi -> UrunKategori ******
    // ****** Property Adı KONTROLÜ: category?.KategoriAdi - Doğru mu? ******
    private string GetCategoryName(UrunKategori category) => category?.Kategori ?? "İsimsiz Kategori";
    // *******************************************************************

    // --- Barcode / Card Handling ---
    private async System.Threading.Tasks.Task HandleBarcodeKeyDown(KeyboardEventArgs e) { if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(Barcode)) { await ProcessBarcodeScan(); Barcode = ""; await FocusBarcodeInput(); } }
    private async System.Threading.Tasks.Task ProcessBarcodeScan() { if (objectSpace == null || string.IsNullOrWhiteSpace(Barcode)) return; string currentInput = Barcode.Trim(); try { var kartBilgisi = objectSpace.FirstOrDefault<KartBilgileri>(k => k.KartNo == currentInput); if (kartBilgisi != null) { KartNo = kartBilgisi.KartNo; UserName = kartBilgisi.AdiSoyadi ?? "N/A"; CardBalance = kartBilgisi.KartBakiye; Console.WriteLine($"Kart bulundu: {UserName}, Bakiye: {CardBalance}"); } else { var product = objectSpace.FirstOrDefault<Urunler>(p => p.Barkodu == currentInput); if (product != null) { AddItemToCart(product); Console.WriteLine($"Ürün bulundu ve eklendi: {product.UrunAdi}"); } else { Console.WriteLine($"Girdi '{currentInput}' ile eşleşen kart veya ürün bulunamadı."); await JSRuntime.InvokeVoidAsync("alert", $"'{currentInput}' ile eşleşen Kart veya Ürün bulunamadı!"); } } } catch (Exception ex) { Console.WriteLine($"Barkod işleme hatası: {ex}"); await JSRuntime.InvokeVoidAsync("alert", "Barkod işlenirken bir hata oluştu."); } finally { StateHasChanged(); } }
    private async System.Threading.Tasks.Task ClearCardInfo() { KartNo = string.Empty; UserName = string.Empty; CardBalance = 0; StateHasChanged(); await FocusBarcodeInput(); }

    // --- Cart Management ---
    private void AddItemToCart(Urunler product) { if (product == null) return; var existingItem = CartItems.FirstOrDefault(item => item.Product.Oid == product.Oid); if (existingItem != null) { existingItem.Quantity++; Console.WriteLine($"Miktar artırıldı: {existingItem.Product.UrunAdi}, Yeni Miktar: {existingItem.Quantity}"); } else { CartItems.Add(new CartItemViewModel { Product = product, Quantity = 1 }); Console.WriteLine($"Yeni ürün eklendi: {product.UrunAdi}"); } }

    // ****** CS1059 HATASI DÜZELTMESİ ******
    private void IncreaseQuantity(CartItemViewModel item)
    {
        // Önce null kontrolü yap, sonra artır
        if (item != null)
        {
            item.Quantity++;
        }
    }
    // **************************************

    private void DecreaseQuantity(CartItemViewModel item) { if (item != null && item.Quantity > 1) item.Quantity--; }
    private void RemoveItemFromCart(CartItemViewModel item) { if (item != null) { Console.WriteLine($"Ürün çıkarıldı: {item.Product.UrunAdi}"); CartItems.Remove(item); } }
    private async System.Threading.Tasks.Task ClearCart() { CartItems.Clear(); Console.WriteLine("Sepet temizlendi."); await FocusBarcodeInput(); }

    // --- Purchase Completion ---
     private bool CanCompletePurchase() { if (!CartItems.Any()) return false; if (!string.IsNullOrEmpty(KartNo)) return CardBalance >= TotalPrice; return true; }
    private async System.Threading.Tasks.Task CompletePurchase() { if (!CanCompletePurchase()) { await JSRuntime.InvokeVoidAsync("alert", "Satış tamamlanamıyor. Lütfen sepeti ve kart bakiyesini kontrol edin."); return; } Console.WriteLine("Satış işlemi başlatılıyor..."); using var purchaseObjectSpace = ObjectSpaceFactory.CreateObjectSpace<SatilanUrunler>(); KartBilgileri? cardInPurchaseContext = null; try { if (!string.IsNullOrEmpty(KartNo)) { cardInPurchaseContext = purchaseObjectSpace.FirstOrDefault<KartBilgileri>(k => k.KartNo == KartNo); if (cardInPurchaseContext == null) { await JSRuntime.InvokeVoidAsync("alert", "Hata: Satış sırasında kart bilgisi veritabanında bulunamadı! Yönetici ile görüşün."); Console.WriteLine($"Kritik Hata: Kart No '{KartNo}' satış anında purchaseObjectSpace içinde bulunamadı."); return; } if (cardInPurchaseContext.KartBakiye < TotalPrice) { await JSRuntime.InvokeVoidAsync("alert", "Hata: İşlem sırasında bakiye yetersiz kaldı!"); CardBalance = cardInPurchaseContext.KartBakiye; StateHasChanged(); return; } Console.WriteLine($"Satış için Kart ({cardInPurchaseContext.KartNo}) bulundu, bakiye ({cardInPurchaseContext.KartBakiye}) yeterli."); } DateTime saleTime = DateTime.Now; foreach (var item in CartItems) { var productInPurchaseContext = purchaseObjectSpace.GetObject(item.Product); if (productInPurchaseContext == null) { Console.WriteLine($"Kritik Hata: Ürün OID {item.Product.Oid} ({item.Product.UrunAdi}) satış anında purchaseObjectSpace'e getirilemedi!"); continue; } for (int i = 0; i < item.Quantity; i++) { var satilanUrun = purchaseObjectSpace.CreateObject<SatilanUrunler>(); satilanUrun.Tarih = saleTime; satilanUrun.Barkodu = productInPurchaseContext.Barkodu; satilanUrun.UrunAdi = productInPurchaseContext.UrunAdi; satilanUrun.Fiyat = productInPurchaseContext.Fiyat; if (productInPurchaseContext.Kategori != null) { /* ****** İSİM GÜNCELLEMESİ: UrunKategorisi -> UrunKategori ****** */ satilanUrun.Kategori = purchaseObjectSpace.GetObject(productInPurchaseContext.Kategori); /* ************************************************************ */ } satilanUrun.KartBilgisi = cardInPurchaseContext; Console.WriteLine($"Satılan ürün kaydı oluşturuldu: {satilanUrun.UrunAdi} (Adet {i+1}/{item.Quantity})"); } } if (cardInPurchaseContext != null) { cardInPurchaseContext.KartBakiye -= TotalPrice; Console.WriteLine($"Kart bakiyesi güncellendi: {cardInPurchaseContext.KartNo}, Yeni Bakiye: {cardInPurchaseContext.KartBakiye}"); } purchaseObjectSpace.CommitChanges(); Console.WriteLine("Değişiklikler başarıyla kaydedildi (CommitChanges)."); if(cardInPurchaseContext != null) { CardBalance = cardInPurchaseContext.KartBakiye; } await ClearCart(); await JSRuntime.InvokeVoidAsync("alert", "Satış başarıyla tamamlandı!"); } catch (Exception ex) { Console.WriteLine($"Satış kaydetme sırasında kritik hata: {ex}"); try { purchaseObjectSpace.Rollback(); Console.WriteLine("Değişiklikler geri alındı (Rollback)."); } catch { /* Rollback hata */ } await JSRuntime.InvokeVoidAsync("alert", $"Satış sırasında bir hata oluştu! Değişiklikler geri alındı. Hata: {ex.Message}"); } }

    // --- UI Helpers ---
    private async System.Threading.Tasks.Task FocusBarcodeInput() { try { if(barcodeInputRef != null) { await barcodeInputRef.FocusAsync(); } else { await JSRuntime.InvokeVoidAsync("BlazorFocusElement", "barcodeInput"); } } catch (Exception ex) { Console.WriteLine($"Barkod inputuna odaklanırken hata: {ex.Message}"); } }
    /* <script> window.BlazorFocusElement = (id) => { try { document.getElementById(id)?.focus(); } catch (e) { console.error('BlazorFocusElement error:', e); } }; </script> */

    // --- View Model for Cart Items ---
    public class CartItemViewModel : INotifyPropertyChanged { private int _quantity; private Urunler _product = default!; public Urunler Product { get => _product; set { _product = value; OnPropertyChanged(nameof(Product)); OnPropertyChanged(nameof(LineTotal)); } } public int Quantity { get => _quantity; set { if (_quantity != value && value > 0) { _quantity = value; OnPropertyChanged(nameof(Quantity)); OnPropertyChanged(nameof(LineTotal)); } } } public decimal LineTotal => (Product?.Fiyat ?? 0) * Quantity; public event PropertyChangedEventHandler? PropertyChanged; protected virtual void OnPropertyChanged(string propertyName) => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName)); }

} // 

--- RAZOR Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\RazorComponents\BarcodeCamInterface.razor ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\Services\BackgroundServiceExample.cs ---

using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Hosting;
using Microsoft.AspNetCore.Http;
using ASPNetCore_WebAccess; // WebAccessRun sınıfının bulunduğu namespace

namespace YildizOtoMasyonKart.Services
{
    public class BackgroundServiceExample : IHostedService, IDisposable
    {
        private Timer _timer;
        private readonly IHttpContextAccessor _httpContextAccessor;

        public BackgroundServiceExample(IHttpContextAccessor httpContextAccessor)
        {
            _httpContextAccessor = httpContextAccessor;
        }

        public Task StartAsync(CancellationToken cancellationToken)
        {
            _timer = new Timer(DoWork, null, TimeSpan.Zero, TimeSpan.FromMinutes(1)); // 1 dakikada bir çalışır
            return Task.CompletedTask;
        }

        private void DoWork(object state)
        {
            var context = _httpContextAccessor.HttpContext;
            WebAccessRun webAccess_Run = new WebAccessRun(context);
            webAccess_Run.WebAccess.GetResponse();
        }

        public Task StopAsync(CancellationToken cancellationToken)
        {
            _timer?.Change(Timeout.Infinite, 0);
            return Task.CompletedTask;
        }

        public void Dispose()
        {
            _timer?.Dispose();
        }
    }
}


--- CS Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\Services\BackgroundServiceExample.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\Services\CircuitHandlerProxy.cs ---

using DevExpress.ExpressApp.Blazor.Services;
using Microsoft.AspNetCore.Components.Server.Circuits;

namespace YildizOtoMasyonKart.Blazor.Server.Services;

internal class CircuitHandlerProxy : CircuitHandler {
    private readonly IScopedCircuitHandler scopedCircuitHandler;
    public CircuitHandlerProxy(IScopedCircuitHandler scopedCircuitHandler) {
        this.scopedCircuitHandler = scopedCircuitHandler;
    }
    public override Task OnCircuitOpenedAsync(Circuit circuit, CancellationToken cancellationToken) {
        return scopedCircuitHandler.OnCircuitOpenedAsync(cancellationToken);
    }
    public override Task OnConnectionUpAsync(Circuit circuit, CancellationToken cancellationToken) {
        return scopedCircuitHandler.OnConnectionUpAsync(cancellationToken);
    }
    public override Task OnCircuitClosedAsync(Circuit circuit, CancellationToken cancellationToken) {
        return scopedCircuitHandler.OnCircuitClosedAsync(cancellationToken);
    }
    public override Task OnConnectionDownAsync(Circuit circuit, CancellationToken cancellationToken) {
        return scopedCircuitHandler.OnConnectionDownAsync(cancellationToken);
    }
}


--- CS Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\Services\CircuitHandlerProxy.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\Services\ProxyHubConnectionHandler.cs ---

using DevExpress.ExpressApp.Blazor.Services;
using Microsoft.AspNetCore.Connections;
using Microsoft.AspNetCore.SignalR;
using Microsoft.Extensions.Options;

namespace YildizOtoMasyonKart.Blazor.Server.Services;

internal class ProxyHubConnectionHandler<THub> : HubConnectionHandler<THub> where THub : Hub {
    private readonly IValueManagerStorageContainerInitializer storageContainerInitializer;
    public ProxyHubConnectionHandler(
        HubLifetimeManager<THub> lifetimeManager,
        IHubProtocolResolver protocolResolver,
        IOptions<HubOptions> globalHubOptions,
        IOptions<HubOptions<THub>> hubOptions,
        ILoggerFactory loggerFactory,
        IUserIdProvider userIdProvider,
        IServiceScopeFactory serviceScopeFactory,
        IValueManagerStorageContainerInitializer storageContainerAccessor)
        : base(lifetimeManager, protocolResolver, globalHubOptions, hubOptions, loggerFactory, userIdProvider, serviceScopeFactory) {
        this.storageContainerInitializer = storageContainerAccessor;
    }

    public override Task OnConnectedAsync(ConnectionContext connection) {
        storageContainerInitializer.Initialize();
        return base.OnConnectedAsync(connection);
    }
}


--- CS Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\Services\ProxyHubConnectionHandler.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\Startup.cs ---

using DevExpress.ExpressApp.Security;
using DevExpress.ExpressApp.ApplicationBuilder;
using DevExpress.ExpressApp.Blazor.ApplicationBuilder;
using DevExpress.ExpressApp.Blazor.Services;
using DevExpress.Persistent.Base;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Components.Server.Circuits;
using DevExpress.ExpressApp.Xpo;
using YildizOtoMasyonKart.Blazor.Server.Services;
using DevExpress.Persistent.BaseImpl.PermissionPolicy;

namespace YildizOtoMasyonKart.Blazor.Server;

public class Startup
{
    public Startup(IConfiguration configuration)
    {
        Configuration = configuration;
    }

    public IConfiguration Configuration { get; }

    // This method gets called by the runtime. Use this method to add services to the container.
    // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
    public void ConfigureServices(IServiceCollection services)
    {
        services.AddSingleton(typeof(Microsoft.AspNetCore.SignalR.HubConnectionHandler<>), typeof(ProxyHubConnectionHandler<>));

        services.AddRazorPages();
        services.AddServerSideBlazor();
        services.AddHttpContextAccessor();
        services.AddScoped<CircuitHandler, CircuitHandlerProxy>();
        services.AddXaf(Configuration, builder => {
            builder.UseApplication<YildizOtoMasyonKartBlazorApplication>();
            builder.Modules
                .AddConditionalAppearance()
                .AddDashboards(options => {
                    options.DashboardDataType = typeof(DevExpress.Persistent.BaseImpl.DashboardData);
                })
                .AddOffice()
                .AddReports(options => {
                    options.EnableInplaceReports = true;
                    options.ReportDataType = typeof(DevExpress.Persistent.BaseImpl.ReportDataV2);
                    options.ReportStoreMode = DevExpress.ExpressApp.ReportsV2.ReportStoreModes.XML;
                })
                .AddValidation(options => {
                    options.AllowValidationDetailsAccess = false;
                })
                .Add<YildizOtoMasyonKart.Module.YildizOtoMasyonKartModule>()
                .Add<YildizOtoMasyonKartBlazorModule>();
            builder.ObjectSpaceProviders
                .AddSecuredXpo((serviceProvider, options) => {
                    string connectionString = Configuration.GetConnectionString("DefaultConnection");
#if EASYTEST
                    if(Configuration.GetConnectionString("EasyTestConnectionString") != null) {
                        connectionString = Configuration.GetConnectionString("EasyTestConnectionString");
                    }
#endif
                    options.ConnectionString = connectionString;
                    options.ThreadSafe = true;
                    options.UseSharedDataStoreProvider = true;
                })
                .AddNonPersistent();
            builder.Security
                .UseIntegratedMode(options => {
                    options.Lockout.Enabled = true;
                    options.RoleType = typeof(PermissionPolicyRole);
                    options.UserType = typeof(YildizOtoMasyonKart.Module.BusinessObjects.ApplicationUser);
                    options.UserLoginInfoType = typeof(YildizOtoMasyonKart.Module.BusinessObjects.ApplicationUserLoginInfo);
                    options.UseXpoPermissionsCaching();
                    options.Events.OnSecurityStrategyCreated += securityStrategy => {
                        ((SecurityStrategy)securityStrategy).PermissionsReloadMode = PermissionsReloadMode.NoCache;
                    };
                })
                .AddPasswordAuthentication(options => {
                    options.IsSupportChangePassword = true;
                });
        });

        var authentication = services.AddAuthentication(options => {
            options.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;
        });
        authentication.AddCookie(options => {
            options.LoginPath = "/LoginPage";
        });
    }

    // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
    {
        if (env.IsDevelopment())
        {
            app.UseDeveloperExceptionPage();
        }
        else
        {
            app.UseExceptionHandler("/Error");
            // The default HSTS value is 30 days. To change this for production scenarios, see: https://aka.ms/aspnetcore-hsts.
            app.UseHsts();
        }
        app.UseHttpsRedirection();
        app.UseRequestLocalization();
        app.UseStaticFiles();
        app.UseRouting();
        app.UseAuthentication();
        app.UseAuthorization();
        app.UseXaf();
        app.UseEndpoints(endpoints =>
        {
            endpoints.MapXafEndpoints();
            endpoints.MapBlazorHub();
            endpoints.MapFallbackToPage("/_Host");
            endpoints.MapControllers();
        });
    }
}


--- CS Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\Startup.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\WebAccess_Lib\WebAccess_UserLib.cs ---

/*
 * Author: İstanbul Yazılım Elektronik Sanayi
 */

using System;
using System.Collections.Specialized;
using System.Text;
using static ASPNetCore_WebAccess.UserLib;

namespace ASPNetCore_WebAccess
{
    public class UserLib
    {
        public const int NO_ID = -1;
        public const int MAX_READER_CAPACITY = 16;
        public const int ZAMAN_KODU_PARCA_SAYISI = 5; // Bir zaman kodunun kaç parçadan oluştuğunu bildirir.
        public const byte PGM_KART_SAYISI = 5;      // PGM(Paylaşımlı Geçiş Modu) modu için kullanıcının grubunda maksimum kaç kişi olabileceğini bildirir.

        public enum AntiPassbackStatus
        {
            Outside = 0, // Dışarıda
            Inside = 1, // İçeride
            None = 2 // Bilinmiyor
        }

        public class UserRelays
        {
            public UserRelays()
            {
                ARelays = new bool[MAX_READER_CAPACITY];
            }

            public bool this[int RelayNum]
            {
                get { return ARelays[RelayNum - 1]; }
                set { ARelays[RelayNum - 1] = value; }
            }

            public Int32 Count()
            {
                return ARelays.Length;
            }

            private bool[] ARelays;
        }

        public class UserPGMInfo
        {
            public UserPGMInfo()
            {
                UserList = new UInt64[PGM_KART_SAYISI];
                Clear();
            }

            public UInt64 this[int Index]
            {
                get { return UserList[Index]; }
                set { UserList[Index] = value; }
            }

            public void Clear()
            {
                AAccessCapacity = 0;

                for (int i = 0; i < PGM_KART_SAYISI; i++)
                    UserList[i] = 0;
            }

            public UInt32 AccessCapacity
            {
                get { return AAccessCapacity; }
                set { AAccessCapacity = value; }
            }

            public Int32 UserCapacity()
            {
                return UserList.Length;
            }

            private UInt32 AAccessCapacity;
            public UInt64[] UserList;
        }

        public class UserHourPeriod
        {
            public UserHourPeriod()
            {
                FBeginTime = new DateTime(1, 1, 1, 0, 0, 0, 0);
                FEndTime = new DateTime(1, 1, 1, 0, 0, 0, 0);
                FAccessLimit = 0;
            }

            public DateTime BeginTime
            {
                get { return FBeginTime; }
                set { FBeginTime = value; }
            }

            public DateTime EndTime
            {
                get { return FEndTime; }
                set { FEndTime = value; }
            }

            public UInt32 AccessLimit
            {
                get { return FAccessLimit; }
                set { FAccessLimit = value; }
            }

            public void SetValue(DateTime Begin_Time, DateTime End_Time, UInt32 Access_Limit)
            {
                FBeginTime = Begin_Time;
                FEndTime = End_Time;
                FAccessLimit = Access_Limit;
            }

            public override string ToString()
            {
                return (FBeginTime.ToString("HH:mm") + "~" + FEndTime.ToString("HH:mm") + " Access Limit: " + FAccessLimit.ToString());
            }

            private DateTime FBeginTime;
            private DateTime FEndTime;
            private UInt32 FAccessLimit;
        }

        public class UserTimeZones
        {
            public UserTimeZones()
            {
                FHourPeriods = new List<UserHourPeriod>();

                for (int i = 0; i < ZAMAN_KODU_PARCA_SAYISI; i++)
                    FHourPeriods.Add(new UserHourPeriod());
            }

            public UserHourPeriod this[Int32 Index]
            {
                get { return FHourPeriods[Index]; }
            }

            public UserHourPeriod Period1
            {
                get { return FHourPeriods[0]; }
            }

            public UserHourPeriod Period2
            {
                get { return FHourPeriods[1]; }
            }

            public UserHourPeriod Period3
            {
                get { return FHourPeriods[2]; }
            }

            public UserHourPeriod Period4
            {
                get { return FHourPeriods[3]; }
            }

            public UserHourPeriod Period5
            {
                get { return FHourPeriods[4]; }
            }

            public Int32 Count()
            {
                return FHourPeriods.Count;
            }

            public override string ToString()
            {
                string RetVal = "";

                for (int i = 0; i < ZAMAN_KODU_PARCA_SAYISI; i++)
                {
                    RetVal += FHourPeriods[i].ToString();
                    if (i < 4)
                        RetVal += ", ";
                }

                return RetVal;
            }

            private List<UserHourPeriod> FHourPeriods;
        }

        public class UserReader
        {
            public class DailyAccessNumber
            {
                public Int32 AccessLimit;
                public Int32 AccessCount;
            }

            public class AccessDays
            {
                public bool Monday = true; // Pazartesi. false= Geçiş Yasak, true= Geçebilir.
                public bool Tuesday = true; // Salı
                public bool Wednesday = true; // Çarşamba
                public bool Thursday = true; // Perşembe
                public bool Friday = true; // Cuma
                public bool Saturday = true; // Cumartesi
                public bool Sunday = true; // Pazar
                public bool Holidays = true; // Yıl içindeki tatil günleri gibi zamanlar özel günlerdir.

                override public string ToString()
                {
                    string RetVal = "";

                    if (Monday)
                        RetVal += ", Pazartesi";

                    if (Tuesday)
                        RetVal += ", Salı";

                    if (Wednesday)
                        RetVal += ", Çarsamba";

                    if (Thursday)
                        RetVal += ", Perşembe";

                    if (Friday)
                        RetVal += ", Cuma";

                    if (Saturday)
                        RetVal += ", Cumartesi";

                    if (Sunday)
                        RetVal += ", Pazar";

                    if (Holidays)
                        RetVal += ", Özel Günler";

                    if (RetVal != "")
                        RetVal = RetVal.Substring(2);

                    return RetVal;
                }
            }

            public enum ReaderDirection { None = 0, InPoint = 1, OutPoint = 2, FreeOutPoint = 3 }; // Okuyucunun yönü. 0= Yönsüz, 1= Giriş Kapısı, 2= Çıkış Kapısı, 3= Serbest Çıkış Kapısı.

            // İki adam kuralı kullanım şekli.
            public enum TwoManRuleUseType
            {
                DependentOnReader = 0, // Reader ayarlarına bağlı. Reader.Settings.Two_Man_Rule == true ise klasik iki adam kuralı uygulanır. false ise devre dışı kalır.
                TwoManRule = 1, // Klasik iki adam kuralını uygular. Kişi kartını okuttuktan sonra bir süre yetkili bir başka kişinin kart okutması beklenir. Okutursa röleyi çekip her ikisi içinde geçti log`u kaydeder.
                DependentOnOne = 2  // Birine bağımlı iki adam kuralını uygular. Kişi kartını okuttuktan sonra bir süre PGM kişilerinden birinin kart okutması beklenir. Okutursa röleyi çekip her ikisi içinde geçti log`u kaydeder. (Öğrenciler ve ziyaretçiler gibi. Öğrenciye veli kartları, ziyaretçiye ise görevli kartları PGM listesine eklenebilir)
            };

            public class UserReaderStatus
            {
                public UserReaderStatus()
                {
                    Reader_Direction = ReaderDirection.None; // Okuyucunun yönü. 0= Yönsüz, 1= Giriş Kapısı, 2= Çıkış Kapısı.
                    Anti_Passback_Status = AntiPassbackStatus.None; // Kullanıcının bu kapıdaki içeride/dışarıda durumu.
                    Disable = true; // Erişim Durumu. 0= Erişime açık, 1= Erişime kapalı.
                    Admin = false;  // Kapıya Erişim Şekli. 0= Normal, 1= Admin
                    Credit = false; // Kullanıcı için bu kapıda kontör kullanımını aktif eder. 0= Kontörsüz, 1= AKontörlü kullanım.
                    ParentGroup_Inside = false; // Kullanıcı parent gruptan giriş yapmış ise değeri true olur. Çıkış yaparsa değeri false olur.
                    Two_Man_Rule_Use_Type = TwoManRuleUseType.DependentOnReader;  // İki adam kuralını uygulama şekli.
                }

                public bool Enabled
                {
                    get { return !Disable; }
                    set { Disable = !value; }
                }

                public ReaderDirection Reader_Direction;        // Okuyucunun yönü. 0= Yönsüz, 1= Giriş Kapısı, 2= Çıkış Kapısı.
                public AntiPassbackStatus Anti_Passback_Status; // Kullanıcının bu kapıdaki içeride/dışarıda durumu.
                public bool Disable;                            // Erişim Durumu. 0= Erişime açık, 1= Erişime kapalı.
                public bool Admin;                              // Kapıya Erişim Şekli. 0= Normal, 1= Admin
                public bool Credit;                             // Kullanıcı için bu kapıda kontör kullanımını aktif eder. 0= Kontörsüz, 1= AKontörlü kullanım.
                public bool ParentGroup_Inside;                 // Kullanıcı parent gruptan giriş yapmış ise değeri true olur. Çıkış yaparsa değeri false olur.
                public TwoManRuleUseType Two_Man_Rule_Use_Type; // İki adam kuralını uygulama şekli. 
            }

            public class UserLifetime
            {
                public UserLifetime()
                {
                    BeginTime = new DateTime(1, 1, 1, 0, 0, 0);
                    EndTime = new DateTime(1, 1, 1, 0, 0, 0);
                    AccessLimit = 0;
                    AccessCount = 0;
                }

                // Okuyucu kullanım süresi bilgileri.
                public DateTime BeginTime; // Başlama zamanı.
                public DateTime EndTime; // Bitiş zamanı.
                public Int32 AccessLimit; // Kullanım süresi içindeki geçiş hakkı.
                public Int32 AccessCount; // Kullanım süresi içindeki geçiş sayısı.
            }

            public UserReader()
            {
                // Her gün için geçiş hakkı.
                Daily_Access_Number = new DailyAccessNumber
                {
                    AccessLimit = 0,
                    AccessCount = 0
                };

                // Okuyucunun kullandığı access grubu id.
                Access_Group = NO_ID;

                // Kullanıcının haftanın hangi günlerinde kapıdan geçebileceğini bildirir.
                Access_Days = new AccessDays();
                Access_Days.Monday = true; // Pazartesi. False= Geçiş Yasak, True= Geçebilir.
                Access_Days.Tuesday = true;
                Access_Days.Wednesday = true;
                Access_Days.Thursday = true;
                Access_Days.Friday = true;
                Access_Days.Saturday = true;
                Access_Days.Sunday = true;
                Access_Days.Holidays = true; // Yıl içindeki tatil günleri gibi zamanlar özel günlerdir.


                // Geçiş yaptıktan sonra buradaki süre kadar geçemez. Buradaki değer dakika olarak saklanır.
                Time_Limit = 0;

                // Okuyucudan en son yapılan geçiş zamanının saniye olarak değeri.
                Last_Access_Time = new DateTime(1, 1, 1, 0, 0, 0);

                Status = new UserReaderStatus();
                Lifetime = new UserLifetime();
                Relays = new UserRelays();
                Time_Zones = new UserTimeZones();
            }

            public DailyAccessNumber Daily_Access_Number;   // Günlük geçiş hakkı.
            public Int32 Access_Group;                      // Okuyucunun kullandığı access grubu id. Cihazın access grupları tablosundaki bir kayıta işaret eder.
            public AccessDays Access_Days;                  // Kullanıcının haftanın hangi günlerinde kapıdan geçebileceğini bildirir.
            public UInt32 Time_Limit;                       // Geçiş yaptıktan sonra buradaki süre kadar geçemez. Buradaki değer dakika olarak saklanır.
            public DateTime Last_Access_Time;               // Okuyucudan en son yapılan geçiş zamanının saniye olarak değeri.
            public UserReaderStatus Status;                 // Kullanıcının kapıyı nasıl kullanacağını belirtir.
            public UserLifetime Lifetime;                   // Okuyucu kullanım süresi bilgisi.
            public UserRelays Relays;                       // Okuyucudan geçiş yapılırken tetiklenecek röleler.
            public UserTimeZones Time_Zones;                // Okuyucuyu kullanım saatleri.
        }

        public class UserReaders
        {
            public UserReaders()
            {
                AReaders = new UserReader[MAX_READER_CAPACITY];
                for (int i = 0; i < MAX_READER_CAPACITY; i++)
                    AReaders[i] = new UserReader();
            }

            public UserReader this[int Index]
            {
                get { return AReaders[Index]; }
                set { AReaders[Index] = value; }
            }

            public UserReader Reader1
            {
                get { return AReaders[0]; }
                set { AReaders[0] = value; }
            }

            public UserReader Reader2
            {
                get { return AReaders[1]; }
                set { AReaders[1] = value; }
            }

            public UserReader Reader3
            {
                get { return AReaders[2]; }
                set { AReaders[2] = value; }
            }

            public UserReader Reader4
            {
                get { return AReaders[3]; }
                set { AReaders[3] = value; }
            }

            public UserReader Reader5
            {
                get { return AReaders[4]; }
                set { AReaders[4] = value; }
            }

            public UserReader Reader6
            {
                get { return AReaders[5]; }
                set { AReaders[5] = value; }
            }

            public UserReader Reader7
            {
                get { return AReaders[6]; }
                set { AReaders[6] = value; }
            }

            public UserReader Reader8
            {
                get { return AReaders[7]; }
                set { AReaders[7] = value; }
            }

            public UserReader Reader9
            {
                get { return AReaders[8]; }
                set { AReaders[8] = value; }
            }

            public UserReader Reader10
            {
                get { return AReaders[9]; }
                set { AReaders[9] = value; }
            }

            public UserReader Reader11
            {
                get { return AReaders[10]; }
                set { AReaders[10] = value; }
            }

            public UserReader Reader12
            {
                get { return AReaders[11]; }
                set { AReaders[11] = value; }
            }

            public UserReader Reader13
            {
                get { return AReaders[12]; }
                set { AReaders[12] = value; }
            }

            public UserReader Reader14
            {
                get { return AReaders[13]; }
                set { AReaders[13] = value; }
            }

            public UserReader Reader15
            {
                get { return AReaders[14]; }
                set { AReaders[14] = value; }
            }

            public UserReader Reader16
            {
                get { return AReaders[15]; }
                set { AReaders[15] = value; }
            }

            public Int32 Count()
            {
                return MAX_READER_CAPACITY;
            }

            private UserReader[] AReaders;
        }

        public class AccessInfo
        {
            public bool Forbidden;

            public AccessInfo()
            {
                Forbidden = false;
            }
        }

        public class Protect
        {
            public Protect()
            {
                Anti_Passback_Status = false;
                Credit = false;
                Daily_Access_Count = false;
                LifeTime_Access_Count = false;
                Last_Access_Time = false;
                // TimePeriod_Access_Info = false;
            }

            public bool Anti_Passback_Status;   // Anti_Passback durum bilgisini koru.
            public bool Credit;                 // Kontörü koru.
            public bool Daily_Access_Count;     // Günlük geçiş sayısını koru.
            public bool LifeTime_Access_Count;  // Okuyucuyu kullanma süresi içindeki geçiş sayısını koru.
            public bool Last_Access_Time;       // Son erişim zamanını koru.
            // public bool TimePeriod_Access_Info; // Zaman kodu geçiş bilgisini koru.
        }

        public class User
        {
            public User()
            {
                Protected = new Protect();
                Kart_Bilgisi = 0;
                Sicil_No = 0;
                ARelays = new UserRelays();
                Gecis_Durumu = new AccessInfo();
                Sifre = 0;
                Kontor = UserLib.User.NO_CREDIT_USAGE;
                Access_Grubu = NO_ID;
                APGMInfo = new UserPGMInfo();
                AReaders = new UserReaders();
                Kullanici_Adi = "";
            }

            public Int16 NoCreditUsage
            {
                get { return NO_CREDIT_USAGE; }
            }

            public UInt64 Card_Info // Kart no.
            {
                get { return Kart_Bilgisi; }

                set
                {
                    if (value > 0) // Kart id geçerli ise
                        Kart_Bilgisi = value;
                }
            }

            public string User_Name // Kullanıcı adı.
            {
                get { return Kullanici_Adi; }
                set { Kullanici_Adi = value; }
            }

            public AccessInfo Access_Info
            {
                get { return Gecis_Durumu; }
                set { Gecis_Durumu = value; }
            }

            public UInt64 Password // Kullanıcı şifresi.
            {
                get { return Sifre; }
                set { Sifre = value; }
            }

            public Int32 Credit // Kontör miktarı.
            {
                get { return Kontor; }
                set { Kontor = value; }
            }

            public Int32 Access_Group // Access gruplarına ait id`ler.
            {
                get { return Access_Grubu; }
                set { Access_Grubu = value; }
            }

            public Int64 Registration_Number
            {
                get { return Sicil_No; }
                set { Sicil_No = value; }
            }

            public UserRelays Relays
            {
                get { return ARelays; }
            }

            public UserPGMInfo PGM_Info
            {
                get { return APGMInfo; }
            }

            public UserReaders Readers
            {
                get { return AReaders; }
            }

            public string AntiPassbackStatusToString()
            {
                string RetVal = "";

                for (int i = 0; i < Readers.Count(); i++)
                {
                    RetVal += ", Reader" + (i + 1).ToString() + " (" + Readers[i].Status.Anti_Passback_Status.ToString() + ")";
                }

                if (RetVal.Length > 1)
                    RetVal = RetVal.Substring(2);

                return RetVal;
            }

            private void DeleteSeperator(ref string S)
            {
                S = S.Trim();
                if (S[S.Length - 1] == ',')
                    S = S.Substring(0, S.Length - 1);
            }

            private void BeginClass(ref string S, string Class_Name)
            {
                S += "\"" + Class_Name + "\":{";
            }

            private void EndClass(ref string S, string Seperator = ",")
            {
                DeleteSeperator(ref S);
                S += "}" + Seperator;
            }

            private void BeginArray(ref string S, string Array_Name)
            {
                S += "\"" + Array_Name + "\":[";
            }

            private void EndArray(ref string S, string Seperator = ",")
            {
                DeleteSeperator(ref S);
                S += "]" + Seperator;
            }

            private void AddString(ref string S, string Str)
            {
                S += "\"" + Str + "\"";
            }

            private void AddKey(ref string S, string Name, string Value, string Seperator = ",")
            {
                S += "\"" + Name + "\":\"" + Value + "\"" + Seperator;

                /*
                if (Name.Length > 0)
                    S += "\"" + Name + "\":";

                if (Value.Length > 0)
                    S += "\"" + Value + "\"";

                S += Seperator;
                */
            }

            public void AddKey(ref string S, string Name, bool Value, string Seperator = ",")
            {
                AddKey(ref S, Name, (Value ? "true" : "false"), Seperator);
            }

            public string ToJSON(Int32 Reader_Count = MAX_READER_CAPACITY)
            {
                string RetVal = "";
                bool B;

                if (Reader_Count > Readers.Count())
                    Reader_Count = Readers.Count();

                BeginClass(ref RetVal, "User");
                AddKey(ref RetVal, "Card_Id", Card_Info.ToString());
                AddKey(ref RetVal, "User_Name", User_Name);
                AddKey(ref RetVal, "Registration_Number", Registration_Number.ToString());
                AddKey(ref RetVal, "Password", Password.ToString());

                if (Access_Group > NO_ID)
                    AddKey(ref RetVal, "Access_Group", Access_Group.ToString());

                if (Credit > NO_CREDIT_USAGE)
                    AddKey(ref RetVal, "Credit", Credit.ToString());
                // else AddKey(ref RetVal, "Credit", "none");


                /* Access_Info */
                BeginClass(ref RetVal, "Access_Info");
                AddKey(ref RetVal, "Forbidden", Access_Info.Forbidden, "");
                EndClass(ref RetVal);   // } Access_Info


                /* Relays */
                B = false;
                for (int RNo = 1; RNo < Relays.Count(); RNo++)
                {
                    if (Relays[RNo])
                    {
                        B = true;
                        break;
                    }
                }
                if (B) // Tetiklenecek röle varsa
                {
                    BeginClass(ref RetVal, "Relays");
                    for (int RNo = 1; RNo <= Relays.Count(); RNo++)
                    {
                        if (Relays[RNo])
                            AddKey(ref RetVal, "Relay" + RNo.ToString(), Relays[RNo].ToString());
                    }
                    EndClass(ref RetVal);   // } Relays
                }


                /* PGM_Info */
                B = false;
                for (int i = 0; i < PGM_Info.UserCapacity(); i++)
                {
                    if (PGM_Info.UserList[i] > 0 && PGM_Info.UserList[i] < WebAccess.Empty_Card) // Geçerli bir kart ise
                    {
                        B = true;
                        break;
                    }
                }
                if (B) // Geçerli kart varsa
                {
                    BeginClass(ref RetVal, "PGM_Info");
                    AddKey(ref RetVal, "AccessCapacity", PGM_Info.AccessCapacity.ToString());
                    BeginArray(ref RetVal, "UserList");
                    for (int i = 0; i < PGM_Info.UserCapacity(); i++)
                    {
                        if (PGM_Info.UserList[i] > 0 && PGM_Info.UserList[i] < WebAccess.Empty_Card) // Geçerli bir kart ise
                            RetVal += PGM_Info.UserList[i].ToString() + ",";
                    }
                    EndArray(ref RetVal);   // ] UserList
                    EndClass(ref RetVal);   // } PGM_Info
                }


                /* Readers */
                B = false;
                for (int RNo = 0; RNo < Reader_Count; RNo++)
                {
                    if (Readers[RNo].Status.Disable == false) // Okuyucu etkin ise
                    {
                        B = true;
                        break;
                    }
                }
                if (B) // Geçerli okuyucu varsa
                {
                    BeginClass(ref RetVal, "Readers");
                    for (int RNo = 0; RNo < Reader_Count; RNo++)
                    {
                        BeginClass(ref RetVal, "Reader" + (RNo + 1).ToString());

                        if (Readers[RNo].Status.Disable == false) // Okuyucu etkin ise
                        {
                            /* Status */
                            BeginClass(ref RetVal, "Status");
                            AddKey(ref RetVal, "Disable", "false");
                            AddKey(ref RetVal, "ReaderDirection", Readers[RNo].Status.Reader_Direction.ToString());
                            AddKey(ref RetVal, "Admin", Readers[RNo].Status.Admin);
                            AddKey(ref RetVal, "ParentGroup_Inside", Readers[RNo].Status.ParentGroup_Inside);
                            AddKey(ref RetVal, "Two_Man_Rule_Use_Type", Readers[RNo].Status.Two_Man_Rule_Use_Type.ToString());

                            if (Protected.Anti_Passback_Status == false) //  Anti_Passback durum bilgisi korunmuyorsa.
                                AddKey(ref RetVal, "AntiPassbackStatus", Readers[RNo].Status.Anti_Passback_Status.ToString());

                            if (Protected.Credit == false) //  Kontör bilgisi korunmuyorsa.
                                AddKey(ref RetVal, "Credit", Readers[RNo].Status.Credit);

                            EndClass(ref RetVal);


                            /* Time_Zones */
                            B = false;
                            for (int i = 0; i < Readers[RNo].Time_Zones.Count(); i++)
                            {
                                if (Readers[RNo].Time_Zones[i].BeginTime != Readers[RNo].Time_Zones[i].EndTime) // Geçerli bir zaman ise
                                {
                                    B = true;
                                    break;
                                }
                            }
                            if (B) // Geçerli zaman varsa
                            {
                                BeginArray(ref RetVal, "Time_Zones");
                                for (int i = 0; i < Readers[RNo].Time_Zones.Count(); i++)
                                {
                                    if (Readers[RNo].Time_Zones[i].BeginTime != Readers[RNo].Time_Zones[i].EndTime) // Geçerli bir zaman ise
                                    {
                                        AddString(ref RetVal,
                                                  Readers[RNo].Time_Zones[i].BeginTime.Hour.ToString() + ":" + Readers[RNo].Time_Zones[i].BeginTime.Minute.ToString() + "~" +
                                                  Readers[RNo].Time_Zones[i].EndTime.Hour.ToString() + ":" + Readers[RNo].Time_Zones[i].EndTime.Minute.ToString() + "-" +
                                                  Readers[RNo].Time_Zones[i].AccessLimit.ToString());

                                        RetVal += ",";
                                    }
                                }
                                EndArray(ref RetVal);   // ] Time_Zones
                            }

                            /* Access_Group */
                            if (Readers[RNo].Access_Group > NO_ID)
                                AddKey(ref RetVal, "Access_Group", Readers[RNo].Access_Group.ToString());

                            /* Time_Limit */
                            if (Readers[RNo].Time_Limit > 0)
                                AddKey(ref RetVal, "Time_Limit", Readers[RNo].Time_Limit.ToString());

                            /* Last_Access_Time */
                            if (Protected.Last_Access_Time == false) // Son erişim zamanını korunmuyorsa.
                                AddKey(ref RetVal, "Last_Access_Time",
                                       Readers[RNo].Last_Access_Time.Year.ToString() + "-" +
                                       Readers[RNo].Last_Access_Time.Month.ToString() + "-" +
                                       Readers[RNo].Last_Access_Time.Day.ToString() + " " +
                                       Readers[RNo].Last_Access_Time.Hour.ToString() + ":" +
                                       Readers[RNo].Last_Access_Time.Minute.ToString() + ":" +
                                       Readers[RNo].Last_Access_Time.Second.ToString()
                                    );

                            /* Lifetime */
                            if (Readers[RNo].Lifetime.BeginTime != Readers[RNo].Lifetime.EndTime)
                            {
                                BeginClass(ref RetVal, "Lifetime");

                                AddKey(ref RetVal, "BeginTime",
                                       Readers[RNo].Lifetime.BeginTime.Year.ToString() + "-" +
                                       Readers[RNo].Lifetime.BeginTime.Month.ToString() + "-" +
                                       Readers[RNo].Lifetime.BeginTime.Day.ToString() + " " +
                                       Readers[RNo].Lifetime.BeginTime.Hour.ToString() + ":" +
                                       Readers[RNo].Lifetime.BeginTime.Minute.ToString() + ":00"
                                    );

                                AddKey(ref RetVal, "EndTime",
                                       Readers[RNo].Lifetime.EndTime.Year.ToString() + "-" +
                                       Readers[RNo].Lifetime.EndTime.Month.ToString() + "-" +
                                       Readers[RNo].Lifetime.EndTime.Day.ToString() + " " +
                                       Readers[RNo].Lifetime.EndTime.Hour.ToString() + ":" +
                                       Readers[RNo].Lifetime.EndTime.Minute.ToString() + ":00"
                                    );

                                AddKey(ref RetVal, "AccessLimit", Readers[RNo].Lifetime.AccessLimit.ToString());

                                if (Protected.LifeTime_Access_Count == false) // Okuyucuyu kullanma süresi içindeki geçiş sayısı korunmuyorsa.
                                    AddKey(ref RetVal, "AccessCount", Readers[RNo].Lifetime.AccessCount.ToString());

                                EndClass(ref RetVal);
                            }


                            /* Daily_Access_Number */
                            if (Readers[RNo].Daily_Access_Number.AccessLimit > 0)
                            {
                                BeginClass(ref RetVal, "Daily_Access_Number");
                                AddKey(ref RetVal, "AccessLimit", Readers[RNo].Daily_Access_Number.AccessLimit.ToString());

                                if (Protected.Daily_Access_Count == false) // Günlük geçiş sayısı korunmuyorsa.
                                    AddKey(ref RetVal, "AccessCount", Readers[RNo].Daily_Access_Number.AccessCount.ToString());

                                EndClass(ref RetVal);
                            }


                            /* Access_Days */
                            if (!Readers[RNo].Access_Days.Monday || !Readers[RNo].Access_Days.Tuesday || !Readers[RNo].Access_Days.Wednesday || !Readers[RNo].Access_Days.Thursday ||
                                !Readers[RNo].Access_Days.Friday || !Readers[RNo].Access_Days.Saturday || !Readers[RNo].Access_Days.Sunday)
                            {
                                BeginClass(ref RetVal, "Access_Days");

                                if (!Readers[RNo].Access_Days.Monday)
                                    AddKey(ref RetVal, "Monday", "false");

                                if (!Readers[RNo].Access_Days.Tuesday)
                                    AddKey(ref RetVal, "Tuesday", "false");

                                if (!Readers[RNo].Access_Days.Wednesday)
                                    AddKey(ref RetVal, "Wednesday", "false");

                                if (!Readers[RNo].Access_Days.Thursday)
                                    AddKey(ref RetVal, "Thursday", "false");

                                if (!Readers[RNo].Access_Days.Friday)
                                    AddKey(ref RetVal, "Friday", "false");

                                if (!Readers[RNo].Access_Days.Saturday)
                                    AddKey(ref RetVal, "Saturday", "false");

                                if (!Readers[RNo].Access_Days.Sunday)
                                    AddKey(ref RetVal, "Sunday", "false");

                                EndClass(ref RetVal);
                            }


                            /* Relays */
                            B = false;
                            for (int RL_No = 1; RL_No <= Readers[RNo].Relays.Count(); RL_No++)
                            {
                                if (Readers[RNo].Relays[RL_No]) // Röle tetiklenecekse
                                {
                                    B = true;
                                    break;
                                }
                            }
                            if (B) // Tetiklenecek röle varsa
                            {
                                BeginClass(ref RetVal, "Relays");

                                for (int RL_No = 1; RL_No <= Readers[RNo].Relays.Count(); RL_No++)
                                    if (Readers[RNo].Relays[RL_No])
                                        AddKey(ref RetVal, "Relay" + RL_No.ToString(), "true");

                                EndClass(ref RetVal);
                            }
                        }
                        else // Okuyucu devre dışı.
                        {
                            BeginClass(ref RetVal, "Status");
                            AddKey(ref RetVal, "Disable", "true");
                            EndClass(ref RetVal);
                        }

                        EndClass(ref RetVal);   // } Reader
                    }
                    EndClass(ref RetVal);   // } Readers
                }

                EndClass(ref RetVal);  // } User

                return RetVal;
            }


            public const Int16 NO_CREDIT_USAGE = -1;
            public Protect Protected;

            private UInt64 Kart_Bilgisi;
            private Int64 Sicil_No;
            private UserRelays ARelays;
            private AccessInfo Gecis_Durumu;
            private UInt64 Sifre;
            private Int32 Kontor;
            private Int32 Access_Grubu;
            private UserPGMInfo APGMInfo;
            private UserReaders AReaders;
            private string Kullanici_Adi;
        }
    }
}

--- CS Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\WebAccess_Lib\WebAccess_UserLib.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\WebAccess_Lib\WebAccess.cs ---

/*
 * Author: İstanbul Yazılım Elektronik Sanayi
 */

// #define USE_CRYPTO_DLL

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Web;
using System.Runtime.InteropServices;
using System.Collections;
using Microsoft.AspNetCore.Mvc.Rendering;
using System.Reflection;
using System.Diagnostics.Metrics;
using System.Numerics;
using System.Drawing;
using System.Text.Unicode;
using System.Text;

namespace ASPNetCore_WebAccess
{
    /* WebAccess yönetici sınıfı. */
    public class WebAccess
    {
        private string Response_Buffer = "";

        public WebAccess(string Password, bool Crypto_Enabled, HttpContext Context)
        {
            byte[]? Buf = ToBytes(Password);

#if USE_CRYPTO_DLL
            UInt64 P64 = 0;
            UInt64 Tmp = 0;

            Get_Password(Password, "", out P64, out Tmp);
            this.Password = P64; // Önceden cihaza verilmiş olan şifre.
            this.Crypto_Enable = Crypto_Enabled; // Bu alan true ise cihaza gönderilecek olan veriler şifrelenir.
#endif

            this.Context = new ASPCoreContext(Context);
            Params = new HttpParams();

            /* Cihazdan gelen verileri al. */

            // URL`deki "&" ile bir birinden ayrılmış olan kullanıcı parametrelerini al.
            Split_Params(null, false, Crypto_Enabled, true, false);


            if (this.Context.HttpMethod.ToUpper() == "POST") // POST Metoduyla işlem yapılıyorsa
            {
                if (this.Context.ParamExists("b_urlencoded")) // POST metodu ile kriptolu www_form_urlencoded işlemi yapılıyor ise
                {
                    byte[]? cb = new byte[0];
                    cb = ToBytes(this.Context.Param("b_urlencoded"));
                    Split_Params(cb, true, Crypto_Enabled, false, true);  // cb kriptolu olsa bile üst satırda kriptosu çözülmüş olduğundan kripto parametresini False geçiyoruz.
                }
                else
                if (this.Context.ParamExists("Session_Id")) // POST metodu ile kriptosuz www_form_urlencoded işlemi yapılıyor ise
                {
                    Split_Params(null, false, Crypto_Enabled, false, true); // URL`deki "&" ile bir birinden ayrılmış olan cihaz parametrelerini al.
                }
                else // Form-Data kullanılıyor.
                {
                    if (this.Context.ParamExists("b")) // Tüm parametreler tek bir form-data parametresi içinde gönderilmiş ise
                    {
                        byte[]? cb = new byte[0];
                        cb = ToBytes(Get_Form_Value(this.Context.Param("b")));
                        Split_Params(cb, true, false, false, true);  // cb kriptolu olsa bile üst satırda kriptosu çözülmüş olduğundan kripto parametresini False geçiyoruz.
                    }
                    else // Her parametre kendi ismiyle gönderilmiş.
                    if (this.Context.ParamExists("SA")) // Tüm parametreler tek bir form-data parametresi içinde gönderilmiş ise
                    {
                        Params.Session_Id = Convert.ToUInt64(Get_Form_Value(this.Context.Param("SA")));                           // Session_Id - Oturum id`si. Sunucu ile başlatılan her işlemde bir oturum id`si bulunur.
                        Params.Message_Type = (HttpMessageType)Convert.ToUInt32(Get_Form_Value(this.Context.Param("MT")));        // Message_Type - Mesaj türü. Sunucuya gönderilen her pakitn bir mesaj türü vardır.
                        Params.Completed_Type = (HttpCompletedType)Convert.ToUInt32(Get_Form_Value(this.Context.Param("CT")));    // Completed_Type - Completed komutunda kullanılır. Tamamlanan işlemin türünü bildirir.
                        Params.Process_Id = Convert.ToUInt64(Get_Form_Value(this.Context.Param("PI")));                           // Process_Id - Sunucu tarafından oluşturulan bir kod`dur. Completed mesajı ile yapılan işlemin durumu bildirilirken tekrar sunucuya gönderilir.
                        Params.SoftVer = Convert.ToUInt64(Get_Form_Value(this.Context.Param("SV")));                              // Cihazdaki yazılımın versiyonu.
                        Params.Multi_User = (Params.SoftVer > 1083);                                                              // Bu alan true ise cihaza toplu şekilde kullanıcı gönderilebilir.
                        Params.Device_Id = Convert.ToUInt32(Get_Form_Value(this.Context.Param("DI")));                            // Device_Id - Cihaz id`si. Sunucunun hangi cihaz ile çalıştığını anlaması için cihaz id gönderilir.
                        Params.Reader_Num = Convert.ToInt32(Get_Form_Value(this.Context.Param("RN")));                            // Reader_Num - İşlem yapılan okuyucu nosu.
                        Params.Wiegand_Num = Convert.ToInt32(Get_Form_Value(this.Context.Param("WN")));                           // İşlem yapılan okuyucunun, işlem yapılan wiegand nosu.
                        Params.Reader_Count = Convert.ToInt32(Get_Form_Value(this.Context.Param("RC")));                          // Reader_Count - Cihazın okuyucu portu sayısı.
                        Params.Card_Id = Convert.ToUInt64(Get_Form_Value(this.Context.Param("CI")));                              // Card_Id - Okutulan kartın bilgisi.
                        Params.Password = Convert.ToInt64(Get_Form_Value(this.Context.Param("PW")));                              // Password - Kullanıcının girmiş olduğu şifre.
                        Params.Registration_Number = Convert.ToInt64(Get_Form_Value(this.Context.Param("RG")));                   // Registration_Number - İşlem yapan kullanıcının kayıt/sicil nosu.
                        Params.Written_User_Count = Convert.ToUInt64(Get_Form_Value(this.Context.Param("WU")));                   // Written_User_Count - "User" komutu ile cihaza yazılan kullanıcı sayısı.
                        Params.Written_User_Forbidden_Count = Convert.ToUInt64(Get_Form_Value(this.Context.Param("FR")));         // Written_User_Forbidden_Count - "User_Forbidden" komutu ile cihaza yazılan kullanıcı sayısı.
                        Params.Written_User_Unforbidden_Count = Convert.ToUInt64(Get_Form_Value(this.Context.Param("UF")));       // Written_User_Unforbidden_Count - "User_Unforbidden" komutu ile cihaza yazılan kullanıcı sayısı.
                        Params.User_Count = Convert.ToUInt64(Get_Form_Value(this.Context.Param("UC")));                           // User_Count - Cihazdaki kullanıcı sayısı.
                        Params.Log_Count = Convert.ToUInt64(Get_Form_Value(this.Context.Param("LC")));                            // Log_Count - Cihazdaki log sayısı.
                        Params.Log_Event = (LogEvent)Convert.ToUInt32(Get_Form_Value(this.Context.Param("LE")));                  // Log_Event - Log türü.
                        Params.Log_Time = Convert_To_LogTime(Get_Form_Value(this.Context.Param("LT")));                           // Log_Time - İşlem zamanı.
                        Params.Tag_Type = (RFTagType)Convert.ToInt32(Get_Form_Value(this.Context.Param("TT")));                   // Tag_Type - Okutulan kartın türü. DESFire veya Mifare klasik..vb.
                        Params.Data = HttpUtility.UrlDecodeToBytes(Get_Form_Value(this.Context.Param("DT")));                     // Data - Gelen veri.
                        Params.Data_Count = Params.Data != null ? Params.Data.Length : 0;                                         // Data_Count - Data parametresi ile gelen verinin uzunluğu.
                        // Params.Data = ToBytes(HttpUtility.UrlDecode(Get_Form_Value(this.Context.Param("DT"))));                // Data - Gelen veri.
                        // Params.Data_Count = Convert.ToInt32(Get_Form_Value(this.Context.Param("DC")));                         // Data_Count - Data parametresi ile gelen verinin uzunluğu.


                        // Cihazın kullandığı ekran modeli.
                        Params.Screen.Model = (ScreenModel)Convert.ToUInt32(Get_Form_Value(this.Context.Param("SM")));            // Screen_Model - Cihazın kullandığı ekran modeli.
                        Params.Screen.Width = Convert.ToUInt32(Get_Form_Value(this.Context.Param("SW")));                         // Screen_Width - Ekran genişliği.
                        Params.Screen.Height = Convert.ToUInt32(Get_Form_Value(this.Context.Param("SH")));                        // Screen_Height - Ekran yüksekliği.

                        // Grup erişim bölgeleri.
                        Params.Access_Zones.Decode(Get_Form_Value(this.Context.Param("GA")));                                     // Group_Access_Zones

                        // Sensörlerin şu an ki sinyal verileri.
                        Params.Sensors.Unpack(Convert.ToUInt64(Get_Form_Value(this.Context.Param("SN"))), Params.Reader_Count);   // Sensors              - Sensörlerdeki sinyaller.
                    }
                }
            }
            else // GET metoduyla işlem yapılıyor.
            {
                if (this.Context.ParamExists("b")) // GET metodu ile kriptolu işlem yapılıyorsa
                {
                    // URL`deki "b" parametresi ile gelen kriptolu veriyi açarak "&" ile bir birinden ayrılmış olan cihaz parametrelerini al.
                    string s = this.Context.Param("b");

                    if (s != null)
                    {
                        byte[]? cb = new byte[0];
                        cb = ToBytes(s);

                        Split_Params(cb, true, Crypto_Enabled, false, true);
                    }
                }
                else // GET metodu ile kriptosuz işlem yapılıyor.
                if (this.Context.ParamExists("Session_Id")) // GET metodu ile kriptosuz işlem yapılıyorsa
                {
                    // URL`deki "&" ile bir birinden ayrılmış olan cihaz parametrelerini al.
                    Split_Params(null, false, Crypto_Enabled, false, true); // URL`deki "&" ile bir birinden ayrılmış olan cihaz parametrelerini al.
                }
            }


            /* TEST AMAÇLI KULLANIM
            Web_Context.Response_Write("Session_Id: "); Web_Context.Response_Write(Params.Session_Id.ToString());
            Web_Context.Response_Write(", Device_Id: "); Web_Context.Response_Write(Params.Device_Id.ToString());

            for (int i = 0; i < Params.User_Params.Count; i++)
            {
                Web_Context.Response_Write(Params.User_Params.GetKey(i));
                Web_Context.Response_Write(": ");
                Web_Context.Response_Write(Params.User_Params.Value(i));
                Web_Context.Response_Write(", ");
            }


            Web_Context.Response_Write(Params.Session_Id.ToString() + "   -   Sensörlerdeki Sinyaller<br>");
            Web_Context.Response_Write("--------------------------------------------------------------<br>");
            Web_Context.Response_Write("<br>");
            Web_Context.Response_Write("--------------------<br>");
            Web_Context.Response_Write("Lokal Sensörler<br>");
            Web_Context.Response_Write("--------------------<br>");
            Web_Context.Response_Write("  -> EmergencyExit     = " + Params.Sensors.EmergencyExit.ToString() + "<br>");
            Web_Context.Response_Write("  -> Fire              = " + Params.Sensors.Fire.ToString() + "<br>");
            Web_Context.Response_Write("  -> Alarm             = " + Params.Sensors.Alarm.ToString() + "<br>");
            Web_Context.Response_Write("  -> TamperSwitch      = " + Params.Sensors.TamperSwitch.ToString() + "<br>");
            Web_Context.Response_Write("  -> ExtraSensor1      = " + Params.Sensors.ExtraSensor1.ToString() + "<br>");
            Web_Context.Response_Write("  -> ExtraSensor2      = " + Params.Sensors.ExtraSensor2.ToString() + "<br>");
            Web_Context.Response_Write("<br>");
            Web_Context.Response_Write("--------------------<br>");
            Web_Context.Response_Write("Okuyucu Sensörleri<br>");
            Web_Context.Response_Write("--------------------<br>");

            for (int RNo = 0; RNo < Params.Reader_Count; RNo++)
            {
                Web_Context.Response_Write("  -> Reader" + (RNo + 1).ToString() + "  (Sensor1: " + Params.Sensors[RNo].Sensor1.ToString() + ", Sensör2: " + Params.Sensors[RNo].Sensor2.ToString() + ", Exit: " + Params.Sensors[RNo].Exit.ToString() + ")<br>");
            }

            Web_Context.Response_Write("<br>");
            // */
        }

        private string Get_Form_Value(string Value)
        {
#if USE_CRYPTO_DLL
            if (this.Crypto_Enable)
            {
                byte[]? cb = new byte[0];
                // cb = ToBytes(ToHex(ToBytes(Value)));  --> Eskisi gibi hex olarak göndermek istenirse buradaki kod açılmalı.
                cb = ToBytes(Value);
                Decrypto(Password, ref cb);
                return ToString(cb);
            }
            else
#endif
                return Value;
        }

        private void Split_Params(byte[]? cb, bool Do_Split, bool Crypto_Enabled, bool Get_User_Params, bool Get_Device_Params)
        {
            HttpParameters Req_Params = new HttpParameters();

            if (Do_Split)
            {
                Int32 i;
                string pn, pv;
                string[] q;
                string[] pa;

#if USE_CRYPTO_DLL
                if (Crypto_Enabled)
                    Decrypto(Password, ref cb);
#endif

                Req_Params.Clear();
                q = ToString(cb).Split('&');
                for (i = 0; i < q.Length; i++)
                {
                    pv = "";
                    pa = q[i].Split('=');
                    if (pa.Length > 0)
                    {
                        pn = pa[0];

                        if (pa.Length > 1)
                            pv = pa[1];

                        if (pn.Trim().Length > 0)
                            Req_Params.Add(pn, pv);
                    }
                }
            }
            else
                Req_Params.Assign(this.Context.Params());

            // Kullanıcı parametrelerini al.
            if (Get_User_Params)
            {
                string PrmName;

                List<string> PrmList = this.Context.Context.Request.Query.Keys.ToList();

                for (int i = 0; i < PrmList.Count; i++)
                {
                    PrmName = PrmList[i];
                    if (PrmName != null)
                        if (Params.User_Params.IndexOfName(PrmName) < 0) // Sıradaki parametre kullanıcı listesine daha önce eklenmemiş ise
                            if (Params.User_Params.Is_Device_Param(PrmName) == false) // Sıradaki parametre kullanıcı parametresi ise
                                Params.User_Params.Add(PrmName, this.Context.Param(PrmName)); // Ekle.
                }
            }

            // Cihaz parametrelerini al.
            if (Get_Device_Params) // Kullanıcı parametreleri dışındaki cihaz parametreleri de alınacak ise
            {
                Params.Session_Id = Convert.ToUInt64(Req_Params["Session_Id"]);                                     // Oturum id`si. Sunucu ile başlatılan her işlemde bir oturum id`si bulunur.
                Params.Message_Type = (HttpMessageType)Convert.ToUInt32(Req_Params["Message_Type"]);                // Mesaj türü. Sunucuya gönderilen her pakitn bir mesaj türü vardır.
                Params.Completed_Type = (HttpCompletedType)Convert.ToUInt32(Req_Params["Completed_Type"]);          // Completed komutunda kullanılır. Tamamlanan işlemin türünü bildirir.
                Params.Process_Id = Convert.ToUInt64(Req_Params["Process_Id"]);                                     // Sunucu tarafından oluşturulan bir kod`dur. Completed mesajı ile yapılan işlemin durumu bildirilirken tekrar sunucuya gönderilir.
                Params.SoftVer = Convert.ToUInt64(Req_Params["SoftVer"]);                                           // Cihazdaki yazılımın versiyonu.
                Params.Multi_User = (Params.SoftVer > 1083);                                                        // Bu alan true ise cihaza toplu şekilde kullanıcı gönderilebilir.
                Params.Device_Id = Convert.ToUInt32(Req_Params["Device_Id"]);                                       // Cihaz id`si. Sunucunun hangi cihaz ile çalıştığını anlaması için cihaz id gönderilir.
                Params.Reader_Num = Convert.ToInt32(Req_Params["Reader_Num"]);                                      // İşlem yapılan okuyucu nosu.
                Params.Wiegand_Num = Convert.ToInt32(Req_Params["Wiegand_Num"]);                                    // İşlem yapılan okuyucunun, işlem yapılan wiegand nosu.
                Params.Reader_Count = Convert.ToInt32(Req_Params["Reader_Count"]);                                  // Cihazın okuyucu portu sayısı.

                // Cihazın kullandığı ekran modeli.
                Params.Screen.Model = (ScreenModel)Convert.ToUInt32(Req_Params["Screen_Model"]);                    // Cihazın kullandığı ekran modeli.
                Params.Screen.Width = Convert.ToUInt32(Req_Params["Screen_Width"]);                                 // Ekran genişliği.
                Params.Screen.Height = Convert.ToUInt32(Req_Params["Screen_Height"]);                               // Ekran yüksekliği.

                Params.Card_Id = Convert.ToUInt64(Req_Params["Card_Id"]);                                           // Okutulan kartın bilgisi.
                Params.Password = Convert.ToInt64(Req_Params["Password"]);                                          // Kullanıcının girmiş olduğu şifre.
                Params.Registration_Number = Convert.ToInt64(Req_Params["Registration_Number"]);                    // İşlem yapan kullanıcının kayıt/sicil nosu.
                Params.Written_User_Count = Convert.ToUInt64(Req_Params["Written_User_Count"]);                     // "User" komutu ile cihaza yazılan kullanıcı sayısı.
                Params.Written_User_Forbidden_Count = Convert.ToUInt64(Req_Params["Written_User_Forbidden"]);       // "User_Forbidden" komutu ile cihaza yazılan kullanıcı sayısı.
                Params.Written_User_Unforbidden_Count = Convert.ToUInt64(Req_Params["Written_User_Unforbidden"]);   // "User_Unforbidden" komutu ile cihaza yazılan kullanıcı sayısı.
                Params.User_Count = Convert.ToUInt64(Req_Params["User_Count"]);                                     // Cihazdaki kullanıcı sayısı.
                Params.Log_Count = Convert.ToUInt64(Req_Params["Log_Count"]);                                       // Cihazdaki log sayısı.
                Params.Log_Event = (LogEvent)Convert.ToUInt32(Req_Params["Log_Event"]);                             // Log türü.
                Params.Log_Time = Convert_To_LogTime(Req_Params["Log_Time"]);                                       // İşlem zamanı.
                Params.Tag_Type = (RFTagType)Convert.ToInt32(Req_Params["Tag_Type"]);                               // Okutulan kartın türü. DESFire veya Mifare klasik..vb.
                Params.Data = HttpUtility.UrlDecodeToBytes(Req_Params["Data"]);                                     // Gelen veri.
                Params.Data_Count = Params.Data != null ? Params.Data.Length : 0;                                   // Data parametresi ile gelen verinin uzunluğu.
                // Params.Data = ToBytes(HttpUtility.UrlDecode(Req_Params["Data"]));                                // Gelen veri.
                // Params.Data_Count = Convert.ToInt32(Req_Params["Data_Count"]);                                   // Data parametresi ile gelen verinin uzunluğu.

                /*
                byte[]? B = ToBytes(Req_Params["Data"]);
                if (B != null)
                    Console.WriteLine("-> Data: " + Encoding.UTF8.GetString(B));
                // */

                // Grup erişim bölgeleri.
                Params.Access_Zones.Decode(Req_Params["Group_Access_Zones"]);

                // Sensörlerin şu an ki sinyal verileri.
                Params.Sensors.Unpack(Convert.ToUInt64(Req_Params["Sensors"]), Params.Reader_Count);
            }
        }

        public string GetResponse()
        {
            // Yanıt verisini ayarlayıp döndürür.
            if (Is_Session_Valid(Params.Session_Id)) // Session id geçerli ise
            {
                // Gelen mesajın oturum id`si olduğu gibi döndürülür. <Session_Id> komutunun kullanılması zorunludur.

                Response_Buffer = Response_Buffer.Trim();
                if (Response_Buffer.Length > 0)
                {
                    if (Response_Buffer[0] != '{')
                        Response_Buffer = "{" + Response_Buffer;

                    if (Response_Buffer[Response_Buffer.Length - 1] != '}')
                    {
                        if (Response_Buffer[Response_Buffer.Length - 1] == ',')
                            Response_Buffer = Response_Buffer.Substring(0, Response_Buffer.Length - 1);

                        Response_Buffer += "}";
                    }
                }

                string RetVal = "<Session_Id>" + Params.Session_Id.ToString() + "</>" + Response_Buffer;

#if USE_CRYPTO_DLL
                if (Crypto_Enable == true)
                {
                    byte[] Dst_Buffer = new byte[0];
                    WebAccess.Crypto(Password, ToBytes(RetVal), ref Dst_Buffer);
                    return ToHex(Dst_Buffer);
                }
                else
#endif
                {
                    return RetVal;
                }
            }
            else
                return "";
        }

        public void Send(string Value)
        {
            Value = Value.Trim();
            Response_Buffer = Response_Buffer.Trim();
            if (Response_Buffer.Length > 0)
                if (Value.Length > 0 && Value[0] != ',')
                {
                    char S = Response_Buffer[Response_Buffer.Length - 1];
                    if (S != '>' && S != '{' && S != ',')
                        Response_Buffer += ',';
                }

            Response_Buffer += Value;
        }
        
        public void SendCommand(string Key, string Value)
        {
            Response_Buffer = Response_Buffer.Trim();
            if (Response_Buffer.Length > 0)
                if (Response_Buffer[Response_Buffer.Length - 1] != ',')
                    Response_Buffer += ',';

            Response_Buffer += '"' + Key.Trim() + '"' + ':' + '"' + Value + '"';
        }
        
        public void SendCommand(string Key, UInt64 Value)
        {
            SendCommand(Key, Value.ToString());
        }

        public void SendCommand(string Key, Int64 Value)
        {
            SendCommand(Key, Value.ToString());
        }

        public void SendCommand(string Key, UInt32 Value)
        {
            SendCommand(Key, Value.ToString());
        }

        public void SendCommand(string Key, Int32 Value)
        {
            SendCommand(Key, Value.ToString());
        }

        public void SendCommand(string Key, bool Value)
        {
            SendCommand(Key, (Value ? "true" : "false"));
        }

        public void SendCommand(string Key, DateTime Value)
        {
            //                                                       YYYY-MM-DD HR:MN:SC
            // Cihaz zamanı formatı şu şekilde  ->  "Device_Time" : "2023-04-02 14:34:56"
            string Device_Time = Value.Year.ToString() + '-' + Value.Month.ToString() + '-' + Value.Day.ToString() + ' ' +
                                 Value.Hour.ToString() + ':' + Value.Minute.ToString() + ':' + Value.Second.ToString();

            SendCommand(Key, Device_Time);
        }

        public void SendArray(string Key, string Value)
        {
            Response_Buffer = Response_Buffer.Trim();
            if (Response_Buffer.Length > 0)
                if (Response_Buffer[Response_Buffer.Length - 1] != ',')
                    Response_Buffer += ',';

            Response_Buffer += '"' + Key.Trim() + '"' + ':' + '[' + Value + ']';
        }

        public void Send_Process_Id(UInt64 Process_Id)
        {
            SendCommand("Process_Id", Process_Id);
        }

        public void Send_I_Am_Here_Duration(UInt32 Duration)
        {
            SendCommand("I_Am_Here_Duration", Duration.ToString());
        }

        public void Send_Device_Time(DateTime Value)
        {
            //                                                       YYYY-MM-DD HR:MN:SC
            // Cihaz zamanı formatı şu şekilde  ->  "Device_Time" : "2023-04-02 14:34:56"
            string Device_Time = Value.Year.ToString() + '-' + Value.Month.ToString() + '-' + Value.Day.ToString() + ' ' +
                                 Value.Hour.ToString() + ':' + Value.Minute.ToString() + ':' + Value.Second.ToString();

            SendCommand("Device_Time", Device_Time);
        }

        public void Session_Id_Mode(WebSessionIdMode Session_Id_Mode)
        {
            switch (Session_Id_Mode)
            {
                case WebSessionIdMode.Random:
                    SendCommand("Session_Id_Mode", "Random");
                    break;

                // case WebSessionIdMode.DeviceId:
                default:
                    SendCommand("Session_Id_Mode", "DeviceId");
                    break;
            }
        }

        public void Check_Session_Id(bool Check)
        {
            SendCommand("Check_Session_Id", Check);
        }

        public void Send_Clear_Screen(Int32 Background_Color = -1)
        {
            // Ekranı temizler.
            SendCommand("Clear_Screen", ToHexColor((UInt32)Background_Color));
        }

        public void Send_Draw_Icon(IconType Icon_Type, Int32 X, Int32 Y, UInt32 Duration, Int32 Background_Color = -1)
        {
            // TFT ekranlı cihazlarda ekrana ikon çizer.

            string Value = '"' + Icon_Type.ToString() + "\"," + X.ToString() + ',' + Y.ToString() + ',' + Duration.ToString() + ",\"" + (Background_Color < 0 ? "0x1000000" : ToHexColor((UInt32)Background_Color)) + '"';
            SendArray("Draw_Icon", Value);
        }

        public void Send_Draw_Text(Int32 X, Int32 Y, string Text, UInt32 Duration, UInt32 Font_Size = 1, Int32 Font_Color = 0, Int32 Background_Color = -1, 
                                 TextAlignment Alignment = TextAlignment.Left, TextEncoding Text_Encoding = TextEncoding.UTF8)
        {
            // TFT ekranlı cihazlarda ekrana ikon çizer.

            string Value = X.ToString() + ',' + Y.ToString() + ",\"" + Text + "\"," + Duration.ToString() + ',' + Font_Size.ToString() + ",\"" +  Alignment.ToString() + "\",\"" +
                           ToHexColor((UInt32)Font_Color) + "\",\"" + (Background_Color < 0 ? "0x1000000" : ToHexColor((UInt32)Background_Color)) + "\",\"" + Text_Encoding.ToString() + '"';

            SendArray("Draw_Text", Value);
        }

        public enum DESFireKeyType
        {
            T_DES = 0,  // 56-bit DES (single DES, DES)
            T_2K3DES = 1,  // 112-bit 3DES (2 key triple DES, 2K3DES)
            T_3K3DES = 2,  // 168-bit 3DES (3 key triple DES, 3K3DES)
            T_AES = 3  // AES-128
        };

        public enum FileDataType
        {
            String = 0,
            Base64 = 1,
            Hex = 2
        };

        public void Send_DESFire_Set_Key(byte Key_No, DESFireKeyType Key_Type, byte Key_Version, string Key_Data)
        {
            string KT_Str;

            switch (Key_Type)
            {
                case DESFireKeyType.T_DES:
                    KT_Str = "DES";
                    break;

                case DESFireKeyType.T_2K3DES:
                    KT_Str = "3DES";
                    break;

                case DESFireKeyType.T_3K3DES:
                    KT_Str = "3K3DES";
                    break;

                // case DESFireKeyType.T_AES:
                default:
                    KT_Str = "AES";
                    break;
            }

            SendArray("DESFire_Set_Key", Key_No.ToString() + ',' + '"' + KT_Str + '"' + ',' + Key_Version.ToString() + ',' + '"' + Key_Data + '"');
        }

        public void Send_DESFire_Read_File(UInt32 Process_Id, UInt32 App_Id, byte File_No, UInt32 Offset, UInt32 Length, FileDataType Data_Type = FileDataType.String)
        {
            SendArray("DESFire_Read_File", Process_Id.ToString() + ',' + '"' + App_Id.ToString("X6") + '"' + ',' + File_No.ToString() + ',' + Offset.ToString() + ',' + Length.ToString() + ',' + Convert.ToString((UInt32)Data_Type));
        }

        public void Send_DESFire_Write_File(UInt32 Process_Id, UInt32 App_Id, byte File_No, UInt32 Offset, byte[] Data, FileDataType Data_Type = FileDataType.String)
        {
            string Str_Data;

            switch (Data_Type)
            {
                case FileDataType.Base64:
                    Str_Data = Convert.ToBase64String(Data);
                    break;

                case FileDataType.Hex:
                    Str_Data = Convert.ToHexString(Data);
                    break;

                // case FileDataType.String:
                default:
                    Str_Data = System.Text.Encoding.UTF8.GetString(Data);
                    break;
            }

            SendArray("DESFire_Write_File", Process_Id.ToString() + ',' + '"' + App_Id.ToString("X6") + '"' + ',' + File_No.ToString() + ',' + Offset.ToString() + ',' + '"' + Str_Data + '"' + ',' + Convert.ToString((UInt32)Data_Type));
        }

        public void Send_Mifare_Set_Key(string Key_Data, byte Mifare_Sector_No, UInt32 DESFire_App_Id = 0x201703, byte DESFire_File_No = 1)
        {
            // C++ : void Mifare_Set_Key(byte Key_Data[12], byte DESFire_App_Id[6], byte DESFire_File_No, byte Mifare_Sector_No, byte Key_Type);
            // SendArray("Mifare_Set_Key", '"' + Key_Data + '"' + ',' + '"' + DESFire_App_Id.ToString("X6") + '"' + ',' + DESFire_File_No.ToString() + ',' + Mifare_Sector_No.ToString() + ',' + '0');

            string Prm_Key_Data = "";

            for (int i = 0; i < Key_Data.Length; i++)
                if ((Key_Data[i] >= 'A' && Key_Data[i] <= 'F') || (Key_Data[i] >= 'a' && Key_Data[i] <= 'f') || (Key_Data[i] >= '0' && Key_Data[i] <= '9'))
                    Prm_Key_Data += Key_Data[i];

            if (Prm_Key_Data.Length > 0)
                SendArray("Mifare_Set_Key", '"' + Prm_Key_Data + '"' + ',' + '"' + DESFire_App_Id.ToString("X6") + '"' + ',' + DESFire_File_No.ToString() + ',' + Mifare_Sector_No.ToString() + ',' + '0');
        }

        public void Send_Read_Card_Data(UInt32 Process_Id, UInt32 Offset, UInt32 Length, byte Sector_No, FileDataType Data_Type = FileDataType.String)
        {
            SendArray("Read_Card_Data", Process_Id.ToString() + ',' + Offset.ToString() + ',' + Length.ToString() + ',' + Sector_No.ToString() + ',' + Convert.ToString((UInt32)Data_Type));
        }

        public void Send_Write_Card_Data(UInt32 Process_Id, UInt32 Offset, byte Sector_No, byte[] Data, FileDataType Data_Type = FileDataType.String)
        {
            string Str_Data;

            switch (Data_Type)
            {
                case FileDataType.Base64:
                    Str_Data = Convert.ToBase64String(Data);
                    break;

                case FileDataType.Hex:
                    Str_Data = Convert.ToHexString(Data);
                    break;

                // case FileDataType.String:
                default:
                    Str_Data = System.Text.Encoding.UTF8.GetString(Data);
                    break;
            }

            SendArray("Write_Card_Data", Process_Id.ToString() + ',' + Offset.ToString() + ',' + Sector_No.ToString() + ',' + '"' + Str_Data + '"' + ',' + Convert.ToString((UInt32)Data_Type));
        }

        public void Send_Sound(Int32 Reader_Num, SoundSignalType Sound_Signal_Type)
        {
            if (Reader_Num < 1)
                Reader_Num = 1;

            if (Reader_Num > 16)
                Reader_Num = 16;

            SendArray("Sound", Reader_Num.ToString() + ',' + ((Int32)Sound_Signal_Type).ToString());
        }

        public void Send_Trigger_Relay(Int32 Reader_Num, UInt32 Duration)
        {
            if (Reader_Num < 1)
                Reader_Num = 1;

            if (Reader_Num > 16)
                Reader_Num = 16;

            SendArray("Trigger_Relay", Reader_Num.ToString() + ',' + Duration.ToString());
        }

        public void Send_Erase_All_Logs()
        {
            SendCommand("Erase_All_Logs", true);
        }

        public void Send_Log_Rollback(UInt64 Log_Count)
        {
            SendCommand("Log_Rollback", Log_Count);
        }

        public void Send_Log_Rollforward(UInt64 Log_Count)
        {
            SendCommand("Log_Rollforward", Log_Count);
        }

        public void Send_Erase_All_Users()
        {
            SendCommand("Erase_All_Users", true);
        }

        public void Send_User_Forbidden(UInt64 Card_Id)
        {
            SendCommand("User_Forbidden", Card_Id);
        }

        public void Send_User_Unforbidden(UInt64 Card_Id)
        {
            SendCommand("User_Unforbidden", Card_Id);
        }

        public void Send_Local_Sensor_Sensibility(UInt16 Value_ms)
        {
            SendCommand("Local_Sensor_Sensibility", Value_ms);
        }

        public void Send_Door_Sensor_Sensibility(UInt16 Value_ms)
        {
            SendCommand("Door_Sensor_Sensibility", Value_ms);
        }

        private static string ToHexItem(byte Sayi)
        {
            if (Sayi >= 0 && Sayi <= 9)
                return Sayi.ToString();
            else
                if (Sayi >= 0x0A && Sayi <= 0x0F)
                return ((char)(Sayi + 55)).ToString();
            else
                return "";
        }

        private static string ToHex(byte[] Bytes)
        {
            string RetVal = "";

            for (int i = 0; i < Bytes.Length; i++)
                RetVal += ToHexItem(Convert.ToByte(Bytes[i] / 16)) + ToHexItem(Convert.ToByte(Bytes[i] % 16));

            return (RetVal);
        }

        private static string ToHexColor(UInt32 Color)
        {
            string RetVal = "";
            byte[] Buf = new byte[3];

            unsafe
            {
                byte* B = (byte*)&Color;

                for (int i = 0; i < 3; i++)
                    Buf[2 - i] = B[i];

            }

            bool First_Item = true;
            for (int i = 0; i < Buf.Length; i++)
                if (Buf[i] > 0 || First_Item == false)
                {
                    First_Item = false;
                    RetVal += ToHexItem(Convert.ToByte(Buf[i] / 16)) + ToHexItem(Convert.ToByte(Buf[i] % 16));
                }
                    

            return (RetVal);
        }

        private static byte[]? ToBytes(string? Str)
        {
            if (Str != null)
                if (Str.Length > 0)
                {
                    byte[] RetVal = new byte[Str.Length];

                    for (int i = 0; i < Str.Length; i++)
                        RetVal[i] += (byte)Str[i];

                    return RetVal;
                }

            return null;
        }

        unsafe public static byte[] ToBytes(byte* Bytes, int Count)
        {
            int i;
            byte[] RetVal = new byte[Count];

            for (i = 0; i < Count; i++)
                RetVal[i] = Bytes[i];

            return RetVal;
        }

        public static string ToString(byte[]? Bytes)
        {
            string RetVal = "";

            if (Bytes != null)
            {
                for (int i = 0; i < Bytes.Length; i++)
                    RetVal += (char)Bytes[i];
            }

            return RetVal;
        }

        private DateTime Convert_To_LogTime(string? Str_LogTime)
        {
            // Str_LogTime içindeki zamanı Datetime türüne çevirir.

            DateTime RetVal;

            if (!string.IsNullOrEmpty(Str_LogTime))
            {
                Int32 yr, mt, dy, hr, mn, sc, ms;
                Int32 StartIndex;

                StartIndex = 0;
                yr = Get_Number(Str_LogTime, ref StartIndex, 2000);
                mt = Get_Number(Str_LogTime, ref StartIndex, 1);
                dy = Get_Number(Str_LogTime, ref StartIndex, 1);
                hr = Get_Number(Str_LogTime, ref StartIndex);
                mn = Get_Number(Str_LogTime, ref StartIndex);
                sc = Get_Number(Str_LogTime, ref StartIndex);
                ms = Get_Number(Str_LogTime, ref StartIndex);

                try
                {
                    RetVal = new DateTime(yr, mt, dy, hr, mn, sc, ms);
                }
                catch
                {
                    RetVal = new DateTime(2000, 1, 1, 0, 0, 0, 0);
                }
            }
            else
                RetVal = new DateTime(2000, 1, 1, 0, 0, 0, 0);

            return RetVal;
        }

        private Int32 Get_Number(string S, ref Int32 StartIndex, Int32 Default = 0)
        {
            int i, Ln;
            string Str = "";

            if (S == null)
                return Default;

            if (StartIndex >= S.Length)
                return Default;

            Ln = S.Length;
            for (i = StartIndex; i < Ln; i++)
            {
                if (S[i] >= '0' && S[i] <= '9')
                    Str += S[i];
                else
                if (S[i] != 0x20 || (Str.Length > 0)) // İşlenen karakter boşluk değilse veya boşluksa ve rakam alınmış ise
                {
                    // Rakam olmayan karakterleri sonraki rakama kadar atla.
                    while (i < S.Length && (S[i] < '0' || S[i] > '9'))
                    {
                        i++;
                    }

                    break; // for i döngüsünün dışına çık.
                }
            }

            StartIndex = i;

            if (Str.Length > 0)
            {
                try { return Convert.ToInt32(Str); } catch { }
            }

            return Default;
        }

        public bool Is_Session_Valid(UInt64 Value)
        {
            Int32 i, sz; UInt64 mb; UInt64[] t = new UInt64[4];

            if (Value > 0)
            {
                mb = 0xFF;
                sz = 24;

                for (i = 3; i > -1; i--)
                {
                    t[i] = (Value >> sz) & mb;
                    sz -= 8;
                }

                return ((Value >> 32) & 0xFFFFFFFF) == (((t[0] ^ t[2]) << 24) | ((t[1] ^ t[3]) << 16) | ((t[2] ^ t[3]) << 8) | (t[1] ^ t[0]));
            }
            else
                return false;
        }

        static public string EventToString(LogEvent ALog_Event)
        {
            string RetVal = "";

            switch (ALog_Event)
            {
                case LogEvent.AccessSuccessful: RetVal = "İzin verildi"; break;
                case LogEvent.UserInside: RetVal = "İzin verildi (Giriş yaptı)"; break;
                case LogEvent.UserOutside: RetVal = "İzin verildi (Çıkış yaptı)"; break;
                case LogEvent.UnauthorizedAccess: RetVal = "İzin verilmedi (Kişi tanımlı değil)"; break;
                case LogEvent.UnauthorizedEntry: RetVal = "Giriş engellendi (Kişi tanımlı değil)"; break;
                case LogEvent.UnauthorizedExit: RetVal = "Çıkış engellendi (Kişi tanımlı değil)"; break;
                case LogEvent.OutOfTimeZone: RetVal = "İzin verilmedi (Zaman dilimi dışında)"; break;
                case LogEvent.TimeLimited: RetVal = "İzin verilmedi (Zaman kısıtlaması)"; break;
                case LogEvent.CreditDone: RetVal = "Kontör bitti"; break;
                case LogEvent.PasswordError: RetVal = "İzin verilmedi (Hatalı şifre girişi)"; break;
                case LogEvent.AntiPassbackEntry: RetVal = "İzin verildi (Giriş)"; break;
                case LogEvent.AntiPassbackExit: RetVal = "İzin verildi (Çıkış)"; break;
                case LogEvent.TryingExitWithoutEntry: RetVal = "Çıkış isteği engellendi (Giriş yapmadan çıkmaya çalıştı)"; break;
                case LogEvent.TryingEntryWithoutExit: RetVal = "Giriş isteği engellendi (Çıkış yapmadan girmeye çalıştı)"; break;
                case LogEvent.ForbiddenDoor: RetVal = "İzin verilmedi (Kapı hizmet dışı)"; break;
                case LogEvent.DoorOpenRemained: RetVal = "Kapı açık kaldı"; break;
                case LogEvent.UnauthorizedAccessToSubgroup: RetVal = "İzin verilmedi (Ana kapıdan geçmemiş)"; break;
                case LogEvent.DoorForciblyOpened: RetVal = "Kapı zorla açıldı"; break;
                case LogEvent.CapacityIsFull: RetVal = "Erişim bölgesine giriş limiti dolmuş"; break;
                case LogEvent.DoorSensorActive: RetVal = "Kapı açıldı"; break;
                case LogEvent.DoorSensorPassive: RetVal = "Kapı kapandı"; break;
                case LogEvent.DoorExitButton: RetVal = "Buton ile geçiş"; break;
                case LogEvent.EmergencyExitButton: RetVal = "Acil durum butonuna basılmış"; break;
                case LogEvent.FireSensor: RetVal = "Yangın sensörü aktif"; break;
                case LogEvent.AlarmSensor: RetVal = "Alarm sensörü aktif"; break;
                case LogEvent.TamperSensor: RetVal = "Pano kapağı açıldı"; break;
                case LogEvent.ExtraSensor1: RetVal = "Ekstra Sensör 1 aktif"; break;
                case LogEvent.ExtraSensor2: RetVal = "Ekstra Sensör 2 aktif"; break;
                case LogEvent.GDMNoTransition: RetVal = "Geçiş yapmadı (Uygun olmayan geçiş kontrolü)"; break;
                case LogEvent.Disconnect: RetVal = "Bağlantı koptu"; break;
                case LogEvent.Connect: RetVal = "Yeniden bağlandı"; break;
                case LogEvent.SystemStart: RetVal = "Cihaz açıldı"; break;
                case LogEvent.PGMLimited: RetVal = "İzin verilmedi (Kişinin grup limiti doldu)"; break;
                case LogEvent.ForbiddenDay: RetVal = "İzin verilmedi (Kişinin bugün geçiş izni yok)"; break;
                case LogEvent.FinishedAccessToTimePeriod: RetVal = "İzin verilmedi (Zaman dilimindeki geçiş hakkı bitti)"; break;
                case LogEvent.FinishedToDailyAccess: RetVal = "İzin verilmedi (Günlük geçiş hakkı bitti)"; break;
                case LogEvent.LifetimeExpired: RetVal = "İzin verilmedi (Kapıyı kullanım süresi bitti)"; break;
                case LogEvent.FinishedAccessToLifetime: RetVal = "İzin verilmedi (Kapıyı kullanım süresi içindeki geçiş hakkı bitti)"; break;
                case LogEvent.CounterSensor1In: RetVal = "Kapının 1.sensöründen giriş sinyali alındı"; break;
                case LogEvent.CounterSensor1Out: RetVal = "Kapının 1.sensöründen çıkış sinyali alındı"; break;
                case LogEvent.CounterSensor2In: RetVal = "Kapının 2.sensöründen giriş sinyali alındı"; break;
                case LogEvent.CounterSensor2Out: RetVal = "Kapının 2.sensöründen çıkış sinyali alındı"; break;
                case LogEvent.CounterSensorExitIn: RetVal = "Kapının exit sensöründen giriş sinyali alındı"; break;
                case LogEvent.CounterSensorExitOut: RetVal = "Kapının exit sensöründen çıkış sinyali alındı"; break;
                case LogEvent.ClosedTheForciblyOpenedDoor: RetVal = "Kapı kapatıldı (Zorla açılmıştı)"; break;
                case LogEvent.ClosedTheOpenRemainedDoor: RetVal = "Kapı kapatıldı (Açık unutulmuştu)"; break;
                case LogEvent.DoorAlarmSensorActive: RetVal = "Kapı alarm sensörü aktif"; break;
                case LogEvent.DoorAlarmSensorPassive: RetVal = "Kapı alarm sensörü pasif"; break;
                case LogEvent.RTCError: RetVal = "Cihaz saatinde sorun var"; break;
                case LogEvent.PassedWithCardAndPassword: RetVal = "İzin verildi (Kart ve şifre ile geçti)"; break;
                case LogEvent.PassedWithPassword: RetVal = "İzin verildi (Şifre ile geçti)"; break;
            }

            return RetVal;
        }

        public bool IsSuccessEvent(LogEvent Event)
        {
            // Başarılı bir geçiş log`u ise true döndürür.
            switch (Event)
            {
                case LogEvent.AccessSuccessful:
                case LogEvent.UserInside:
                case LogEvent.UserOutside:
                case LogEvent.AntiPassbackEntry:
                case LogEvent.AntiPassbackExit:
                case LogEvent.DoorExitButton:
                case LogEvent.CounterSensor1In:
                case LogEvent.CounterSensor1Out:
                case LogEvent.CounterSensor2In:
                case LogEvent.CounterSensor2Out:
                case LogEvent.CounterSensorExitIn:
                case LogEvent.CounterSensorExitOut:
                case LogEvent.PassedWithCardAndPassword:
                case LogEvent.PassedWithPassword:
                    return true;

                default:
                    return false;
            }
        }

#if USE_CRYPTO_DLL
        public static void Crypto(UInt64 Password, byte[]? Src_Buffer, ref byte[] Dst_Buffer)
        {
            IntPtr Dst_Buffer_Ptr = IntPtr.Zero;
            Int32 Dst_Len;

            if (Src_Buffer != null)
            {
                _Crypto(Password, Src_Buffer, Src_Buffer.Length, ref Dst_Buffer_Ptr, out Dst_Len);

                unsafe
                {
                    Dst_Buffer = ToBytes((byte*)Dst_Buffer_Ptr, Dst_Len);
                }
            }
        }

        public static void Decrypto(UInt64 Password, ref byte[]? Crypt_Data)
        {
            IntPtr Decrypted_Data_Ptr = IntPtr.Zero;
            Int32 Decrypted_Data_Size;
            Int32 Len;

            if (Crypt_Data != null)
                Len = Crypt_Data.Length;
            else
                Len = 0;

            _Decrypto(Password, Crypt_Data, Len, ref Decrypted_Data_Ptr, out Decrypted_Data_Size);

            unsafe
            {
                Crypt_Data = ToBytes((byte*)Decrypted_Data_Ptr, Decrypted_Data_Size);
            }
        }

        public static bool Get_Password(string Password_Str, string New_Password_Str, out UInt64 Password_64, out UInt64 New_Password_64)
        {
            byte[]? Password = null;
            byte[]? New_Password = null;

            Password_64 = 0;
            New_Password_64 = 0;

            if (Password_Str != null)
            {
                Password = ToBytes(Password_Str);
                if (Password != null)
                    Password_64 = (UInt64)Password.Length;
            }

            if (New_Password_Str != null)
            {
                New_Password = ToBytes(New_Password_Str);
                if (New_Password != null)
                    New_Password_64 = (UInt64)New_Password.Length;
            }

            return _Get_Password(Password, (int)Password_64, New_Password, (int)New_Password_64, out Password_64, out New_Password_64);
        }

        [DllImport(DLL_NAME, EntryPoint = "Crypto", CharSet = CharSet.None, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]
        private static extern bool _Crypto(UInt64 Password, byte[] Src_Buffer, Int32 Src_Len, ref IntPtr Dst_Buffer, out Int32 Dst_Len);

        [DllImport(DLL_NAME, EntryPoint = "Decrypto", CharSet = CharSet.None, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]
        private static extern bool _Decrypto(UInt64 Password, byte[]? Crypt_Data, Int32 Crypt_Data_Size, ref IntPtr Decrypted_Data, out Int32 Decrypted_Data_Size);

        [DllImport(DLL_NAME, EntryPoint = "Get_Password", CharSet = CharSet.None, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]
        private static extern bool _Get_Password(byte[]? Password_Buf, Int32 Password_Buf_Size, byte[]? New_Password_Buf, Int32 New_Password_Buf_Size, out UInt64 Password_64, out UInt64 New_Password_64);

        private const string DLL_NAME = @"PDeviceCrypt.dll";

        private UInt64 Password = 0; // Önceden cihaza verilmiş olan şifre.
        private bool Crypto_Enable = true; // Bu alan true ise cihaza gönderilecek olan veriler şifrelenir.
#endif

        public const UInt64 Empty_Card = 0x7FFFFFFFFFFFFFFF; // Geçerli bir kart no sıfır`dan büyük, buradaki değerden küçük olmalıdır.
        public readonly HttpParams Params;
        public ASPCoreContext Context;
    }

    public class SensorInfo
    {
        public SensorInfo()
        {
            Sensor1 = false;
            Sensor2 = false;
            Exit = false;
        }

        public bool Sensor1;
        public bool Sensor2;
        public bool Exit;
    }

    public class SensorSignals
    {
        public SensorSignals()
        {
            Sensor_Signals = new List<SensorInfo>();

            for (int i = 0; i < 16; i++)
                Sensor_Signals.Add(new SensorInfo());

            Clear();
        }

        public SensorInfo this[int Index]
        {
            get { return Sensor_Signals[Index]; }
        }

        public void Clear()
        {
            EmergencyExit = false;
            Fire = false;
            Alarm = false;
            TamperSwitch = false;
            ExtraSensor1 = false;
            ExtraSensor2 = false;

            for (int i = 0; i < Sensor_Signals.Count(); i++)
            {
                Sensor_Signals[i].Sensor1 = false;
                Sensor_Signals[i].Sensor2 = false;
                Sensor_Signals[i].Exit = false;

            }
        }

        public void Unpack(UInt64 Value, Int32 Reader_Count)
        {
            Int32 p;

            EmergencyExit = (((Value >> 63) & 0x01) == 1);
            Fire = (((Value >> 62) & 0x01) == 1);
            Alarm = (((Value >> 61) & 0x01) == 1);
            TamperSwitch = (((Value >> 60) & 0x01) == 1);
            ExtraSensor1 = (((Value >> 59) & 0x01) == 1);
            ExtraSensor2 = (((Value >> 58) & 0x01) == 1);

            p = 57; // 6 bitlik lokal sensör bilgisi en sonda bulunduğundan bu alanı atlıyoruz.

            for (int i = 0; i < Reader_Count; i++)
            {
                Sensor_Signals[i].Sensor1 = (((Value >> (p - 0)) & 0x01) == 1);
                Sensor_Signals[i].Sensor2 = (((Value >> (p - 1)) & 0x01) == 1);
                Sensor_Signals[i].Exit = (((Value >> (p - 2)) & 0x01) == 1);
                p -= 3; // Sensor verisi`nden alınan üç biti düş.
            }
        }

        public bool EmergencyExit;
        public bool Fire;
        public bool Alarm;
        public bool TamperSwitch;
        public bool ExtraSensor1;
        public bool ExtraSensor2;
        private List<SensorInfo> Sensor_Signals;
    }

    /* Yazı yönü. */
    public enum TextAlignment
    {
        Left = 0, // Sola yanaşık
        Right = 1, // Sağa yanaşık
        Center = 2 // Ortalı
    };

    /* Text karakter kodlaması. */
    public enum TextEncoding
    {
        Default = 0,
        UTF8 = 1
    };

    /* Ses sinyal kodları. */
    public enum SoundSignalType
    {
        None = 0,  // Sinyal kullanılmıyor.
        CardOk = 1,  // Kart onaylandı sinyali.
        CardError = 2,  // Kart onaylanmadı sinyali.
        DoorForciblyOpened = 3,  // Kapı zorla açıldı sinyali.
        DoorOpenRemained = 4,  // Kapı açık kaldı sinyali.
        DoubleOk = 5,  // Çift onay sinyali.
        Error = 6,  // Hata sinyali.
        CreditDone = 7   // Kontör bitti sinyali.
    };

    public enum IconType
    {
        None = 0,  // kullanılmıyor.
        Ok = 1,  // Onaylandı
        Error = 2  // Onaylanmadı.
    };

    /* Web Access modunda Session_Id oluşturulurken izlenecek yolu bildirir. Random ise rastgele, DeviceId ise cihazın id`sinden Session_Id üretilir. */
    public enum WebSessionIdMode
    {
        DeviceId = 0,
        Random = 1
    };

    /* Cihazdan gelen mesaj türleri. */
    public enum HttpMessageType
    {
        None = 0,       // Bilinmiyor.
        Read_Card = 1,  // Kart okutuldu.
        I_Am_Here = 2,  // Buradayım mesajı.
        Log_Record = 3, // Log kaydı.
        Completed = 4   // Son yapılan kayıt işleminin başarıyla bittiğini bildirir. (Yeni bir kişi eklemek gibi)
    }

    // Tamamlanan işlemin türü.
    public enum HttpCompletedType
    {
        None = 0,
        User_Inserted = 1,              // Kullanıcı eklendi.
        User_Updated = 2,               // Var olan kullanıcı güncellendi.
        User_Forbidden = 3,             // Kullanıcı yasaklandı.
        User_Unforbidden = 4,           // Kullanıcının yasağı kaldırıldı.
        User_Write_Data = 5,            // Kullanıcı kartına veri yazıldı.
        User_Read_Data = 6,             // Kullanıcı kartından veri okundu.
        User_Write_Data_Error = 7,      // Kullanıcı kartına veri yazma hatası.
        User_Read_Data_Error = 8,       // Kullanıcı kartından veri okuma hatası.
        User_Capacity_Reached = 9       // Cihaz kullanıcı kapasitesi doldu.
    }

    /* Cihazdan gelen parametreler. */
    public class HttpParameters : NameValueCollection
    {
        public void Assign(NameValueCollection? Http_Params)
        {
            if (Http_Params != null)
            {
                for (int i = 0; i < Http_Params.Count; i++)
                {
                    string[]? S = Http_Params.GetValues(i);
                    if (S != null)
                        Add(Http_Params.GetKey(i), S[0]);
                }
            }
        }

        public string Value(int Index)
        {
            string[]? S = GetValues(Index);
            if (S != null)
                return S[0];
            else
                return "";
        }

        public string Value(string Param_Name)
        {
            string[]? S = GetValues(Param_Name);
            if (S != null)
                return S[0];
            else
                return "";
        }

        public int IndexOfName(string Param_Name)
        {
            string? S;

            Param_Name = Param_Name.ToLower();

            for (int i = 0; i < Count; i++)
            {
                S = GetKey(i);
                if (S != null)
                    if (S.ToLower() == Param_Name)
                        return i;
            }

            return -1;
        }

        public bool Is_Device_Param(string Param_Name)
        {
            string[] No_Conversion = {"b", "Session_Id", "Message_Type", "Completed_Type", "Process_Id", "SoftVer", "Device_Id",
                                                       "Reader_Num", "Wiegand_Num", "Reader_Count", "Card_Id", "Password", "Registration_Number",
                                                       "Written_User_Count", "Written_User_Forbidden", "Written_User_Unforbidden",
                                                       "User_Count", "Log_Count", "Log_Event", "Log_Time",
                                                       "Data_Count", "Data", "Group_Access_Zones", "Sensors",
                                                       "Screen_Model", "Screen_Width", "Screen_Height" };

            Param_Name = Param_Name.ToLower();

            for (int i = 0; i < No_Conversion.Length; i++)
            {
                if (Param_Name == No_Conversion[i].ToLower())
                    return true;
            }

            return false;
        }
    }

    public class HttpParams
    {
        public class HttpParam
        {
            public string PN = "";
            public string PV = "";
        }

        public HttpParams()
        {
            Session_Id = 0;
            Message_Type = HttpMessageType.None;
            Completed_Type = HttpCompletedType.None;
            Process_Id = 0;
            SoftVer = 0;
            Multi_User = false;
            Device_Id = 0;
            Reader_Num = 0;
            Wiegand_Num = 0;
            Reader_Count = 0;
            Screen = new ScreenInfo();
            Card_Id = 0;
            Password = 0;
            Registration_Number = 0;
            Written_User_Count = 0;
            Written_User_Forbidden_Count = 0;
            Written_User_Unforbidden_Count = 0;
            User_Count = 0;
            Log_Count = 0;
            Log_Event = LogEvent.AccessSuccessful;
            Log_Time = DateTime.Now;
            Tag_Type = RFTagType.None;
            Data_Count = 0;
            Data = null;
            Access_Zones = new GroupAccessZones();
            Sensors = new SensorSignals();
            User_Params = new HttpParameters();
            List = new List<HttpParam>();
        }

    public string this[string pName]
        {
            get
            {
                pName = pName.Trim();

                for (int i = 0; i < List.Count; i++)
                    if (List[i].PN == pName)
                        return List[i].PV;

                // throw new IndexOutOfRangeException();
                return "0";
            }
        }

        public HttpParam Add(string PN, string PV)
        {
            List.Add(new HttpParams.HttpParam());
            List[List.Count() - 1].PN = PN.Trim();
            List[List.Count() - 1].PV = PV;
            return List[List.Count() - 1];
        }

        public UInt64 Session_Id;                       // Oturum id`si. Sunucu ile başlatılan her işlemde bir oturum id`si bulunur.
        public HttpMessageType Message_Type;            // Mesaj türü. Sunucuya gönderilen her paketin bir mesaj türü vardır.
        public HttpCompletedType Completed_Type;        // Completed komutunda kullanılır. Tamamlanan işlemin türünü bildirir.
        public UInt64 Process_Id;                       // Sunucu tarafından oluşturulan bir kod`dur. Completed mesajı ile yapılan işlemin durumu bildirilirken tekrar sunucuya gönderilir.
        public UInt64 SoftVer;                          // Cihazdaki yazılımın versiyonu.
        public bool Multi_User;                         // Bu alan true ise cihaza toplu şekilde kullanıcı gönderilebilir.
        public UInt32 Device_Id;                        // Cihaz id`si. Sunucunun hangi cihaz ile çalıştığını anlaması için cihaz id gönderilir.
        public Int32 Reader_Num;                        // İşlem yapılan okuyucu nosu.
        public Int32 Wiegand_Num;                       // İşlem yapılan okuyucunun, işlem yapılan wiegand nosu.
        public Int32 Reader_Count;                      // Cihazın okuyucu portu sayısı.
        public ScreenInfo Screen;                       // Cihazın kullandığı ekran modeli.
        public UInt64 Card_Id;                          // Okutulan kartın bilgisi.
        public Int64 Password;                          // Kullanıcının girmiş olduğu şifre.
        public Int64 Registration_Number;               // İşlem yapan kullanıcının kayıt/sicil nosu.
        public UInt64 Written_User_Count;               // JSON->"User" ile cihaza yazılan kullanıcı sayısı.
        public UInt64 Written_User_Forbidden_Count;     // JSON->"User_Forbidden" ile cihaza yazılan kullanıcı sayısı.
        public UInt64 Written_User_Unforbidden_Count;   // JSON->"User_Unforbidden" ile cihaza yazılan kullanıcı sayısı.
        public UInt64 User_Count;                       // Cihazdaki kullanıcı sayısı.
        public UInt64 Log_Count;                        // Cihazdaki log sayısı.
        public LogEvent Log_Event;                      // Log türü.
        public DateTime Log_Time;                       // İşlem zamanı.
        public RFTagType Tag_Type;                      // Okutulan kartın türü. DESFire veya Mifare klasik..vb.
        public Int32 Data_Count;                        // Data parametresi ile gelen verinin uzunluğu.
        public byte[]? Data;                            // Gelen veri.
        public GroupAccessZones Access_Zones;           // Grup erişim bölgeleri.
        public SensorSignals Sensors;                   // Sensörlerin şu an ki sinyal verileri.
        public HttpParameters User_Params;              // URL içinde kullanıcı tarafından tanımlanmış özel parametreler.
        public List<HttpParam> List;
    }

    public enum RFTagType
    {
        None = 0,
        TagUltralight = 1,
        Tag1K = 2,
        Tag4K = 3,
        TagDESFire = 4,
        TagProx = 5,
        TagEM = 6,
        TagMifarePlus = 7,
        TagSmartMX = 8,
        TagSmartMX_7UID = 9,
        TagMifareMini = 10,
        UHFCard = 11,
        Tag34bits = 12,
        Tag35bits = 13,
        Tag37bits = 14,
        Tag40bits = 15,
        Tag42bits = 16,
        Tag48bits = 17,
        Tag58bits = 18,
        Tag1K_7UID = 19,
        Tag4K_7UID = 20,
        TagMifarePlus_7UID = 21
    };

    /* Geçiş sırasında oluşan olaylar. */
    public enum LogEvent
    {
        AccessSuccessful = 0,    // Geçiş başarılı.
        UserInside = 1,    // Kullanıcı içeri girdi.
        UserOutside = 2,    // Kullanıcı dışarı çıktı.
        UnauthorizedAccess = 3,    // Yetkisiz kullanıcı erişimi.
        UnauthorizedEntry = 4,    // Yetkisiz kullanıcı girişi.
        UnauthorizedExit = 5,    // Yetkisiz kullanıcı çıkışı.
        OutOfTimeZone = 6,    // Zaman kuşağının dışında geçiş.
        TimeLimited = 7,    // Zaman kısıtlaması.
        CreditDone = 8,    // Kontör bitti.
        PasswordError = 9,    // Şifre hatalı girilmiş.
        AntiPassbackEntry = 10,   // Anti-Passback kullanılırken uygun bir şekil de giriş yapmış.
        AntiPassbackExit = 11,   // Anti-Passback kullanılırken uygun bir şekil de çıkış yapmış.
        TryingExitWithoutEntry = 12,   // Anti-Passback kullanıldığı halde girmeden çıkış yapılmaya çalışılmış. (Önceden izinsiz girmiş)
        TryingEntryWithoutExit = 13,   // Anti-Passback kullanıldığı halde çıkmadan giriş yapılmaya çalışılmış. (Giren birinin kartı ile tekrar girmeye çalışmış)
        ForbiddenDoor = 14,   // Kapıdan geçiş yasak.
        DoorOpenRemained = 15,   // Kapı açık kalmış. Geçiş yapıldıktan sonra kapı kapatılmamış.
        UnauthorizedAccessToSubgroup = 16,   // Alt gruba yetkisiz erişim. Parent okuyucudan giriş yapmamış.
        DoorForciblyOpened = 17,   // Kapı zorla açılmış.
        CapacityIsFull = 18,   // Erişim bölgesine giriş limiti dolmuş.
        DoorSensorActive = 19,   // Kapı sensörü aktif. (Kapı açıldı)
        DoorSensorPassive = 20,   // Kapı sensörü pasif oldu. (Kapı kapandı)
        DoorExitButton = 21,   // Kapının exit butonuna basılarak geçiş.
        EmergencyExitButton = 22,   // Acil çıkış butonuna basılmış.
        FireSensor = 23,   // Yangın sensöründen sinyal gelmiş.
        AlarmSensor = 24,   // Alarm sensöründen sinyal gelmiş.
        TamperSensor = 25,   // Tamper sensöründen sinyal gelmiş.
        ExtraSensor1 = 26,   // Yangın, Gaz, Hareket..vb sensörlerden gelen sinyaller.
        ExtraSensor2 = 27,   // Yangın, Gaz, Hareket..vb sensörlerden gelen sinyaller.
        GDMNoTransition = 28,   // Kapıya başarı ile erişmiş ancak turnike veya kapıdan geçmemiş.
        Disconnect = 29,   // Cihaz ile bağlantı koptu.
        Connect = 30,   // Cihaz ile bağlantı tekrar sağlandı.
        SystemStart = 31,   // Cihaz açıldığı zaman bu olay log olarak kaydedilir.
        PGMLimited = 32,   // PGM kısıtlamasına takıldı. PGM Grubundan başka kişiler içeri girdiğinden bu kullanıcı şimdilik giremez.
        ForbiddenDay = 33,   // Kapıdan geçiş bugün yasak.
        FinishedAccessToTimePeriod = 34,   // Zaman dilimindeki geçiş hakkı bitmiş.
        FinishedToDailyAccess = 35,   // Günlük geçiş hakkı bitmiş.
        LifetimeExpired = 36,   // Okuyucu kullanım süresi bitmiş.
        FinishedAccessToLifetime = 37,   // Okuyucuyu kullanım süresi içindeki geçiş hakkı bitmiş.
        CounterSensor1In = 38,   // Grup erişim modunda, okuyucunun 1.sensöründen giriş sinyali alındı.
        CounterSensor1Out = 39,   // Grup erişim modunda, okuyucunun 1.sensöründen çıkış sinyali alındı.
        CounterSensor2In = 40,   // Grup erişim modunda, okuyucunun 2.sensöründen giriş sinyali alındı.
        CounterSensor2Out = 41,   // Grup erişim modunda, okuyucunun 2.sensöründen çıkış sinyali alındı.
        CounterSensorExitIn = 42,   // Grup erişim modunda, okuyucunun exit sensöründen giriş sinyali alındı.
        CounterSensorExitOut = 43,   // Grup erişim modunda, okuyucunun exit sensöründen çıkış sinyali alındı.
        ClosedTheForciblyOpenedDoor = 44,   // Zorla açılan kapı kapatıldı.
        ClosedTheOpenRemainedDoor = 45,   // Açık kalan kapı kapatıldı.
        DoorAlarmSensorActive = 46,   // Kapı alarm sensörü aktif oldu.
        DoorAlarmSensorPassive = 47,    // Kapı alarm sensörü pasif oldu.
        RTCError = 48,    // Cihaz saatinde sorun var.
        PassedWithCardAndPassword = 49, // Kart ve şifre ile geçti.
        PassedWithPassword = 50  // Sadece şifre ile geçti.
    }

    /* Cihaz ekran modelleri. */
    public enum ScreenModel
    {
        None = 0,
        TextLCD = 1,
        GLCD = 2,
        TFT = 3
    };

    public class ScreenInfo
    {
        public ScreenInfo()
        {
            Model = ScreenModel.None;
            Width = 0;
            Height = 0;
        }

        public ScreenModel Model;
        public UInt32 Width;
        public UInt32 Height;
    }

    /* Bir erişim bölgesine ait bilgiler. */
    public class GroupAccessZone
    {
        public GroupAccessZone()
        {
            Capacity = 0; // Kapasite. (24 bits)
            AccessCount = 0; // Yapılan geçiş sayısı. (24 bits)
            Group_Id = 0; // Grup id`si. (16 bits) (Okuyuculara verilen grup id`si veya ağdaki başka bir cihazdaki okuyucunun grup id`si)
        }

        public UInt32 Group_Id; // Grup id`si. (16 bits) (Okuyuculara verilen grup id`si veya ağdaki başka bir cihazdaki okuyucunun grup id`si)
        public UInt32 Capacity; // Kapasite. (24 bits)
        public UInt32 AccessCount; // Yapılan geçiş sayısı. (24 bits)
    }

    /* Grup erişim bölgeleri. */
    public class GroupAccessZones : List<GroupAccessZone>
    {
        public GroupAccessZones()
        {
            Enable = false;

            for (int i = 0; i < GROUP_ACCESS_ZONES_COUNT; i++)
                Add(new GroupAccessZone());
        }

        public void Decode(string? S)
        {
            string[] Number_List;
            Int16 Number_Index = 0;

            if (String.IsNullOrEmpty(S) == false)
            {
                Number_List = S.Split(',');
                Enable = (Get_Number(Number_List, ref Number_Index) != 0);

                for (int i = 0; i < Count; i++)
                {
                    this[i].Group_Id = Get_Number(Number_List, ref Number_Index);
                    this[i].Capacity = Get_Number(Number_List, ref Number_Index);
                    this[i].AccessCount = Get_Number(Number_List, ref Number_Index);
                }
            }
        }

        private UInt32 Get_Number(string[] Number_List, ref Int16 Number_Index)
        {
            if (Number_Index < Number_List.Count())
                return Convert.ToUInt32(Number_List[Number_Index++]);
            else
                return 0;
        }

        public bool Enable; // Grup erişim bölgeleri modu. false= Devredışı, true= Etkin.
        private const UInt32 GROUP_ACCESS_ZONES_COUNT = 16; // Liste uzunluğu. Cihazın desteklediği bölge sayısı.

    }
}


--- CS Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\WebAccess_Lib\WebAccess.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\WebAccess_Lib\WebAccessContext.cs ---

/*
 * Author: İstanbul Yazılım Elektronik Sanayi
 */

using System;
using System.Collections.Specialized;
using System.Text;
using Microsoft.AspNetCore.Http;

namespace ASPNetCore_WebAccess
{
    public class ASPCoreContext
    {
        public HttpContext Context;

        public ASPCoreContext(HttpContext Context)
        {
            this.Context = Context;
        }

        public IQueryCollection? Query
        {
            get
            {
                try
                {
                    return Context.Request.Query;
                }
                catch
                {
                    return null;
                }
            }
        }

        public IFormCollection? Form
        {
            get
            {
                try
                {
                    return Context.Request.Form;
                }
                catch
                {
                    return null;
                }
            }
        }

        public string Param(string Name)
        {
            IQueryCollection? Q = Query;
            if (Q != null && Q.ContainsKey(Name))
            {
                return Q[Name].ToString();
            }
            else
            {
                IFormCollection? F = Form;
                if (F != null && F.ContainsKey(Name))
                {
                    return F[Name].ToString();
                }
            }

            return String.Empty;
        }

        public NameValueCollection? Params()
        {
            NameValueCollection RetVal = new NameValueCollection();

            if (Query != null)
            {
                string PrmName;
                List<string> PrmList = Query.Keys.ToList();

                for (int i = 0; i < PrmList.Count; i++)
                {
                    PrmName = PrmList[i];
                    if (PrmName != null)
                        RetVal.Add(PrmName, Param(PrmName));
                }
            }

            /*
            if (Form != null)
            {
                string PrmName;
                List<string> PrmList = Form.Keys.ToList();

                for (int i = 0; i < PrmList.Count; i++)
                {
                    PrmName = PrmList[i];
                    if (PrmName != null)
                        RetVal.Add(PrmName, Param(PrmName));
                }
            }
            */

            return RetVal;
        }

        public bool ParamExists(string Name)
        {
            IQueryCollection? Q = Query;
            if (Q != null && Q.ContainsKey(Name))
            {
                return true;
            }
            else
            {
                IFormCollection? F = Form;
                if (F != null && F.ContainsKey(Name))
                {
                    return true;
                }
            }

            return false;
        }

        public string HttpMethod
        {
            get { return Context.Request.Method; }
        }

        public string Response_ContentType
        {
            get { return Context.Response.ContentType; }
            set { Context.Response.ContentType = value; }

        }

        public void Response(string Value)
        {
            Context.Response.Clear();
            // Context.Response.ContentType = "text/file; charset=ISO-8859-9";

            /* Sistemde kullanılan kod sayfalarını listeler.

            string S = "";

            EncodingInfo[] e = Encoding.GetEncodings();

            for (int i = 0; i < e.Length; i++)
            {
                S += "CodePage: " + e[i].CodePage.ToString() + ",  DisplayName: " + e[i].DisplayName + "<br>";
            }

            byte[] Encodings_Bytes = System.Text.Encoding.Default.GetBytes(S);
            Context.Response.Body.Write(Encodings_Bytes);
            */

            if (Value.Length > 0)
            {
                // byte[] Value_Bytes = System.Text.Encoding.GetEncoding(1254).GetBytes(Value);
                // byte[] Value_Bytes = System.Text.Encoding.GetEncoding(857).GetBytes(Value);

                // Context.Response.Body.Write(System.Text.Encoding.Default.GetBytes(Value));

                Context.Response.Body.Write(System.Text.Encoding.UTF8.GetBytes(Value));
            }
        }
    }
}

--- CS Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\WebAccess_Lib\WebAccessContext.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\WebAccess_Lib\WebAccessRun.cs ---

/*
 * Author: İstanbul Yazılım Elektronik Sanayi
 */

using System.ComponentModel.Design;
using System.Text;
using static ASPNetCore_WebAccess.UserLib;

namespace ASPNetCore_WebAccess
{
    public class WebAccessRun
    {
        public WebAccessRun(HttpContext Context)
        {
            /* Password     : Şifreli işlemler`de kullanılır. Cihaza verilen password değeri ile aynı olmalıdır.
             * Crypto_Enable: Cihaza gönderilecek olan JSON komutlarının kriptolu şekilde gönderilmesini sağlar.
             *                Değeri false geçilirse cihaza gönderilen veriler görülebilir, okunabilir şekildedir.
             *
             * DİKKAT!!
             * ------------
             *                Bu uygulamada varsayılan olarak kriptosuz kullanım esas alınmıştır.
             *                Güvenli bir iletişim için cihazınıza şifre verip ardından kriptolu iletişimi etkinleştirin.
             *                Cihazınıza verdiğiniz şifre değerini burada kullanın ve Crypto_Enable paramteresini true geçin.
             *                Örnek Kullanım;
             *                  WebAccess = new WebAccess("ABC_1234", true, Context);
            */
            WebAccess = new WebAccess("", false, Context);

            /* Cihaza Yanıt İşlemleri */
            if (WebAccess.Is_Session_Valid(WebAccess.Params.Session_Id)) // Session id geçerli ise
            {
                // Cihazın çalışma şekliyle ilgili ayarları yap.
                Set_Device();

                // DESFire ve mifare kartlar ile yapılan okuma/yazma işlemlerinde kullanılan veri türü.
                // WebAccess.FileDataType File_Data_Type = WebAccess.FileDataType.Base64;

                /* Gelen mesajın türüne göre yanıt işlemi gerçekleştir. */
                switch (WebAccess.Params.Message_Type)
                {
                    case HttpMessageType.Read_Card: // Kart okutuldu ise
                        {
                            /* Kullanıcı kart okutunca bu mesaj gelir.
                             * Röle çekme, ekrana mesaj yazdırma ve ses sinyalleri üreterek online geçiş kontrol işlemlerinizi burada yapabilirsiniz. */

                            if (WebAccess.IsSuccessEvent(WebAccess.Params.Log_Event) == true) // Başarılı bir geçiş ise
                                if (WebAccess.Params.Reader_Num > 0 && WebAccess.Params.Reader_Num <= WebAccess.Params.Reader_Count && ((WebAccess.Params.Card_Id > 0 && WebAccess.Params.Card_Id < WebAccess.Empty_Card) || WebAccess.Params.Data_Count > 0)) // Geçerli bir kart okutulmuş ise
                                    if (Online_Access_Control()) // Geçiş yetkisi varsa.
                                    {
                                        
                                        Console.WriteLine("");
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        Console.WriteLine("Read_Card ->     Reader Count: " + WebAccess.Params.Reader_Count + ",    Time : " + DateTime.Now.ToString());
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        Console.WriteLine("     - Device Id  : " + WebAccess.Params.Device_Id);
                                        Console.WriteLine("     - Reader_Num : " + WebAccess.Params.Reader_Num);
                                        Console.WriteLine("     - Card_Id    : " + WebAccess.Params.Card_Id);
                                        Console.WriteLine("     - QR İçin");
                                        Console.WriteLine("     - Data Count : " + WebAccess.Params.Data_Count);
                                        Console.WriteLine("     - Data       : " + (WebAccess.Params.Data_Count > 0 && WebAccess.Params.Data != null ? Encoding.UTF8.GetString(WebAccess.Params.Data) : ""));
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");


                                        switch (WebAccess.Params.Screen.Model)
                                        {
                                            case ScreenModel.TFT:  // Ekran modeli TFT ise
                                                {
                                                    WebAccess.Send_Clear_Screen(0xFF00); // Ekranı yeşil renk ile temizle.
                                                    WebAccess.Send_Draw_Icon(IconType.Ok, 70, 40, 5, 0xFF00); // TFT Ekrana ikon çiz.
                                                    WebAccess.Send_Draw_Text(0, 170, "Hoş Geldiniz", 5, 28, 0x7F1F7F, 0xFF00, TextAlignment.Center, TextEncoding.UTF8); // TFT Ekrana mesaj yaz.
                                                    WebAccess.Send_Sound(WebAccess.Params.Reader_Num, SoundSignalType.CardOk); // İşlem yapılan okuyucuya ses sinyali vermesini söyle.
                                                    WebAccess.Send_Trigger_Relay(WebAccess.Params.Reader_Num, 1000); // İşlem yapılan okuyucunun rölesini 1000ms(1 saniye) tetikle.
                                                    break;
                                                }

                                            default: // Ekransız model ise
                                                {
                                                    WebAccess.Send_Sound(WebAccess.Params.Reader_Num, SoundSignalType.CardOk); // İşlem yapılan okuyucuya ses sinyali vermesini söyle.
                                                    WebAccess.Send_Trigger_Relay(WebAccess.Params.Reader_Num, 1000); // İşlem yapılan okuyucunun rölesini 1000ms(1 saniye) tetikle.
                                                    break;
                                                }
                                        }
                                    }
                                    else // Kişinin geçiş yetkisi yok.
                                    {
                                        switch (WebAccess.Params.Screen.Model)
                                        {
                                            case ScreenModel.TFT:  // Ekran modeli TFT ise
                                                {
                                                    WebAccess.Send_Clear_Screen(0xFF0000); // Ekranı kırmızı renk ile temizle.
                                                    WebAccess.Send_Draw_Icon(IconType.Error, 70, 40, 5, 0xFF0000); // TFT Ekrana hata ikonu çiz.
                                                    WebAccess.Send_Draw_Text(0, 170, "Yetkisiz Kart", 5, 28, 0xFFFFFF, 0xFF0000, TextAlignment.Center, TextEncoding.UTF8); // TFT Ekrana mesaj yaz.
                                                    WebAccess.Send_Sound(WebAccess.Params.Reader_Num, SoundSignalType.CardError); // İşlem yapılan okuyucuya ses sinyali vermesini söyle.
                                                    break;
                                                }

                                            default: // Ekransız model ise
                                                {
                                                    WebAccess.Send_Sound(WebAccess.Params.Reader_Num, SoundSignalType.CardError); // İşlem yapılan okuyucuya ses sinyali vermesini söyle.
                                                    break;
                                                }
                                        }
                                    }

                            break;
                        }

                    case HttpMessageType.Completed: // Son yapılan kayıt işlemi başarıyla tamamlandı ise (Yeni bir kişi eklemek gibi)
                        {
                            /* Son yapılan kayıt işleminin başarıyla tamamlandığını bildirir. (Yeni bir kişi eklemek gibi)
                             * Eğer, cihaza bir kullanıcı eklediyseniz, eklenen kullanıcının başarıyla cihaza tanıtıldığından emin olmuş olursunuz.
                             * Bu durumda veritabanınızda değişiklik yaparak kullanıcının her seferinde tekrar tekrar cihaza gönderilmesini engelleyebilirsiniz.
                             *
                             * Ardından bu cihaza gönderilecek kullanıcı varsa sıradakini hemen burada gönderebilirsiniz.
                             */

                            // Tamamlanan işlemin türü.
                            switch (WebAccess.Params.Completed_Type)
                            {
                                case HttpCompletedType.User_Inserted: // Kullanıcı eklendi.
                                case HttpCompletedType.User_Updated: // Var olan kullanıcı güncellendi.
                                    {
                                        /* Cihaza gönderilecek yeni kullanıcı varsa burada gönderebilirsiniz. */

                                        /*
                                        Console.WriteLine("");
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        Console.WriteLine("Completed ->   User Count : " + WebAccess.Params.User_Count + ",  Reader Count: " + WebAccess.Params.Reader_Count + ",  Log Count: " + WebAccess.Params.Log_Count + ",  Time : " + DateTime.Now.ToString());
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        Console.WriteLine("     - Device Id                     : " + WebAccess.Params.Device_Id);
                                        Console.WriteLine("     - Process Id                    : " + WebAccess.Params.Process_Id);
                                        Console.WriteLine("     - Card Id                       : " + WebAccess.Params.Card_Id);
                                        Console.WriteLine("     - Multi User                    : " + WebAccess.Params.Multi_User);
                                        Console.WriteLine("     - Written User Count            : " + WebAccess.Params.Written_User_Count);
                                        Console.WriteLine("     - Written User Forbidden Count  : " + WebAccess.Params.Written_User_Forbidden_Count);
                                        Console.WriteLine("     - Written User Unforbidden Count: " + WebAccess.Params.Written_User_Unforbidden_Count);
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");

                                        // Gönderilmeyi bekleyen kullanıcıları cihaza gönder. Buradaki işlemler cihaza kullanıcı gönderilmesine örnek olması içindir.
                                        Send_Users();
                                        // */

                                        break;
                                    }

                                case HttpCompletedType.User_Capacity_Reached: // Cihaz kullanıcı kapasitesi dolmuş.
                                    {
                                        /* Cihazın kullanıcı kapasitesi dolduğundan yollanan kişi kaydedilemedi.. */

                                        /*
                                        Console.WriteLine("");
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        Console.WriteLine("User_Capacity_Reached ->   User Count : " + WebAccess.Params.User_Count + ",  Reader Count: " + WebAccess.Params.Reader_Count + ",  Log Count: " + WebAccess.Params.Log_Count + ",  Time : " + DateTime.Now.ToString());
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        Console.WriteLine("     - Device Id                     : " + WebAccess.Params.Device_Id);
                                        Console.WriteLine("     - Process Id                    : " + WebAccess.Params.Process_Id);
                                        Console.WriteLine("     - Card Id                       : " + WebAccess.Params.Card_Id);
                                        Console.WriteLine("     - Multi User                    : " + WebAccess.Params.Multi_User);
                                        Console.WriteLine("     - Written User Count            : " + WebAccess.Params.Written_User_Count);
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        // */

                                        break;
                                    }

                                case HttpCompletedType.User_Forbidden: // Kullanıcı yasaklandı.
                                    {
                                        /* Geçişi yasaklanacak olan başka kullanıcı varsa burada yasaklayabilirsiniz. */
                                        // WebAccess.Send_User_Forbidden(35478); // Kart id`si 35478 olan kullanıcının geçişini yasakla.
                                        break;
                                    }

                                case HttpCompletedType.User_Unforbidden: // Kullanıcının yasağı kaldırıldı.
                                    {
                                        /* Geçiş yasağı kaldırılacak olan başka kullanıcı varsa burada kaldırabilirsiniz. */
                                        // WebAccess.Send_User_Unforbidden(35478); // Kart id`si 35478 olan kullanıcının geçiş yasağını kaldır.
                                        break;
                                    }

                                case HttpCompletedType.User_Write_Data:  // Kullanıcı kartına veri yazıldı.
                                    {
                                        /* DESFire veya mifare karta veri yazıldı. */

                                        /*
                                        Console.WriteLine("");
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        Console.WriteLine("User_Write_Data ->     Device Id : " + WebAccess.Params.Device_Id);
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        // */

                                        /*
                                        if (WebAccess.Params.Card_Id > 0 && WebAccess.Params.Card_Id < WebAccess.Empty_Card) // Cihaz kartı görüyor ise
                                            if (Continue_User_Write_Data(WebAccess.Params.Process_Id)) // Yazmaya devam edilecek ise
                                            {
                                                // Bu satır örnektir. Process_Id ile bildirilen son işleme ait bilgileri veritabanından yükleyip sonraki yazılacak bilgileri tekrar karta yazmak için kullanabilirsiniz.
                                                Load_User_From_DB(WebAccess.Params.Process_Id);

                                                WebAccess.Send_Write_Card_Data(1234, 0, Sector_No, System.Text.Encoding.UTF8.GetBytes("< Log Time: " + DateTime.Now.ToString() + ">   "), File_Data_Type);
                                            }

                                        // Bu satır örnektir. Process_Id ile bildirilen son işlem başarıyla tamamlandığı için bu görevi listeden siliyoruz.
                                        Delete_Process(WebAccess.Params.Process_Id);
                                        */

                                        break;
                                    }

                                case HttpCompletedType.User_Read_Data:  // Kullanıcı kartından veri okundu.
                                    {
                                        /* DESFire veya mifare karttan veri okundu. */

                                        /*
                                        string S = "";
                                        if (WebAccess.Params.Data != null)
                                            S = Encoding.UTF8.GetString(WebAccess.Params.Data);

                                        Console.WriteLine("");
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        Console.WriteLine("User_Read_Data");
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        Console.WriteLine("     - Device Id  : " + WebAccess.Params.Device_Id);
                                        Console.WriteLine("     - Data Count : " + WebAccess.Params.Data_Count);
                                        Console.WriteLine("     - Data       : " + S);

                                        switch (File_Data_Type)
                                        {
                                            case WebAccess.FileDataType.Base64:
                                                Console.WriteLine("     - Data       : " + (WebAccess.Params.Data_Count > 0 && WebAccess.Params.Data != null ? Encoding.UTF8.GetString(Convert.FromBase64String(S)) : ""));
                                                break;

                                            case WebAccess.FileDataType.Hex:
                                                Console.WriteLine("     - Data       : " + (WebAccess.Params.Data_Count > 0 && WebAccess.Params.Data != null ? Encoding.UTF8.GetString(Convert.FromHexString(S)) : ""));
                                                break;
                                        }
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        // */

                                        /*
                                        if (WebAccess.Params.Card_Id > 0 && WebAccess.Params.Card_Id < WebAccess.Empty_Card) // Cihaz kartı görüyor ise
                                            if (Continue_User_Read_Data(WebAccess.Params.Process_Id)) // Okumaya devam edilecek ise
                                            {
                                                // Bu satır örnektir. Process_Id ile bildirilen son işleme ait bilgileri veritabanından yükleyip sonraki okunacak alanları tekrar karttan okumak için kullanabilirsiniz.
                                                Load_User_From_DB(WebAccess.Params.Process_Id);

                                                WebAccess.Send_Read_Card_Data(5678, 0, 256, Sector_No, File_Data_Type);
                                            }

                                        // Bu satır örnektir. Process_Id ile bildirilen son işlem başarıyla tamamlandığı için bu görevi listeden siliyoruz.
                                        Delete_Process(WebAccess.Params.Process_Id);
                                        */

                                        break;
                                    }

                                case HttpCompletedType.User_Write_Data_Error:  // Kullanıcı kartına veri yazma hatası.
                                    {
                                        /* DESFire veya mifare karta veri yazılırken hata oluştu. */

                                        /*
                                        Console.WriteLine("");
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        Console.WriteLine("User_Write_Data_Error ->     Device Id : " + WebAccess.Params.Device_Id);
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        // */

                                        /*
                                        if (WebAccess.Params.Card_Id > 0 && WebAccess.Params.Card_Id < WebAccess.Empty_Card) // Cihaz kartı görüyor ise
                                            if (Continue_User_Write_Data(WebAccess.Params.Process_Id)) // Yazmaya devam edilecek ise
                                            {
                                                // Bu satır örnektir. Process_Id ile bildirilen son işleme ait bilgileri veritabanından yükleyip sonraki yazılacak bilgileri tekrar karta yazmak için kullanabilirsiniz.
                                                Load_User_From_DB(WebAccess.Params.Process_Id);

                                                WebAccess.Send_Write_Card_Data(1234, 0, Sector_No, System.Text.Encoding.UTF8.GetBytes("< Log Time: " + DateTime.Now.ToString() + ">   "), File_Data_Type);
                                            }

                                        // Bu satır örnektir. Process_Id ile bildirilen son işlem başarıyla tamamlandığı için bu görevi listeden siliyoruz.
                                        Delete_Process(WebAccess.Params.Process_Id);
                                        */

                                        break;
                                    }

                                case HttpCompletedType.User_Read_Data_Error:  // Kullanıcı kartından veri okuma hatası.
                                    {
                                        /* DESFire veya mifare klasik karttan veri okunurken hata oluştu. */

                                        /*
                                        Console.WriteLine("");
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        Console.WriteLine("User_Read_Data_Error ->     Device Id : " + WebAccess.Params.Device_Id);
                                        Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                                        // */

                                        /*
                                        if (WebAccess.Params.Card_Id > 0 && WebAccess.Params.Card_Id < WebAccess.Empty_Card) // Cihaz kartı görüyor ise
                                            if (Continue_User_Read_Data(WebAccess.Params.Process_Id)) // Okumaya devam edilecek ise
                                            {
                                                // Bu satır örnektir. Process_Id ile bildirilen son işleme ait bilgileri veritabanından yükleyip sonraki okunacak alanları tekrar karttan okumak için kullanabilirsiniz.
                                                Load_User_From_DB(WebAccess.Params.Process_Id);

                                                WebAccess.Send_Read_Card_Data(5678, 0, 256, Sector_No, File_Data_Type);
                                            }

                                        // Bu satır örnektir. Process_Id ile bildirilen son işlem başarıyla tamamlandığı için bu görevi listeden siliyoruz.
                                        Delete_Process(WebAccess.Params.Process_Id);
                                        */

                                        break;
                                    }
                            }

                            break;
                        }

                    case HttpMessageType.I_Am_Here: // Buradayım mesajı ise
                        {
                            /* Cihaz hazır da beklediğini bildiriyor.
                             * Buradaki değerleri döndürmek zorunda değilsiniz. Örnek olarak verilmiştir. */

                            /*
                            WebAccess.Send_Erase_All_Logs();                    // Tüm log`ları sil.
                            WebAccess.Send_Log_Rollback(2000);                  // 2000 adet log kaydını geri al.
                            WebAccess.Send_Log_Rollforward(50);                 // İlk 50 adet log kaydını sil.

                            WebAccess.Send_Local_Sensor_Sensibility(100);       // Yangın, Acil Çıkış, Alarm ve Tamper Switch sensörlerinin sinyal hassasiyetini 100ms olarak ayarla.
                            WebAccess.Send_Door_Sensor_Sensibility(25);         // Reader portlarındaki S1, S2, ve Exit sensörlerinin sinyal hassasiyetini 25ms olarak ayarla.

                            WebAccess.Send_Erase_All_Users();                   // Tüm kullanıcıları sil.
                            WebAccess.Send_User_Forbidden(35478);               // Kart id`si 35478 olan kullanıcının geçişini tüm okuyucularda engelle.
                            WebAccess.Send_User_Unforbidden(35478);             // Kart id`si 35478 olan kullanıcının geçiş yasağını kaldır.
                            //*/

                            //*
                            Console.WriteLine("");
                            Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                            Console.WriteLine("I_Am_Here ->   User Count : " + WebAccess.Params.User_Count + ",  Reader Count: " + WebAccess.Params.Reader_Count + ",  Log Count: " + WebAccess.Params.Log_Count + ",  Time : " + DateTime.Now.ToString());
                            Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                            Console.WriteLine("     - Device Id  : " + WebAccess.Params.Device_Id);
                            Console.WriteLine("     - Multi User : " + WebAccess.Params.Multi_User);
                            Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");

                            // Gönderilmeyi bekleyen kullanıcıları cihaza gönder. Buradaki işlemler cihaza kullanıcı gönderilmesine örnek olması içindir.
                            // Send_Users();

                            Console.WriteLine("End-> I_Am_Here ->   Device_Id : " + WebAccess.Params.Device_Id + ",  Time : " + DateTime.Now.ToString());
                            Console.WriteLine("------------------------------------------------------------------------------------------");
                            // */

                            break;
                        }

                    case HttpMessageType.Log_Record: // Log mesajı ise
                        {
                            /* Cihaz tarafından bir log(geçiş kaydı) gönderilmiş. Log`u veritabanına kaydetme işlemleri burada yapılır. */

                            //*
                            Console.WriteLine("");
                            Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                            Console.WriteLine("Log_Record ->   User Count : " + WebAccess.Params.User_Count + ",  Reader Count: " + WebAccess.Params.Reader_Count + ",  Log Count: " + WebAccess.Params.Log_Count + ",  Time : " + DateTime.Now.ToString());
                            Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");
                            Console.WriteLine("     - Device Id  : " + WebAccess.Params.Device_Id);
                            Console.WriteLine("     - Multi User : " + WebAccess.Params.Multi_User);
                            Console.WriteLine("--------------------------------------------------------------------------------------------------------------------");

                            // Gönderilmeyi bekleyen kullanıcıları cihaza gönder. Buradaki işlemler cihaza kullanıcı gönderilmesine örnek olması içindir.
                            // Send_Users();

                            Console.WriteLine("End-> Log_Record ->   Device_Id : " + WebAccess.Params.Device_Id + ",  Time : " + DateTime.Now.ToString());
                            Console.WriteLine("------------------------------------------------------------------------------------------");
                            // */

                            break;
                        }
                }
            }
        }

        private void Set_Device()
        {
            /* Çalışma şeklini ve davranış biçimini cihaza bildiren işlemleri buradaki gibi yapabilirsiniz. Buradaki kodlar sadece örnek olması içindir. */

            WebAccess.Send_I_Am_Here_Duration(15);              // Buradayım süresini değiştir.
            WebAccess.Send_Device_Time(DateTime.Now);           // Cihaz zamanını ayarla.

            // WebAccess.Session_Id_Mode(WebSessionIdMode.Random); // Session Id oluşturulurken izlenecek yolu bildirir. Random ise rastgele, DeviceId ise cihazın id`sinden Session_Id üretilir.
            // WebAccess.Check_Session_Id(true);                   // Session_Id doğrulamasını etkinleştirmek için kullanılır. Değeri false olursa session id paket içinde aranır ancak doğrulaması yapılmaz.
        }
        
        private bool Online_Access_Control()
        {
            // Bu fonksiyonda WebAccess.Params.Card_Id veya WebAccess.Params.Data parametresi kullanılarak yetkilendirme yapılır. Kişinin yetkisi varsa true döner.

            if (WebAccess.Params.Data_Count > 0) // QR okutulmuş ise
            {
                // WebAccess.Params.Data  parametresinde ki veriyi kullanın. Data alanı harf, sayı ve özel karakterler içerebilir.
            }
            else
            {
                // Card_Id  parametresinde ki veriyi kullan. Bu alan max 16 haneli bir sayı içerir.
            }

            return true;
        }

        private void Send_Users()
        {
            /* Bu metod cihaza kullanıcı gönderir.
             * Buradaki işlemler cihaza kullanıcı göndermeye örnek olması içindir.
             * Siz, cihaza gönderilecek kullanıcıları kendi veritabanınızdan listeleyip göndermelisiniz.
             * Bu işlem için "WebAccess.Params.Device_Id" parametresini kullanarak cihazı kullanan personelleri tespit etmelisiniz.
             */


            // Cihaza benzersiz bir işlem id`si gönder.
            // Bu değer sizin tarafınızdan belirlenecek olan bir unique id`dir ve cihaz tarafından "WebAccess.Params.Process_Id" parametresi ile tekrar geri gönderilecektir.
            WebAccess.Send_Process_Id((ulong)DateTime.Now.Ticks);

            if (WebAccess.Params.Multi_User) // Bu cihaz toplu kullanıcı ekleme özelliğini destekliyorsa
            {
                // Cihaza 10 tane personel gönder.
                // Buradaki kod sadece örnek olması için yazılmıştır.
                // Card_Id değerinin benzersiz(unique) olması için DateTime.Now.Ticks kullanılmıştır.
                // Kullanıcı adı ve sicil no alanları ise burada kullanılmamıştır.
                for (UInt64 Card_Id = 1; Card_Id < 10 + 1; Card_Id++)
                    WebAccess.Send(New_User(Card_Id + (ulong)DateTime.Now.Ticks, "", 0, WebAccess.Params.Reader_Count));
            }
            else // Cihaz toplu kullanıcı göndermeyi desteklemiyor.
            {
                // Tek kişi ekle. ->  Card_Id: Benzersiz(unique) olması için DateTime.Now.Ticks kullanılmıştır.
                WebAccess.Send(New_User((ulong)DateTime.Now.Ticks, "", 0, WebAccess.Params.Reader_Count));
            }
        }

        private string New_User(UInt64 Card_Id, string User_Name = "", UInt64 Registration_Number = 0, Int32 Device_Reader_Count = UserLib.MAX_READER_CAPACITY)
        {
            // Card_Id ile bildirilen kullanıcıyı cihaza ekler veya update eder.

            UserLib.UserReader Reader;
            UserLib.User User = new UserLib.User();

            /*
            // Korunması istenen geçiş bilgileri için buradaki ilgili alanları true yapın.
            User.Protected.Anti_Passback_Status = true; // Anti_Passback durum bilgisini koru.
            User.Protected.Credit = true; // Kontörü koru.
            User.Protected.Daily_Access_Count = true; // Günlük geçiş sayısını koru.
            User.Protected.LifeTime_Access_Count = true; // Okuyucuyu kullanma süresi içindeki geçiş sayısını koru.
            User.Protected.Last_Access_Time = true; // Son erişim zamanını koru.
            */

            User.Card_Info = Card_Id;
            User.User_Name = User_Name;
            User.Registration_Number = (Int64)Registration_Number;

            for (int i = 0; i < Device_Reader_Count; i++)
                User.Readers[i].Status.Enabled = true;


            //--------------------------------------------------------------------------------------------------------------------------

            Reader = User.Readers[0]; // 1`nolu reader`a konumlan. Listede ki ilk kayıt 0`dan başladığı için 1`nolu reader 0. sıradadır.

            // Eklenecek/Güncellenecek personel için 1.okuyucuyudan geçiş yapabilir.
            Reader.Status.Enabled = true;

            // Dakika türünden zaman kısıtlaması 10 dakika olsun. Personel bu okuyucudan geçiş yaptıktan sonra 10 dakika boyunca tekrar geçemesin.
            Reader.Time_Limit = 10;

            // Okuyucuyu kullanım şekli. Anti-Passback yapılması isteniyorsa "None" yerine "InPoint", "OutPoint" veya "FreeOutPoint" değerlerinden birini kullanılır.
            Reader.Status.Reader_Direction = UserLib.UserReader.ReaderDirection.InPoint;
            Reader.Status.Anti_Passback_Status = UserLib.AntiPassbackStatus.None; // Kullanıcının bu kapıdaki içeride/dışarıda durumu.

            // 1.Period geçiş saatleri ( 07:30 ~ 08:00 arasında maks. 1 geçiş hakkı. )
            Reader.Time_Zones.Period1.SetValue(new DateTime(1, 1, 1, 7, 30, 2), new DateTime(1, 1, 1, 8, 0, 0), 1);

            // 2.Period geçiş saatleri ( 12:00 ~ 13:00 arasında maks. 3 geçiş hakkı. )
            Reader.Time_Zones.Period2.SetValue(new DateTime(1, 1, 1, 12, 0, 4), new DateTime(1, 1, 1, 13, 0, 0), 3);

            //--------------------------------------------------------------------------------------------------------------------------

            Reader = User.Readers[1]; // 2`nolu reader`a konumlan. Listede ki ilk kayıt 0`dan başladığı için 2`nolu reader 1. sıradadır.

            // Eklenecek/Güncellenecek personel için 1.okuyucuyudan geçiş yapabilir.
            Reader.Status.Enabled = true;

            // Dakika türünden zaman kısıtlaması 3 dakika olsun. Personel bu okuyucudan geçiş yaptıktan sonra 3 dakika boyunca tekrar geçemesin.
            Reader.Time_Limit = 3;

            // Okuyucuyu kullanım şekli. Anti-Passback yapılması isteniyorsa "None" yerine "InPoint", "OutPoint" veya "FreeOutPoint" değerlerinden birini kullanılır.
            Reader.Status.Reader_Direction = UserLib.UserReader.ReaderDirection.OutPoint;
            Reader.Status.Anti_Passback_Status = UserLib.AntiPassbackStatus.None; // Kullanıcının bu kapıdaki içeride/dışarıda durumu.

            //--------------------------------------------------------------------------------------------------------------------------

            // Console.WriteLine(User.ToJSON(Device_Reader_Count));

            return User.ToJSON(Device_Reader_Count);
        }

        public WebAccess WebAccess;
    }
}


--- CS Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\WebAccess_Lib\WebAccessRun.cs ---

==============================================

--- CSS Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\wwwroot\css\site.css ---

html, body {
    height: 100%;
}

app {
    display: block;
    height: 100%;
}

.header-logo {
    flex-shrink: 0;
    background-color: currentColor;
    -webkit-mask: url('../images/Logo.svg');
    mask: url('../images/Logo.svg');
    -webkit-mask-position: center;
    mask-position: center;
    -webkit-mask-repeat: no-repeat;
    mask-repeat: no-repeat;
    width: 180px;
    height: 24px;
}

#blazor-error-ui {
    background: inherit;
    bottom: 0;
    display: none;
    position: fixed;
    width: 100%;
    height: 100%;
    z-index: 100001;
}

.product-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 10px;
    padding: 10px;
}

.product-item {
    background-color: #f0f0f0;
    border: 1px solid #ddd;
    padding: 10px;
    text-align: center;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

    .product-item div {
        margin-bottom: 5px;
    }

--- CSS Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\wwwroot\css\site.css ---

==============================================

--- JS Dosya Başlangıcı: YildizOtoMasyonKart.Blazor.Server\wwwroot\scripts.js ---

window.JSFunctions = {
    clearElementById: function (elementId) {
        document.getElementById(elementId).value = '';
    },
    focusElementById: function (elementId) {
        document.getElementById(elementId).focus();
    }
};

--- JS Dosya Sonu: YildizOtoMasyonKart.Blazor.Server\wwwroot\scripts.js ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\BusinessObjects\ApplicationUser.cs ---

using System.ComponentModel;
using System.Text;
using DevExpress.ExpressApp;
using DevExpress.ExpressApp.Security;
using DevExpress.Persistent.BaseImpl.PermissionPolicy;
using DevExpress.Xpo;

namespace YildizOtoMasyonKart.Module.BusinessObjects;

[MapInheritance(MapInheritanceType.ParentTable)]
[DefaultProperty(nameof(UserName))]
public class ApplicationUser : PermissionPolicyUser, ISecurityUserWithLoginInfo, ISecurityUserLockout {
    private int accessFailedCount;
    private DateTime lockoutEnd;

    public ApplicationUser(Session session) : base(session) { }

    [Browsable(false)]
    public int AccessFailedCount {
        get { return accessFailedCount; }
        set { SetPropertyValue(nameof(AccessFailedCount), ref accessFailedCount, value); }
    }

    [Browsable(false)]
    public DateTime LockoutEnd {
        get { return lockoutEnd; }
        set { SetPropertyValue(nameof(LockoutEnd), ref lockoutEnd, value); }
    }

    [Browsable(false)]
    [Aggregated, Association("User-LoginInfo")]
    public XPCollection<ApplicationUserLoginInfo> LoginInfo {
        get { return GetCollection<ApplicationUserLoginInfo>(nameof(LoginInfo)); }
    }

    IEnumerable<ISecurityUserLoginInfo> IOAuthSecurityUser.UserLogins => LoginInfo.OfType<ISecurityUserLoginInfo>();

    ISecurityUserLoginInfo ISecurityUserWithLoginInfo.CreateUserLoginInfo(string loginProviderName, string providerUserKey) {
        ApplicationUserLoginInfo result = new ApplicationUserLoginInfo(Session);
        result.LoginProviderName = loginProviderName;
        result.ProviderUserKey = providerUserKey;
        result.User = this;
        return result;
    }
}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\BusinessObjects\ApplicationUser.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\BusinessObjects\ApplicationUserLoginInfo.cs ---

using DevExpress.ExpressApp.ConditionalAppearance;
using DevExpress.ExpressApp.Security;
using DevExpress.Persistent.BaseImpl;
using DevExpress.Xpo;

namespace YildizOtoMasyonKart.Module.BusinessObjects;

[DeferredDeletion(false)]
[Persistent("PermissionPolicyUserLoginInfo")]
public class ApplicationUserLoginInfo : BaseObject, ISecurityUserLoginInfo {
    private string loginProviderName;
    private ApplicationUser user;
    private string providerUserKey;
    public ApplicationUserLoginInfo(Session session) : base(session) { }

    [Indexed("ProviderUserKey", Unique = true)]
    [Appearance("PasswordProvider", Enabled = false, Criteria = "!(IsNewObject(this)) and LoginProviderName == '" + SecurityDefaults.PasswordAuthentication + "'", Context = "DetailView")]
    public string LoginProviderName {
        get { return loginProviderName; }
        set { SetPropertyValue(nameof(LoginProviderName), ref loginProviderName, value); }
    }

    [Appearance("PasswordProviderUserKey", Enabled = false, Criteria = "!(IsNewObject(this)) and LoginProviderName == '" + SecurityDefaults.PasswordAuthentication + "'", Context = "DetailView")]
    public string ProviderUserKey {
        get { return providerUserKey; }
        set { SetPropertyValue(nameof(ProviderUserKey), ref providerUserKey, value); }
    }

    [Association("User-LoginInfo")]
    public ApplicationUser User {
        get { return user; }
        set { SetPropertyValue(nameof(User), ref user, value); }
    }

    object ISecurityUserLoginInfo.User => User;
}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\BusinessObjects\ApplicationUserLoginInfo.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\Cihazlar.cs ---

using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
using DevExpress.Persistent.Base;
namespace YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB
{
    [DefaultClassOptions]
    public partial class Cihazlar
    {
        public Cihazlar(Session session) : base(session) { }
        public override void AfterConstruction() { base.AfterConstruction(); }
    }

}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\Cihazlar.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\Cihazlar.Designer.cs ---

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
namespace YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB
{

    public partial class Cihazlar : XPObject
    {
        string fCihazAdi;
        public string CihazAdi
        {
            get { return fCihazAdi; }
            set { SetPropertyValue<string>(nameof(CihazAdi), ref fCihazAdi, value); }
        }
        string fCihazId;
        public string CihazId
        {
            get { return fCihazId; }
            set { SetPropertyValue<string>(nameof(CihazId), ref fCihazId, value); }
        }
        string fModeli;
        public string Modeli
        {
            get { return fModeli; }
            set { SetPropertyValue<string>(nameof(Modeli), ref fModeli, value); }
        }
        string fOkuyucuSayisi;
        public string OkuyucuSayisi
        {
            get { return fOkuyucuSayisi; }
            set { SetPropertyValue<string>(nameof(OkuyucuSayisi), ref fOkuyucuSayisi, value); }
        }
        [Association(@"KapilarReferencesCihazlar"), Aggregated]
        public XPCollection<Kapilar> Kapilars { get { return GetCollection<Kapilar>(nameof(Kapilars)); } }
    }

}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\Cihazlar.Designer.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\GecisUcretleri.cs ---

using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
using DevExpress.Persistent.Base;
namespace YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB
{
    [DefaultClassOptions]
    public partial class GecisUcretleri
    {
        public GecisUcretleri(Session session) : base(session) { }
        public override void AfterConstruction() { base.AfterConstruction(); }
    }

}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\GecisUcretleri.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\GecisUcretleri.Designer.cs ---

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
namespace YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB
{

    public partial class GecisUcretleri : XPObject
    {
        DateTime fTarih;
        public DateTime Tarih
        {
            get { return fTarih; }
            set { SetPropertyValue<DateTime>(nameof(Tarih), ref fTarih, value); }
        }
        decimal fUcret;
        public decimal Ucret
        {
            get { return fUcret; }
            set { SetPropertyValue<decimal>(nameof(Ucret), ref fUcret, value); }
        }
    }

}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\GecisUcretleri.Designer.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\GirisCikislar.cs ---

using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
using DevExpress.Persistent.Base;
namespace YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB
{
    [DefaultClassOptions]
    public partial class GirisCikislar
    {
        public GirisCikislar(Session session) : base(session) { }
        public override void AfterConstruction() { base.AfterConstruction(); }

        protected override void OnSaving()
        {
            base.OnSaving();

            // Örneğin, KartBilgisi'nin null olup olmadığını kontrol edelim
            if (KartBilgileri != null)
            {
                decimal krtytn = KartBilgileri.KartOdemes?.Where(x => x.iade == false).Sum(x => x.YatanTutar) ?? 0;
                decimal gcstpl = (KartBilgileri.GirisCikislars?.Where(x => x.iade == false).Sum(x => x.Tutar) ?? 0) + (KartBilgileri.SatilanUrunlers?.Where(x => x.iade == false).Sum(x => x.Fiyat) ?? 0);

                KartBilgileri.KartBakiye = krtytn - gcstpl;

                
            }
            else
            {
                // KartBilgisi null ise burada uygun bir işlem yapın, örneğin bir log kaydı
                // veya özel bir durum fırlatabilirsiniz.
            }
        }
        protected override void OnDeleting()
        {
            base.OnDeleting();

            if (KartBilgileri != null)
            {
                decimal krtytn = KartBilgileri.KartOdemes?.Where(x => x.iade == false).Sum(x => x.YatanTutar) ?? 0;
                decimal gcstpl = (KartBilgileri.GirisCikislars?.Where(x => x.iade == false).Sum(x => x.Tutar) ?? 0) + (KartBilgileri.SatilanUrunlers?.Where(x => x.iade == false).Sum(x => x.Fiyat) ?? 0);

                KartBilgileri.KartBakiye = krtytn - gcstpl;
            }
        }



    }

}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\GirisCikislar.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\GirisCikislar.Designer.cs ---

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
namespace YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB
{

    public partial class GirisCikislar : XPObject
    {
        DateTime fTarih;
        public DateTime Tarih
        {
            get { return fTarih; }
            set { SetPropertyValue<DateTime>(nameof(Tarih), ref fTarih, value); }
        }
        Kapilar fKapi;
        public Kapilar Kapi
        {
            get { return fKapi; }
            set { SetPropertyValue<Kapilar>(nameof(Kapi), ref fKapi, value); }
        }
        decimal fTutar;
        public decimal Tutar
        {
            get { return fTutar; }
            set { SetPropertyValue<decimal>(nameof(Tutar), ref fTutar, value); }
        }
        KartGrubu fKartGrubu;
        public KartGrubu KartGrubu
        {
            get { return fKartGrubu; }
            set { SetPropertyValue<KartGrubu>(nameof(KartGrubu), ref fKartGrubu, value); }
        }
        KartBilgileri fKartBilgileri;
        [Association(@"GirisCikislarReferencesKartBilgileri")]
        public KartBilgileri KartBilgileri
        {
            get { return fKartBilgileri; }
            set { SetPropertyValue<KartBilgileri>(nameof(KartBilgileri), ref fKartBilgileri, value); }
        }
        bool fiade;
        public bool iade
        {
            get { return fiade; }
            set { SetPropertyValue<bool>(nameof(iade), ref fiade, value); }
        }
    }

}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\GirisCikislar.Designer.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\indirimler.cs ---

using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
using DevExpress.Persistent.Base;
namespace YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB
{
    [DefaultClassOptions]
    public partial class indirimler
    {
        public indirimler(Session session) : base(session) { }
        public override void AfterConstruction() { base.AfterConstruction(); }
    }

}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\indirimler.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\indirimler.Designer.cs ---

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
namespace YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB
{

    public partial class indirimler : XPObject
    {
        DateTime fTarihinden;
        public DateTime Tarihinden
        {
            get { return fTarihinden; }
            set { SetPropertyValue<DateTime>(nameof(Tarihinden), ref fTarihinden, value); }
        }
        DateTime fTarihine;
        public DateTime Tarihine
        {
            get { return fTarihine; }
            set { SetPropertyValue<DateTime>(nameof(Tarihine), ref fTarihine, value); }
        }
        int findirimOrani;
        public int indirimOrani
        {
            get { return findirimOrani; }
            set { SetPropertyValue<int>(nameof(indirimOrani), ref findirimOrani, value); }
        }
        decimal findirimTutari;
        public decimal indirimTutari
        {
            get { return findirimTutari; }
            set { SetPropertyValue<decimal>(nameof(indirimTutari), ref findirimTutari, value); }
        }
        KartGrubu fKartGrubu;
        public KartGrubu KartGrubu
        {
            get { return fKartGrubu; }
            set { SetPropertyValue<KartGrubu>(nameof(KartGrubu), ref fKartGrubu, value); }
        }
        string fAciklama;
        public string Aciklama
        {
            get { return fAciklama; }
            set { SetPropertyValue<string>(nameof(Aciklama), ref fAciklama, value); }
        }
    }

}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\indirimler.Designer.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\Kapilar.cs ---

using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
namespace YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB
{

    public partial class Kapilar
    {
        public Kapilar(Session session) : base(session) { }
        public override void AfterConstruction() { base.AfterConstruction(); }
    }

}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\Kapilar.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\Kapilar.Designer.cs ---

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
namespace YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB
{

    public partial class Kapilar : XPObject
    {
        string fAdi;
        public string Adi
        {
            get { return fAdi; }
            set { SetPropertyValue<string>(nameof(Adi), ref fAdi, value); }
        }
        Cihazlar fCihaz;
        [Association(@"KapilarReferencesCihazlar")]
        public Cihazlar Cihaz
        {
            get { return fCihaz; }
            set { SetPropertyValue<Cihazlar>(nameof(Cihaz), ref fCihaz, value); }
        }
    }

}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\Kapilar.Designer.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\KartBilgileri.cs ---

using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
using DevExpress.Persistent.Base;

namespace YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB
{
    [DefaultClassOptions]
    public partial class KartBilgileri
    {
        public KartBilgileri(Session session) : base(session) { }
        public override void AfterConstruction()
        {
            base.AfterConstruction();
            Tarih = DateTime.Now;

            // "Geçiş Kartı" ürünü Urunler tablosunda aranıyor
            Urunler gecisKartiUrunu = Session.FindObject<Urunler>(
                CriteriaOperator.Parse("UrunAdi == ?", "Geçiş Kartı")
            );

            // Eğer "Geçiş Kartı" ürünü yoksa, yeni bir ürün oluşturuluyor
            if (gecisKartiUrunu == null)
            {
                gecisKartiUrunu = new Urunler(Session)
                {
                    UrunAdi = "Geçiş Kartı",
                    Barkodu = Guid.NewGuid().ToString().Substring(0, 5), // Rastgele bir barkod oluşturulabilir
                    Kategori = null, // Gerekirse bir kategori set edilebilir
                    Fiyat = 20m
                };
                gecisKartiUrunu.Save(); // Ürünü veritabanına kaydet
            }

            // Yeni bir SatilanUrunler nesnesi oluşturuluyor
            SatilanUrunler satilanUrun = new SatilanUrunler(Session)
            {
                Tarih = DateTime.Now,
                Barkodu = gecisKartiUrunu.Barkodu,
                UrunAdi = gecisKartiUrunu.UrunAdi,
                Kategori = gecisKartiUrunu.Kategori,
                Fiyat = gecisKartiUrunu.Fiyat,
                KartBilgisi = this,
                iade = false
            };

            // SatilanUrunlers koleksiyonuna ekleniyor
            SatilanUrunlers.Add(satilanUrun);
        }
    }
}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\KartBilgileri.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\KartBilgileri.Designer.cs ---

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
namespace YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB
{

    public partial class KartBilgileri : XPObject
    {
        string fKartNo;
        public string KartNo
        {
            get { return fKartNo; }
            set { SetPropertyValue<string>(nameof(KartNo), ref fKartNo, value); }
        }
        string fAdiSoyadi;
        public string AdiSoyadi
        {
            get { return fAdiSoyadi; }
            set { SetPropertyValue<string>(nameof(AdiSoyadi), ref fAdiSoyadi, value); }
        }
        string fTelefonu;
        public string Telefonu
        {
            get { return fTelefonu; }
            set { SetPropertyValue<string>(nameof(Telefonu), ref fTelefonu, value); }
        }
        string fEmail;
        public string Email
        {
            get { return fEmail; }
            set { SetPropertyValue<string>(nameof(Email), ref fEmail, value); }
        }
        decimal fKartBakiye;
        public decimal KartBakiye
        {
            get { return fKartBakiye; }
            set { SetPropertyValue<decimal>(nameof(KartBakiye), ref fKartBakiye, value); }
        }
        KartGrubu fKartGrubu;
        public KartGrubu KartGrubu
        {
            get { return fKartGrubu; }
            set { SetPropertyValue<KartGrubu>(nameof(KartGrubu), ref fKartGrubu, value); }
        }
        bool fSinirsizGecis;
        public bool SinirsizGecis
        {
            get { return fSinirsizGecis; }
            set { SetPropertyValue<bool>(nameof(SinirsizGecis), ref fSinirsizGecis, value); }
        }
        indirimler findirimli;
        public indirimler indirimli
        {
            get { return findirimli; }
            set { SetPropertyValue<indirimler>(nameof(indirimli), ref findirimli, value); }
        }
        string fKartID;
        public string KartID
        {
            get { return fKartID; }
            set { SetPropertyValue<string>(nameof(KartID), ref fKartID, value); }
        }
        DateTime fTarih;
        public DateTime Tarih
        {
            get { return fTarih; }
            set { SetPropertyValue<DateTime>(nameof(Tarih), ref fTarih, value); }
        }
        [Association(@"KartOdemeReferencesKartBilgileri"), Aggregated]
        public XPCollection<KartOdeme> KartOdemes { get { return GetCollection<KartOdeme>(nameof(KartOdemes)); } }
        [Association(@"GirisCikislarReferencesKartBilgileri"), Aggregated]
        public XPCollection<GirisCikislar> GirisCikislars { get { return GetCollection<GirisCikislar>(nameof(GirisCikislars)); } }
        [Association(@"SatilanUrunlerReferencesKartBilgileri"), Aggregated]
        public XPCollection<SatilanUrunler> SatilanUrunlers { get { return GetCollection<SatilanUrunler>(nameof(SatilanUrunlers)); } }
    }

}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\KartBilgileri.Designer.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\KartGrubu.cs ---

using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
using DevExpress.Persistent.Base;
namespace YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB
{
    [DefaultClassOptions]
    public partial class KartGrubu
    {
        public KartGrubu(Session session) : base(session) { }
        public override void AfterConstruction() { base.AfterConstruction(); }
    }

}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\KartGrubu.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\KartGrubu.Designer.cs ---

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
namespace YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB
{

    public partial class KartGrubu : XPObject
    {
        string fGrubu;
        public string Grubu
        {
            get { return fGrubu; }
            set { SetPropertyValue<string>(nameof(Grubu), ref fGrubu, value); }
        }
    }

}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\KartGrubu.Designer.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\KartOdeme.cs ---

using System;
using DevExpress.Xpo;
using DevExpress.Data.Filtering;
using System.Linq;
using System.Diagnostics;
using DevExpress.Persistent.Base;

namespace YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB
{
    [DefaultClassOptions]
    public partial class KartOdeme : XPObject
    {
        public KartOdeme(Session session) : base(session) { }

        public override void AfterConstruction()
        {
            Tarih = DateTime.Now;
            base.AfterConstruction();
        }

        protected override void OnSaving()
        {
            base.OnSaving();
            if (!IsSaving || IsDeleted) return;

            try
            {
                // KartBilgisi güncellemesi
                UpdateKartBilgisi(Session, this);

                // KasaDetay güncellemesi
                //UpdateKasaDetay(Session, this);
            }
            catch (Exception ex)
            {
                Debug.WriteLine("Hata: " + ex.Message);
                throw;
            }
        }

        private void UpdateKartBilgisi(Session session, KartOdeme kartOdeme)
        {
            if (kartOdeme.KartBilgisi != null)
            {
                decimal krtytn = kartOdeme.KartBilgisi.KartOdemes?.Where(x => !x.iade).Sum(x => x.YatanTutar) ?? 0;
                decimal gcstpl = (kartOdeme.KartBilgisi.GirisCikislars?.Where(x => !x.iade).Sum(x => x.Tutar) ?? 0) +
                                 (kartOdeme.KartBilgisi.SatilanUrunlers?.Where(x => !x.iade).Sum(x => x.Fiyat) ?? 0);

                // KartBakiye'yi güncelle
                kartOdeme.KartBilgisi.KartBakiye = krtytn - gcstpl;
            }
        }
    }
}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\KartOdeme.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\KartOdeme.Designer.cs ---

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
namespace YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB
{

    public partial class KartOdeme : XPObject
    {
        DateTime fTarih;
        public DateTime Tarih
        {
            get { return fTarih; }
            set { SetPropertyValue<DateTime>(nameof(Tarih), ref fTarih, value); }
        }
        decimal fYatanTutar;
        public decimal YatanTutar
        {
            get { return fYatanTutar; }
            set { SetPropertyValue<decimal>(nameof(YatanTutar), ref fYatanTutar, value); }
        }
        bool fiade;
        public bool iade
        {
            get { return fiade; }
            set { SetPropertyValue<bool>(nameof(iade), ref fiade, value); }
        }
        KartBilgileri fKartBilgisi;
        [Association(@"KartOdemeReferencesKartBilgileri")]
        public KartBilgileri KartBilgisi
        {
            get { return fKartBilgisi; }
            set { SetPropertyValue<KartBilgileri>(nameof(KartBilgisi), ref fKartBilgisi, value); }
        }
        bool fKrediKarti;
        public bool KrediKarti
        {
            get { return fKrediKarti; }
            set { SetPropertyValue<bool>(nameof(KrediKarti), ref fKrediKarti, value); }
        }
    }

}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\KartOdeme.Designer.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\Kasa.cs ---

using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
using DevExpress.Persistent.Base;
namespace YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB
{
    [DefaultClassOptions]
    public partial class Kasa
    {
        public Kasa(Session session) : base(session) { }
        public override void AfterConstruction() { base.AfterConstruction(); }

        protected override void OnChanged(string propertyName, object oldValue, object newValue)
        {
            base.OnChanged(propertyName, oldValue, newValue);

            if (oldValue != null)
            {
                if (newValue != null)
                {
                    Toplam = Nakit + KrediKarti;
                }
            }
        }
    }

}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\Kasa.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\Kasa.Designer.cs ---

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
namespace YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB
{

    public partial class Kasa : XPObject
    {
        decimal fNakit;
        public decimal Nakit
        {
            get { return fNakit; }
            set { SetPropertyValue<decimal>(nameof(Nakit), ref fNakit, value); }
        }
        decimal fKrediKarti;
        public decimal KrediKarti
        {
            get { return fKrediKarti; }
            set { SetPropertyValue<decimal>(nameof(KrediKarti), ref fKrediKarti, value); }
        }
        decimal fToplam;
        public decimal Toplam
        {
            get { return fToplam; }
            set { SetPropertyValue<decimal>(nameof(Toplam), ref fToplam, value); }
        }
        string fKasaAdi;
        public string KasaAdi
        {
            get { return fKasaAdi; }
            set { SetPropertyValue<string>(nameof(KasaAdi), ref fKasaAdi, value); }
        }
        [Association(@"KasaDetayReferencesKasa"), Aggregated]
        public XPCollection<KasaDetay> KasaDetays { get { return GetCollection<KasaDetay>(nameof(KasaDetays)); } }
    }

}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\Kasa.Designer.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\KasaDetay.cs ---

using System;
using DevExpress.Xpo;
using DevExpress.Data.Filtering;
using DevExpress.Persistent.BaseImpl.PermissionPolicy;
using DevExpress.ExpressApp;

namespace YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB
{
    public partial class KasaDetay : XPObject
    {
        public KasaDetay(Session session) : base(session) { }

        public override void AfterConstruction()
        {
            base.AfterConstruction();

            // Oturum açan kullanıcının bilgilerini al ve Giseci alanına ata
            if (SecuritySystem.CurrentUserId != null)
            {
                Giseci = Session.GetObjectByKey<PermissionPolicyUser>(SecuritySystem.CurrentUserId);
            }
        }
        protected override void OnChanged(string propertyName, object oldValue, object newValue)
        {
            if (propertyName== "NakitToplam"|| propertyName == "KrediKartiToplam")
            {
                ToplamKazanc = NakitToplam + KrediKartiToplam;
            }
            base.OnChanged(propertyName, oldValue, newValue);
        }
        protected override void OnSaving()
        {
            base.OnSaving();

            if (Kasa != null && Kasa.Session != Session)
            {
                // Eğer Kasa nesnesi farklı bir session'a aitse, bu session'dan yeni bir Kasa nesnesi oluşturulmalı
                var existingKasa = Session.GetObjectByKey<Kasa>(Kasa.Oid);

                if (existingKasa != null)
                {
                    Kasa = existingKasa;
                }
                else
                {
                    // Eğer Kasa nesnesi bu session'da yoksa, bu session için yeni bir Kasa nesnesi oluşturun
                    Kasa = new Kasa(Session)
                    {
                        KasaAdi = Kasa.KasaAdi,
                        KrediKarti = Kasa.KrediKarti,
                        Nakit = Kasa.Nakit
                    };
                }
            }

            if (Kasa != null)
            {
                Kasa.KrediKarti = Kasa.KasaDetays?.Where(x => x.TeslimAlindi == false).Sum(x => x.KrediKartiToplam) ?? 0;
                Kasa.Nakit = Kasa.KasaDetays?.Where(x => x.TeslimAlindi == false).Sum(x => x.NakitToplam) ?? 0;
            }
        }
    }
}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\KasaDetay.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\KasaDetay.Designer.cs ---

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
using DevExpress.Persistent.BaseImpl.PermissionPolicy;
namespace YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB
{

    public partial class KasaDetay : XPObject
    {
        PermissionPolicyUser fGiseci;
        public PermissionPolicyUser Giseci
        {
            get { return fGiseci; }
            set { SetPropertyValue<PermissionPolicyUser>(nameof(Giseci), ref fGiseci, value); }
        }
        DateTime fTarih;
        public DateTime Tarih
        {
            get { return fTarih; }
            set { SetPropertyValue<DateTime>(nameof(Tarih), ref fTarih, value); }
        }
        decimal fNakitToplam;
        public decimal NakitToplam
        {
            get { return fNakitToplam; }
            set { SetPropertyValue<decimal>(nameof(NakitToplam), ref fNakitToplam, value); }
        }
        decimal fKrediKartiToplam;
        public decimal KrediKartiToplam
        {
            get { return fKrediKartiToplam; }
            set { SetPropertyValue<decimal>(nameof(KrediKartiToplam), ref fKrediKartiToplam, value); }
        }
        decimal fToplamKazanc;
        public decimal ToplamKazanc
        {
            get { return fToplamKazanc; }
            set { SetPropertyValue<decimal>(nameof(ToplamKazanc), ref fToplamKazanc, value); }
        }
        Kasa fKasa;
        [Association(@"KasaDetayReferencesKasa")]
        public Kasa Kasa
        {
            get { return fKasa; }
            set { SetPropertyValue<Kasa>(nameof(Kasa), ref fKasa, value); }
        }
        decimal fTeslimAlinanTutar;
        public decimal TeslimAlinanTutar
        {
            get { return fTeslimAlinanTutar; }
            set { SetPropertyValue<decimal>(nameof(TeslimAlinanTutar), ref fTeslimAlinanTutar, value); }
        }
        decimal fEksikTutar;
        public decimal EksikTutar
        {
            get { return fEksikTutar; }
            set { SetPropertyValue<decimal>(nameof(EksikTutar), ref fEksikTutar, value); }
        }
        string fEksikAciklama;
        [Size(SizeAttribute.Unlimited)]
        public string EksikAciklama
        {
            get { return fEksikAciklama; }
            set { SetPropertyValue<string>(nameof(EksikAciklama), ref fEksikAciklama, value); }
        }
        PermissionPolicyUser fTeslimAlan;
        public PermissionPolicyUser TeslimAlan
        {
            get { return fTeslimAlan; }
            set { SetPropertyValue<PermissionPolicyUser>(nameof(TeslimAlan), ref fTeslimAlan, value); }
        }
        bool fTeslimAlindi;
        public bool TeslimAlindi
        {
            get { return fTeslimAlindi; }
            set { SetPropertyValue<bool>(nameof(TeslimAlindi), ref fTeslimAlindi, value); }
        }
    }

}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\KasaDetay.Designer.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\SatilanUrunler.cs ---

using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
using DevExpress.Persistent.Base;
namespace YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB
{
    [DefaultClassOptions]
    public partial class SatilanUrunler
    {
        public SatilanUrunler(Session session) : base(session) { }
        public override void AfterConstruction() { base.AfterConstruction(); }

        protected override void OnSaving()
        {
            base.OnSaving();

            // Örneğin, KartBilgisi'nin null olup olmadığını kontrol edelim
            if (KartBilgisi != null)
            {
                decimal krtytn = KartBilgisi.KartOdemes?.Where(x => x.iade == false).Sum(x => x.YatanTutar) ?? 0;
                decimal gcstpl = (KartBilgisi.GirisCikislars?.Where(x => x.iade == false).Sum(x => x.Tutar) ?? 0) + (KartBilgisi.SatilanUrunlers?.Where(x => x.iade == false).Sum(x => x.Fiyat) ?? 0);

                KartBilgisi.KartBakiye = krtytn - gcstpl;
            }
            else
            {
                // KartBilgisi null ise burada uygun bir işlem yapın, örneğin bir log kaydı
                // veya özel bir durum fırlatabilirsiniz.
            }
        }

        protected override void OnDeleting()
        {
            base.OnDeleting();

            if (KartBilgisi != null)
            {
                decimal krtytn = KartBilgisi.KartOdemes?.Where(x => x.iade == false).Sum(x => x.YatanTutar) ?? 0;
                decimal gcstpl = (KartBilgisi.GirisCikislars?.Where(x => x.iade == false).Sum(x => x.Tutar) ?? 0) + (KartBilgisi.SatilanUrunlers?.Where(x => x.iade == false).Sum(x => x.Fiyat) ?? 0);

                KartBilgisi.KartBakiye = krtytn - gcstpl;
            }
        }

    }

}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\SatilanUrunler.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\SatilanUrunler.Designer.cs ---

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
namespace YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB
{

    public partial class SatilanUrunler : XPObject
    {
        DateTime fTarih;
        public DateTime Tarih
        {
            get { return fTarih; }
            set { SetPropertyValue<DateTime>(nameof(Tarih), ref fTarih, value); }
        }
        string fBarkodu;
        public string Barkodu
        {
            get { return fBarkodu; }
            set { SetPropertyValue<string>(nameof(Barkodu), ref fBarkodu, value); }
        }
        string fUrunAdi;
        public string UrunAdi
        {
            get { return fUrunAdi; }
            set { SetPropertyValue<string>(nameof(UrunAdi), ref fUrunAdi, value); }
        }
        UrunKategori fKategori;
        public UrunKategori Kategori
        {
            get { return fKategori; }
            set { SetPropertyValue<UrunKategori>(nameof(Kategori), ref fKategori, value); }
        }
        decimal fFiyat;
        public decimal Fiyat
        {
            get { return fFiyat; }
            set { SetPropertyValue<decimal>(nameof(Fiyat), ref fFiyat, value); }
        }
        KartBilgileri fKartBilgisi;
        [Association(@"SatilanUrunlerReferencesKartBilgileri")]
        public KartBilgileri KartBilgisi
        {
            get { return fKartBilgisi; }
            set { SetPropertyValue<KartBilgileri>(nameof(KartBilgisi), ref fKartBilgisi, value); }
        }
        bool fiade;
        public bool iade
        {
            get { return fiade; }
            set { SetPropertyValue<bool>(nameof(iade), ref fiade, value); }
        }
    }

}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\SatilanUrunler.Designer.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\UrunKategori.cs ---

using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
using DevExpress.Persistent.Base;
namespace YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB
{
    [DefaultClassOptions]
    public partial class UrunKategori
    {
        public UrunKategori(Session session) : base(session) { }
        public override void AfterConstruction() { base.AfterConstruction(); }
    }

}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\UrunKategori.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\UrunKategori.Designer.cs ---

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
namespace YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB
{

    public partial class UrunKategori : XPObject
    {
        string fKategori;
        public string Kategori
        {
            get { return fKategori; }
            set { SetPropertyValue<string>(nameof(Kategori), ref fKategori, value); }
        }
    }

}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\UrunKategori.Designer.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\Urunler.cs ---

using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
using DevExpress.Persistent.Base;
namespace YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB
{
    [DefaultClassOptions]
    public partial class Urunler
    {
        public Urunler(Session session) : base(session) { }
        public override void AfterConstruction() { base.AfterConstruction(); }
    }

}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\Urunler.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\Urunler.Designer.cs ---

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
namespace YildizOtomasyon.Module.BusinessObjects.YildizOtomasyonDB
{

    public partial class Urunler : XPObject
    {
        string fBarkodu;
        public string Barkodu
        {
            get { return fBarkodu; }
            set { SetPropertyValue<string>(nameof(Barkodu), ref fBarkodu, value); }
        }
        string fUrunAdi;
        public string UrunAdi
        {
            get { return fUrunAdi; }
            set { SetPropertyValue<string>(nameof(UrunAdi), ref fUrunAdi, value); }
        }
        UrunKategori fKategori;
        public UrunKategori Kategori
        {
            get { return fKategori; }
            set { SetPropertyValue<UrunKategori>(nameof(Kategori), ref fKategori, value); }
        }
        decimal fFiyat;
        public decimal Fiyat
        {
            get { return fFiyat; }
            set { SetPropertyValue<decimal>(nameof(Fiyat), ref fFiyat, value); }
        }
    }

}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\BusinessObjects\YildizOtomasyonDBCode\Urunler.Designer.cs ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\DatabaseUpdate\Updater.cs ---

using DevExpress.ExpressApp;
using DevExpress.Data.Filtering;
using DevExpress.Persistent.Base;
using DevExpress.ExpressApp.Updating;
using DevExpress.ExpressApp.Security;
using DevExpress.ExpressApp.SystemModule;
using DevExpress.ExpressApp.Security.Strategy;
using DevExpress.Xpo;
using DevExpress.ExpressApp.Xpo;
using DevExpress.Persistent.BaseImpl;
using DevExpress.Persistent.BaseImpl.PermissionPolicy;
using YildizOtoMasyonKart.Module.BusinessObjects;
using Microsoft.Extensions.DependencyInjection;

namespace YildizOtoMasyonKart.Module.DatabaseUpdate;

// For more typical usage scenarios, be sure to check out https://docs.devexpress.com/eXpressAppFramework/DevExpress.ExpressApp.Updating.ModuleUpdater
public class Updater : ModuleUpdater
{
    public Updater(IObjectSpace objectSpace, Version currentDBVersion) :
        base(objectSpace, currentDBVersion)
    {
    }
    public override void UpdateDatabaseAfterUpdateSchema()
    {
        base.UpdateDatabaseAfterUpdateSchema();
        //string name = "MyName";
        //DomainObject1 theObject = ObjectSpace.FirstOrDefault<DomainObject1>(u => u.Name == name);
        //if(theObject == null) {
        //    theObject = ObjectSpace.CreateObject<DomainObject1>();
        //    theObject.Name = name;
        //}

        // The code below creates users and roles for testing purposes only.
        // In production code, you can create users and assign roles to them automatically, as described in the following help topic:
        // https://docs.devexpress.com/eXpressAppFramework/119064/data-security-and-safety/security-system/authentication

        // If a role doesn't exist in the database, create this role
        var defaultRole = CreateDefaultRole();
        var adminRole = CreateAdminRole();

        ObjectSpace.CommitChanges(); //This line persists created object(s).

        UserManager userManager = ObjectSpace.ServiceProvider.GetRequiredService<UserManager>();
        // If a user named 'User' doesn't exist in the database, create this user
        if (userManager.FindUserByName<ApplicationUser>(ObjectSpace, "User") == null)
        {
            // Set a password if the standard authentication type is used
            string EmptyPassword = "";
            _ = userManager.CreateUser<ApplicationUser>(ObjectSpace, "User", EmptyPassword, (user) => {
                // Add the Users role to the user
                user.Roles.Add(defaultRole);
            });
        }

        // If a user named 'Admin' doesn't exist in the database, create this user
        if (userManager.FindUserByName<ApplicationUser>(ObjectSpace, "Admin") == null)
        {
            // Set a password if the standard authentication type is used
            string EmptyPassword = "";
            _ = userManager.CreateUser<ApplicationUser>(ObjectSpace, "Admin", EmptyPassword, (user) => {
                // Add the Administrators role to the user
                user.Roles.Add(adminRole);
            });
        }

        ObjectSpace.CommitChanges(); //This line persists created object(s).
    }
    public override void UpdateDatabaseBeforeUpdateSchema()
    {
        base.UpdateDatabaseBeforeUpdateSchema();
        //if(CurrentDBVersion < new Version("1.1.0.0") && CurrentDBVersion > new Version("0.0.0.0")) {
        //    RenameColumn("DomainObject1Table", "OldColumnName", "NewColumnName");
        //}
    }
    private PermissionPolicyRole CreateAdminRole()
    {
        PermissionPolicyRole adminRole = ObjectSpace.FirstOrDefault<PermissionPolicyRole>(r => r.Name == "Administrators");
        if (adminRole == null)
        {
            adminRole = ObjectSpace.CreateObject<PermissionPolicyRole>();
            adminRole.Name = "Administrators";
            adminRole.IsAdministrative = true;
        }
        return adminRole;
    }
    private PermissionPolicyRole CreateDefaultRole()
    {
        PermissionPolicyRole defaultRole = ObjectSpace.FirstOrDefault<PermissionPolicyRole>(role => role.Name == "Default");
        if (defaultRole == null)
        {
            defaultRole = ObjectSpace.CreateObject<PermissionPolicyRole>();
            defaultRole.Name = "Default";

            defaultRole.AddObjectPermissionFromLambda<ApplicationUser>(SecurityOperations.Read, cm => cm.Oid == (Guid)CurrentUserIdOperator.CurrentUserId(), SecurityPermissionState.Allow);
            defaultRole.AddNavigationPermission(@"Application/NavigationItems/Items/Default/Items/MyDetails", SecurityPermissionState.Allow);
            defaultRole.AddMemberPermissionFromLambda<ApplicationUser>(SecurityOperations.Write, "ChangePasswordOnFirstLogon", cm => cm.Oid == (Guid)CurrentUserIdOperator.CurrentUserId(), SecurityPermissionState.Allow);
            defaultRole.AddMemberPermissionFromLambda<ApplicationUser>(SecurityOperations.Write, "StoredPassword", cm => cm.Oid == (Guid)CurrentUserIdOperator.CurrentUserId(), SecurityPermissionState.Allow);
            defaultRole.AddTypePermissionsRecursively<PermissionPolicyRole>(SecurityOperations.Read, SecurityPermissionState.Deny);
            defaultRole.AddObjectPermission<ModelDifference>(SecurityOperations.ReadWriteAccess, "UserId = ToStr(CurrentUserId())", SecurityPermissionState.Allow);
            defaultRole.AddObjectPermission<ModelDifferenceAspect>(SecurityOperations.ReadWriteAccess, "Owner.UserId = ToStr(CurrentUserId())", SecurityPermissionState.Allow);
            defaultRole.AddTypePermissionsRecursively<ModelDifference>(SecurityOperations.Create, SecurityPermissionState.Allow);
            defaultRole.AddTypePermissionsRecursively<ModelDifferenceAspect>(SecurityOperations.Create, SecurityPermissionState.Allow);
        }
        return defaultRole;
    }
}

--- CS Dosya Sonu: YildizOtoMasyonKart.Module\DatabaseUpdate\Updater.cs ---

==============================================

--- XAFML Dosya Başlangıcı: YildizOtoMasyonKart.Module\Model.DesignedDiffs.Localization.tr.xafml ---

<?xml version="1.0" encoding="utf-8"?>
<Application />

--- XAFML Dosya Sonu: YildizOtoMasyonKart.Module\Model.DesignedDiffs.Localization.tr.xafml ---

==============================================

--- XAFML Dosya Başlangıcı: YildizOtoMasyonKart.Module\Model.DesignedDiffs.xafml ---

<?xml version="1.0" encoding="utf-8"?>
<Application Title="YildizOtoMasyonKart" PreferredLanguage="tr">
  <BOModel>
    <Class Name="DevExpress.Persistent.BaseImpl.PermissionPolicy.PermissionPolicyUser" Caption="Base User" />
  </BOModel>
  <Options>
    <LayoutManagerOptions RequiredFieldMark="*" />
  </Options>
  <SchemaModules>
    <SchemaModule Name="SystemModule" Version="24.1.3.0" IsNewNode="True" />
  </SchemaModules>
  <Views>
    <ListView Id="ApplicationUser_ListView" Caption="Users" />
  </Views>
</Application>

--- XAFML Dosya Sonu: YildizOtoMasyonKart.Module\Model.DesignedDiffs.xafml ---

==============================================

--- CS Dosya Başlangıcı: YildizOtoMasyonKart.Module\Module.cs ---

using System.ComponentModel;
using DevExpress.ExpressApp;
using DevExpress.ExpressApp.DC;
using DevExpress.Persistent.Base;
using DevExpress.Persistent.BaseImpl;
using DevExpress.Persistent.BaseImpl.PermissionPolicy;
using DevExpress.ExpressApp.Model;
using DevExpress.ExpressApp.Actions;
using DevExpress.ExpressApp.Editors;
using DevExpress.ExpressApp.Updating;
using DevExpress.ExpressApp.Model.Core;
using DevExpress.ExpressApp.Model.DomainLogics;
using DevExpress.ExpressApp.Model.NodeGenerators;
using DevExpress.Xpo;
using DevExpress.ExpressApp.Xpo;

namespace YildizOtoMasyonKart.Module;

// For more typical usage scenarios, be sure to check out https://docs.devexpress.com/eXpressAppFramework/DevExpress.ExpressApp.ModuleBase.
public sealed class YildizOtoMasyonKartModule : ModuleBase {
    public YildizOtoMasyonKartModule() {
		// 
		// YildizOtoMasyonKartModule
		// 
		AdditionalExportedTypes.Add(typeof(DevExpress.Persistent.BaseImpl.ModelDifference));
		AdditionalExportedTypes.Add(typeof(DevExpress.Persistent.BaseImpl.ModelDifferenceAspect));
		RequiredModuleTypes.Add(typeof(DevExpress.ExpressApp.SystemModule.SystemModule));
		RequiredModuleTypes.Add(typeof(DevExpress.ExpressApp.Security.SecurityModule));
		RequiredModuleTypes.Add(typeof(DevExpress.ExpressApp.Objects.BusinessClassLibraryCustomizationModule));
		RequiredModuleTypes.Add(typeof(DevExpress.ExpressApp.ConditionalAppearance.ConditionalAppearanceModule));
		RequiredModuleTypes.Add(typeof(DevExpress.ExpressApp.Dashboards.DashboardsModule));
		RequiredModuleTypes.Add(typeof(DevExpress.ExpressApp.Office.OfficeModule));
		RequiredModuleTypes.Add(typeof(DevExpress.ExpressApp.ReportsV2.ReportsModuleV2));
		RequiredModuleTypes.Add(typeof(DevExpress.ExpressApp.Validation.ValidationModule));
    }
    public override IEnumerable<ModuleUpdater> GetModuleUpdaters(IObjectSpace objectSpace, Version versionFromDB) {
        ModuleUpdater updater = new DatabaseUpdate.Updater(objectSpace, versionFromDB);
        return new ModuleUpdater[] { updater };
    }
    public override void Setup(XafApplication application) {
        base.Setup(application);
        // Manage various aspects of the application UI and behavior at the module level.
    }
    public override void CustomizeTypesInfo(ITypesInfo typesInfo) {
        base.CustomizeTypesInfo(typesInfo);
        CalculatedPersistentAliasHelper.CustomizeTypesInfo(typesInfo);
    }
}


--- CS Dosya Sonu: YildizOtoMasyonKart.Module\Module.cs ---

==============================================

--- HTML Dosya Başlangıcı: YildizOtoMasyonKart.Module\Welcome.html ---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>Your XAF application</title>
    <style>
        body {
            background: #fff;
            color: #505050;
            font: 12px 'Segoe UI', tahoma, arial, helvetica, sans-serif;
            margin: 20px;
            padding: 0;
        }

        #header {
            background: #efefef;
            padding: 0;
        }

        h1 {
            font-size: 20px;
            font-weight: normal;
            margin: 0;
            padding: 0 30px;
            line-height: 50px;
        }

        p {
            font-size: 20px;
            color: #fff;
            background: #ff6a00;
            padding: 0 30px;
            line-height: 50px;
        }

        #main {
            padding: 5px 15px;
        }

        .section {
            width: 18%;
            float: left;
            min-width : 200px;
            margin: 10px 0 0 15px;
        }

        .section h2 {
            font-size: 13px;
            text-transform: uppercase;
            margin: 0;
            border-bottom: 1px solid silver;
            padding-bottom: 12px;
            margin-bottom: 8px;
        }

        .section.first {
            margin-left: 0;
            margin-right : 14px;
            width: 10%;
            min-width : 330px;
        }

        .section.first h2 {
            font-size: 14px;
            text-transform: none;
            margin-bottom: 2px;
            border: none;
        }

        .section.first li {
            border-top: 1px solid silver;
            padding: 8px 0;
        }

        .section.last {
            margin-right: 0;
        }

        ul {
            list-style: none;
            padding: 0;
            margin: 0;
            line-height: 18px;
        }

        li {
            padding: 6px 0;
        }

        a {
            color: #267cb2;
            text-decoration: none;
        }

        a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div id="header">
        <p>Congratulations! You've created a project</p>
    </div>
    <div id="main" style="width:100%">
        <table style="width:100%">
        <tr>
        <td style="width:330px; vertical-align:top">
        <div class="section first">
            <h2>The XAF Solution Wizard has successfully generated the solution according to your settings.</h2>
            <ul>
                <li>The <b>YildizOtoMasyonKart.Module</b> project keeps your platform-agnostic code.
                Add persistent objects code to the <b>Business Objects</b> folder of this project and XAF will automatically create a UI to create, read, update and delete these persistent objects.</li>
                <li>To specify the database used by your application, modify the ConnectionString entry in the YildizOtoMasyonKart.Blazor.Server/appsettings.json file.</li>
                <li>To login, enter the <b>"Admin"</b> user name with empty password.</li>
            </ul>
        </div>
        </td>
        <td style="vertical-align:top">
        <div class="section">
            <h2>1. Design Data Model</h2>
            <ul>
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/112847">Ways to Add a Business Class</a></li>
    
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/113586">Define the Logical Data Model and Relationships</a></li>
  
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/113525">Display Member of a Business Class</a></li>
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/113014">Data Types Supported by Built-in Editors</a></li>
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/117395">PropertyChanged Event in Business Classes</a></li>
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/112600">Business Model Design with XPO</a></li>

                <li><a href="https://docs.devexpress.com/eXpressAppFramework/112788">Supply Initial Data</a></li>
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/112701">Data Annotations in Data Model</a></li>
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/113583">Customize Business Class Metadata Dynamically</a></li>
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/116516">Non-Persistent Objects</a></li>
            </ul>
        </div>
        <div class="section">
            <h2>2. Customize UI Structure</h2>
            <ul>
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/112569">Application Solution Components</a></li>
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/113445">Application Personalization</a></li>
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/112579">Application UI Model</a></li>
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/112607">UI Element Overview</a></li>
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/112748">UI Customization</a></li>
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/112843">Design-Time Features</a></li>
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/113298">Localization</a></li>
            </ul>
        </div>
        <div class="section" style="min-width : 220px">
            <h2>3. Implement Custom Behavior</h2>
            <ul>
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/113708">Data Manipulation and Business Logic</a></li>
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/112623">Controllers and Actions</a></li>
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/112803">Ways to Show a View</a></li>
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/112740">Extend Functionality</a></li>
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/120092">Access UI Elements and Their Controls</a></li>
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/113610">Using a Custom Control that is not Integrated by Default</a></li>
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/112572">Debugging and Error Handling</a></li>
            </ul>
        </div>
        <div class="section">
            <h2>4. Test and Deploy</h2>
            <ul>
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/112572">Unit and Functional Testing</a></li>
                <li><a href="https://www.devexpress.com/kb=T148978">Measure and Improve Performance</a></li>
                <li><a href="https://nuget.devexpress.com">Optimize CI/CD Processes with NuGet</a></li>
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/113033">Redistribution and Deployment</a></li>
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/113231">Deployment Tutorial</a></li>
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/113238">Deployment Troubleshooting</a></li>
            </ul>
        </div>
        <div class="section">
            <h2>5. Get Support and Learn</h2>
            <ul>
                <li><a href="https://www.devexpress.com/sc">Search the KB, Examples and Support Tickets</a></li>
                <li><a href="https://www.devexpress.com/go/XAF_Community_Consulting_Training.aspx">XAF Community, Consulting and Training</a></li>
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/113054">Frequently Asked Questions (FAQ)</a></li>
                <li><a href="https://docs.devexpress.com/eXpressAppFramework/112682/">Task-Based Help By Categories</a></li>
                <li><a href="https://community.devexpress.com/blogs/xaf/">Development Blog</a></li>
                <li><a href="https://www.devexpress.com/go/XAF_Roadmap.aspx">Roadmap</a></li>
            </ul>
        </div>
        </td>
        </tr>
        </table>
    </div>
    <div id="footer">
        <ul><li>If you have questions or need assistance, our <a href="https://supportcenter.devexpress.com/">best-in-class support service</a> is ready to help you.</li></ul>
    </div>
</body>
</html>


--- HTML Dosya Sonu: YildizOtoMasyonKart.Module\Welcome.html ---

==============================================

